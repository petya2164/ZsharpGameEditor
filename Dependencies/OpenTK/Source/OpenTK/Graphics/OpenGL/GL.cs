#region License
//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2009 the Open Toolkit library.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//
#endregion

namespace OpenTK.Graphics.OpenGL
{
    using System;
    using System.Text;
    using System.Runtime.InteropServices;
    #pragma warning disable 3019
    #pragma warning disable 1591
    #pragma warning disable 1572
    #pragma warning disable 1573

    partial class GL
    {

        public static partial class Arb
        {
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glActiveTextureARB")]
            public static
            void ActiveTexture(int texture)
            {
                Delegates.glActiveTextureARB((OpenTK.Graphics.OpenGL.TextureUnit)texture);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glActiveTextureARB")]
            public static
            void ActiveTexture(OpenTK.Graphics.OpenGL.TextureUnit texture)
            {
                Delegates.glActiveTextureARB((OpenTK.Graphics.OpenGL.TextureUnit)texture);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glAttachObjectARB")]
            public static
            void AttachObject(Int32 containerObj, Int32 obj)
            {
                Delegates.glAttachObjectARB((UInt32)containerObj, (UInt32)obj);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glAttachObjectARB")]
            public static
            void AttachObject(UInt32 containerObj, UInt32 obj)
            {
                Delegates.glAttachObjectARB((UInt32)containerObj, (UInt32)obj);
            }

            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glBeginQueryARB")]
            public static
            void BeginQuery(OpenTK.Graphics.OpenGL.ARB_occlusion_query target, Int32 id)
            {
                Delegates.glBeginQueryARB((OpenTK.Graphics.OpenGL.ARB_occlusion_query)target, (UInt32)id);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glBeginQueryARB")]
            public static
            void BeginQuery(OpenTK.Graphics.OpenGL.ARB_occlusion_query target, UInt32 id)
            {
                Delegates.glBeginQueryARB((OpenTK.Graphics.OpenGL.ARB_occlusion_query)target, (UInt32)id);
            }

            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glBeginQueryARB")]
            public static
            void BeginQuery(int target, Int32 id)
            {
                Delegates.glBeginQueryARB((OpenTK.Graphics.OpenGL.ARB_occlusion_query)target, (UInt32)id);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glBeginQueryARB")]
            public static
            void BeginQuery(int target, UInt32 id)
            {
                Delegates.glBeginQueryARB((OpenTK.Graphics.OpenGL.ARB_occlusion_query)target, (UInt32)id);
            }

            [AutoGenerated(Category = "ARB_vertex_shader", Version = "1.2", EntryPoint = "glBindAttribLocationARB")]
            public static
            void BindAttribLocation(Int32 programObj, Int32 index, String name)
            {
                Delegates.glBindAttribLocationARB((UInt32)programObj, (UInt32)index, (String)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_shader", Version = "1.2", EntryPoint = "glBindAttribLocationARB")]
            public static
            void BindAttribLocation(UInt32 programObj, UInt32 index, String name)
            {
                Delegates.glBindAttribLocationARB((UInt32)programObj, (UInt32)index, (String)name);
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBindBufferARB")]
            public static
            void BindBuffer(OpenTK.Graphics.OpenGL.BufferTargetARB target, Int32 buffer)
            {
                Delegates.glBindBufferARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBindBufferARB")]
            public static
            void BindBuffer(OpenTK.Graphics.OpenGL.BufferTargetARB target, UInt32 buffer)
            {
                Delegates.glBindBufferARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (UInt32)buffer);
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBindBufferARB")]
            public static
            void BindBuffer(int target, Int32 buffer)
            {
                Delegates.glBindBufferARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBindBufferARB")]
            public static
            void BindBuffer(int target, UInt32 buffer)
            {
                Delegates.glBindBufferARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (UInt32)buffer);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glBindProgramARB")]
            public static
            void BindProgram(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, Int32 program)
            {
                Delegates.glBindProgramARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)program);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glBindProgramARB")]
            public static
            void BindProgram(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, UInt32 program)
            {
                Delegates.glBindProgramARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)program);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glBindProgramARB")]
            public static
            void BindProgram(int target, Int32 program)
            {
                Delegates.glBindProgramARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)program);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glBindProgramARB")]
            public static
            void BindProgram(int target, UInt32 program)
            {
                Delegates.glBindProgramARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)program);
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBufferDataARB")]
            public static
            void BufferData(OpenTK.Graphics.OpenGL.BufferTargetARB target, IntPtr size, IntPtr data, OpenTK.Graphics.OpenGL.BufferUsageARB usage)
            {
                Delegates.glBufferDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)size, (IntPtr)data, (OpenTK.Graphics.OpenGL.BufferUsageARB)usage);
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBufferDataARB")]
            public static
            void BufferData<T2>(OpenTK.Graphics.OpenGL.BufferTargetARB target, IntPtr size, [InAttribute, OutAttribute] T2[] data, OpenTK.Graphics.OpenGL.BufferUsageARB usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.BufferUsageARB)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBufferDataARB")]
            public static
            void BufferData<T2>(OpenTK.Graphics.OpenGL.BufferTargetARB target, IntPtr size, [InAttribute, OutAttribute] T2[,] data, OpenTK.Graphics.OpenGL.BufferUsageARB usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.BufferUsageARB)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBufferDataARB")]
            public static
            void BufferData<T2>(OpenTK.Graphics.OpenGL.BufferTargetARB target, IntPtr size, [InAttribute, OutAttribute] T2[,,] data, OpenTK.Graphics.OpenGL.BufferUsageARB usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.BufferUsageARB)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBufferDataARB")]
            public static
            void BufferData<T2>(OpenTK.Graphics.OpenGL.BufferTargetARB target, IntPtr size, [InAttribute, OutAttribute] ref T2 data, OpenTK.Graphics.OpenGL.BufferUsageARB usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.BufferUsageARB)usage);
                    data = (T2)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBufferDataARB")]
            public static
            void BufferData(int target, IntPtr size, IntPtr data, int usage)
            {
                Delegates.glBufferDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)size, (IntPtr)data, (OpenTK.Graphics.OpenGL.BufferUsageARB)usage);
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBufferDataARB")]
            public static
            void BufferData<T2>(int target, IntPtr size, [InAttribute, OutAttribute] T2[] data, int usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.BufferUsageARB)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBufferDataARB")]
            public static
            void BufferData<T2>(int target, IntPtr size, [InAttribute, OutAttribute] T2[,] data, int usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.BufferUsageARB)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBufferDataARB")]
            public static
            void BufferData<T2>(int target, IntPtr size, [InAttribute, OutAttribute] T2[,,] data, int usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.BufferUsageARB)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBufferDataARB")]
            public static
            void BufferData<T2>(int target, IntPtr size, [InAttribute, OutAttribute] ref T2 data, int usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.BufferUsageARB)usage);
                    data = (T2)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBufferSubDataARB")]
            public static
            void BufferSubData(OpenTK.Graphics.OpenGL.BufferTargetARB target, IntPtr offset, IntPtr size, IntPtr data)
            {
                Delegates.glBufferSubDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBufferSubDataARB")]
            public static
            void BufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetARB target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferSubDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBufferSubDataARB")]
            public static
            void BufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetARB target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferSubDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBufferSubDataARB")]
            public static
            void BufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetARB target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferSubDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBufferSubDataARB")]
            public static
            void BufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetARB target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferSubDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T3)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBufferSubDataARB")]
            public static
            void BufferSubData(int target, IntPtr offset, IntPtr size, IntPtr data)
            {
                Delegates.glBufferSubDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBufferSubDataARB")]
            public static
            void BufferSubData<T3>(int target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferSubDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBufferSubDataARB")]
            public static
            void BufferSubData<T3>(int target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferSubDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBufferSubDataARB")]
            public static
            void BufferSubData<T3>(int target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferSubDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glBufferSubDataARB")]
            public static
            void BufferSubData<T3>(int target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferSubDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T3)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_color_buffer_float", Version = "1.5", EntryPoint = "glClampColorARB")]
            public static
            void ClampColor(OpenTK.Graphics.OpenGL.ARB_color_buffer_float target, OpenTK.Graphics.OpenGL.ARB_color_buffer_float clamp)
            {
                Delegates.glClampColorARB((OpenTK.Graphics.OpenGL.ARB_color_buffer_float)target, (OpenTK.Graphics.OpenGL.ARB_color_buffer_float)clamp);
            }

            [AutoGenerated(Category = "ARB_color_buffer_float", Version = "1.5", EntryPoint = "glClampColorARB")]
            public static
            void ClampColor(int target, int clamp)
            {
                Delegates.glClampColorARB((OpenTK.Graphics.OpenGL.ARB_color_buffer_float)target, (OpenTK.Graphics.OpenGL.ARB_color_buffer_float)clamp);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glClientActiveTextureARB")]
            public static
            void ClientActiveTexture(int texture)
            {
                Delegates.glClientActiveTextureARB((OpenTK.Graphics.OpenGL.TextureUnit)texture);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glClientActiveTextureARB")]
            public static
            void ClientActiveTexture(OpenTK.Graphics.OpenGL.TextureUnit texture)
            {
                Delegates.glClientActiveTextureARB((OpenTK.Graphics.OpenGL.TextureUnit)texture);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glCompileShaderARB")]
            public static
            void CompileShader(Int32 shaderObj)
            {
                Delegates.glCompileShaderARB((UInt32)shaderObj);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glCompileShaderARB")]
            public static
            void CompileShader(UInt32 shaderObj)
            {
                Delegates.glCompileShaderARB((UInt32)shaderObj);
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage1DARB")]
            public static
            void CompressedTexImage1D(int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr data)
            {
                Delegates.glCompressedTexImage1DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data);
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage1DARB")]
            public static
            void CompressedTexImage1D<T6>(int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T6[] data)
                where T6 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage1DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage1DARB")]
            public static
            void CompressedTexImage1D<T6>(int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T6[,] data)
                where T6 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage1DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage1DARB")]
            public static
            void CompressedTexImage1D<T6>(int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T6[,,] data)
                where T6 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage1DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage1DARB")]
            public static
            void CompressedTexImage1D<T6>(int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T6 data)
                where T6 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage1DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T6)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage1DARB")]
            public static
            void CompressedTexImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr data)
            {
                Delegates.glCompressedTexImage1DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data);
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage1DARB")]
            public static
            void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T6[] data)
                where T6 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage1DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage1DARB")]
            public static
            void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T6[,] data)
                where T6 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage1DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage1DARB")]
            public static
            void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T6[,,] data)
                where T6 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage1DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage1DARB")]
            public static
            void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T6 data)
                where T6 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage1DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T6)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage2DARB")]
            public static
            void CompressedTexImage2D(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data)
            {
                Delegates.glCompressedTexImage2DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data);
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage2DARB")]
            public static
            void CompressedTexImage2D<T7>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[] data)
                where T7 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage2DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage2DARB")]
            public static
            void CompressedTexImage2D<T7>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,] data)
                where T7 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage2DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage2DARB")]
            public static
            void CompressedTexImage2D<T7>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] data)
                where T7 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage2DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage2DARB")]
            public static
            void CompressedTexImage2D<T7>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T7 data)
                where T7 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage2DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T7)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage2DARB")]
            public static
            void CompressedTexImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data)
            {
                Delegates.glCompressedTexImage2DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data);
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage2DARB")]
            public static
            void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[] data)
                where T7 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage2DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage2DARB")]
            public static
            void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,] data)
                where T7 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage2DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage2DARB")]
            public static
            void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] data)
                where T7 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage2DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage2DARB")]
            public static
            void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T7 data)
                where T7 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage2DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T7)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage3DARB")]
            public static
            void CompressedTexImage3D(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data)
            {
                Delegates.glCompressedTexImage3DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data);
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage3DARB")]
            public static
            void CompressedTexImage3D<T8>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
                where T8 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage3DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage3DARB")]
            public static
            void CompressedTexImage3D<T8>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
                where T8 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage3DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage3DARB")]
            public static
            void CompressedTexImage3D<T8>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
                where T8 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage3DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage3DARB")]
            public static
            void CompressedTexImage3D<T8>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
                where T8 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage3DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T8)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage3DARB")]
            public static
            void CompressedTexImage3D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data)
            {
                Delegates.glCompressedTexImage3DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data);
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage3DARB")]
            public static
            void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
                where T8 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage3DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage3DARB")]
            public static
            void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
                where T8 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage3DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage3DARB")]
            public static
            void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
                where T8 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage3DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexImage3DARB")]
            public static
            void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
                where T8 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage3DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T8)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage1DARB")]
            public static
            void CompressedTexSubImage1D(int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, IntPtr data)
            {
                Delegates.glCompressedTexSubImage1DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage1DARB")]
            public static
            void CompressedTexSubImage1D<T6>(int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [InAttribute, OutAttribute] T6[] data)
                where T6 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage1DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage1DARB")]
            public static
            void CompressedTexSubImage1D<T6>(int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [InAttribute, OutAttribute] T6[,] data)
                where T6 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage1DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage1DARB")]
            public static
            void CompressedTexSubImage1D<T6>(int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [InAttribute, OutAttribute] T6[,,] data)
                where T6 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage1DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage1DARB")]
            public static
            void CompressedTexSubImage1D<T6>(int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [InAttribute, OutAttribute] ref T6 data)
                where T6 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage1DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T6)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage1DARB")]
            public static
            void CompressedTexSubImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, IntPtr data)
            {
                Delegates.glCompressedTexSubImage1DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage1DARB")]
            public static
            void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T6[] data)
                where T6 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage1DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage1DARB")]
            public static
            void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T6[,] data)
                where T6 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage1DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage1DARB")]
            public static
            void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T6[,,] data)
                where T6 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage1DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage1DARB")]
            public static
            void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T6 data)
                where T6 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage1DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T6)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage2DARB")]
            public static
            void CompressedTexSubImage2D(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, IntPtr data)
            {
                Delegates.glCompressedTexSubImage2DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage2DARB")]
            public static
            void CompressedTexSubImage2D<T8>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
                where T8 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage2DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage2DARB")]
            public static
            void CompressedTexSubImage2D<T8>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
                where T8 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage2DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage2DARB")]
            public static
            void CompressedTexSubImage2D<T8>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
                where T8 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage2DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage2DARB")]
            public static
            void CompressedTexSubImage2D<T8>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
                where T8 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage2DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T8)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage2DARB")]
            public static
            void CompressedTexSubImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, IntPtr data)
            {
                Delegates.glCompressedTexSubImage2DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage2DARB")]
            public static
            void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
                where T8 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage2DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage2DARB")]
            public static
            void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
                where T8 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage2DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage2DARB")]
            public static
            void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
                where T8 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage2DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage2DARB")]
            public static
            void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
                where T8 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage2DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T8)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage3DARB")]
            public static
            void CompressedTexSubImage3D(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, IntPtr data)
            {
                Delegates.glCompressedTexSubImage3DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage3DARB")]
            public static
            void CompressedTexSubImage3D<T10>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [InAttribute, OutAttribute] T10[] data)
                where T10 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage3DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage3DARB")]
            public static
            void CompressedTexSubImage3D<T10>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [InAttribute, OutAttribute] T10[,] data)
                where T10 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage3DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage3DARB")]
            public static
            void CompressedTexSubImage3D<T10>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [InAttribute, OutAttribute] T10[,,] data)
                where T10 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage3DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage3DARB")]
            public static
            void CompressedTexSubImage3D<T10>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [InAttribute, OutAttribute] ref T10 data)
                where T10 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage3DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T10)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage3DARB")]
            public static
            void CompressedTexSubImage3D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, IntPtr data)
            {
                Delegates.glCompressedTexSubImage3DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage3DARB")]
            public static
            void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[] data)
                where T10 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage3DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage3DARB")]
            public static
            void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[,] data)
                where T10 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage3DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage3DARB")]
            public static
            void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[,,] data)
                where T10 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage3DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glCompressedTexSubImage3DARB")]
            public static
            void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T10 data)
                where T10 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage3DARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T10)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glCreateProgramObjectARB")]
            public static
            Int32 CreateProgramObject()
            {
                return Delegates.glCreateProgramObjectARB();
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glCreateShaderObjectARB")]
            public static
            Int32 CreateShaderObject(OpenTK.Graphics.OpenGL.ARB_shader_objects shaderType)
            {
                return Delegates.glCreateShaderObjectARB((OpenTK.Graphics.OpenGL.ARB_shader_objects)shaderType);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glCreateShaderObjectARB")]
            public static
            Int32 CreateShaderObject(int shaderType)
            {
                return Delegates.glCreateShaderObjectARB((OpenTK.Graphics.OpenGL.ARB_shader_objects)shaderType);
            }

            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glCurrentPaletteMatrixARB")]
            public static
            void CurrentPaletteMatrix(Int32 index)
            {
                Delegates.glCurrentPaletteMatrixARB((Int32)index);
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glDeleteBuffersARB")]
            public static
            void DeleteBuffers(Int32 n, Int32[] buffers)
            {
                unsafe
                {
                    fixed (Int32* buffers_ptr = buffers)
                    {
                        Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glDeleteBuffersARB")]
            public static
            void DeleteBuffers(Int32 n, ref Int32 buffers)
            {
                unsafe
                {
                    fixed (Int32* buffers_ptr = &buffers)
                    {
                        Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glDeleteBuffersARB")]
            public static
            unsafe void DeleteBuffers(Int32 n, Int32* buffers)
            {
                Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glDeleteBuffersARB")]
            public static
            void DeleteBuffers(Int32 n, UInt32[] buffers)
            {
                unsafe
                {
                    fixed (UInt32* buffers_ptr = buffers)
                    {
                        Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glDeleteBuffersARB")]
            public static
            void DeleteBuffers(Int32 n, ref UInt32 buffers)
            {
                unsafe
                {
                    fixed (UInt32* buffers_ptr = &buffers)
                    {
                        Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glDeleteBuffersARB")]
            public static
            unsafe void DeleteBuffers(Int32 n, UInt32* buffers)
            {
                Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glDeleteObjectARB")]
            public static
            void DeleteObject(Int32 obj)
            {
                Delegates.glDeleteObjectARB((UInt32)obj);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glDeleteObjectARB")]
            public static
            void DeleteObject(UInt32 obj)
            {
                Delegates.glDeleteObjectARB((UInt32)obj);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glDeleteProgramsARB")]
            public static
            void DeleteProgram(Int32 n, Int32[] programs)
            {
                unsafe
                {
                    fixed (Int32* programs_ptr = programs)
                    {
                        Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glDeleteProgramsARB")]
            public static
            void DeleteProgram(Int32 n, ref Int32 programs)
            {
                unsafe
                {
                    fixed (Int32* programs_ptr = &programs)
                    {
                        Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glDeleteProgramsARB")]
            public static
            unsafe void DeleteProgram(Int32 n, Int32* programs)
            {
                Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glDeleteProgramsARB")]
            public static
            void DeleteProgram(Int32 n, UInt32[] programs)
            {
                unsafe
                {
                    fixed (UInt32* programs_ptr = programs)
                    {
                        Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glDeleteProgramsARB")]
            public static
            void DeleteProgram(Int32 n, ref UInt32 programs)
            {
                unsafe
                {
                    fixed (UInt32* programs_ptr = &programs)
                    {
                        Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glDeleteProgramsARB")]
            public static
            unsafe void DeleteProgram(Int32 n, UInt32* programs)
            {
                Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs);
            }

            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glDeleteQueriesARB")]
            public static
            void DeleteQueries(Int32 n, Int32[] ids)
            {
                unsafe
                {
                    fixed (Int32* ids_ptr = ids)
                    {
                        Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glDeleteQueriesARB")]
            public static
            void DeleteQueries(Int32 n, ref Int32 ids)
            {
                unsafe
                {
                    fixed (Int32* ids_ptr = &ids)
                    {
                        Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glDeleteQueriesARB")]
            public static
            unsafe void DeleteQueries(Int32 n, Int32* ids)
            {
                Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glDeleteQueriesARB")]
            public static
            void DeleteQueries(Int32 n, UInt32[] ids)
            {
                unsafe
                {
                    fixed (UInt32* ids_ptr = ids)
                    {
                        Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glDeleteQueriesARB")]
            public static
            void DeleteQueries(Int32 n, ref UInt32 ids)
            {
                unsafe
                {
                    fixed (UInt32* ids_ptr = &ids)
                    {
                        Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glDeleteQueriesARB")]
            public static
            unsafe void DeleteQueries(Int32 n, UInt32* ids)
            {
                Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glDetachObjectARB")]
            public static
            void DetachObject(Int32 containerObj, Int32 attachedObj)
            {
                Delegates.glDetachObjectARB((UInt32)containerObj, (UInt32)attachedObj);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glDetachObjectARB")]
            public static
            void DetachObject(UInt32 containerObj, UInt32 attachedObj)
            {
                Delegates.glDetachObjectARB((UInt32)containerObj, (UInt32)attachedObj);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glDisableVertexAttribArrayARB")]
            public static
            void DisableVertexAttribArray(Int32 index)
            {
                Delegates.glDisableVertexAttribArrayARB((UInt32)index);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glDisableVertexAttribArrayARB")]
            public static
            void DisableVertexAttribArray(UInt32 index)
            {
                Delegates.glDisableVertexAttribArrayARB((UInt32)index);
            }

            [AutoGenerated(Category = "ARB_draw_instanced", Version = "2.0", EntryPoint = "glDrawArraysInstancedARB")]
            public static
            void DrawArraysInstanced(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 first, Int32 count, Int32 primcount)
            {
                Delegates.glDrawArraysInstancedARB((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)first, (Int32)count, (Int32)primcount);
            }

            [AutoGenerated(Category = "ARB_draw_instanced", Version = "2.0", EntryPoint = "glDrawArraysInstancedARB")]
            public static
            void DrawArraysInstanced(int mode, Int32 first, Int32 count, Int32 primcount)
            {
                Delegates.glDrawArraysInstancedARB((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)first, (Int32)count, (Int32)primcount);
            }

            [AutoGenerated(Category = "ARB_draw_buffers", Version = "1.5", EntryPoint = "glDrawBuffersARB")]
            public static
            void DrawBuffers(Int32 n, OpenTK.Graphics.OpenGL.ARB_draw_buffers[] bufs)
            {
                unsafe
                {
                    fixed (OpenTK.Graphics.OpenGL.ARB_draw_buffers* bufs_ptr = bufs)
                    {
                        Delegates.glDrawBuffersARB((Int32)n, (OpenTK.Graphics.OpenGL.ARB_draw_buffers*)bufs_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_draw_buffers", Version = "1.5", EntryPoint = "glDrawBuffersARB")]
            public static
            void DrawBuffers(Int32 n, ref OpenTK.Graphics.OpenGL.ARB_draw_buffers bufs)
            {
                unsafe
                {
                    fixed (OpenTK.Graphics.OpenGL.ARB_draw_buffers* bufs_ptr = &bufs)
                    {
                        Delegates.glDrawBuffersARB((Int32)n, (OpenTK.Graphics.OpenGL.ARB_draw_buffers*)bufs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_draw_buffers", Version = "1.5", EntryPoint = "glDrawBuffersARB")]
            public static
            unsafe void DrawBuffers(Int32 n, OpenTK.Graphics.OpenGL.ARB_draw_buffers* bufs)
            {
                Delegates.glDrawBuffersARB((Int32)n, (OpenTK.Graphics.OpenGL.ARB_draw_buffers*)bufs);
            }

            [AutoGenerated(Category = "ARB_draw_buffers", Version = "1.5", EntryPoint = "glDrawBuffersARB")]
            public static
            void DrawBuffers(Int32 n, int[] bufs)
            {
                unsafe
                {
                    fixed (int* bufs_ptr = bufs)
                    {
                        Delegates.glDrawBuffersARB((Int32)n, (OpenTK.Graphics.OpenGL.ARB_draw_buffers*)bufs_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_draw_buffers", Version = "1.5", EntryPoint = "glDrawBuffersARB")]
            public static
            void DrawBuffers(Int32 n, ref int bufs)
            {
                unsafe
                {
                    fixed (int* bufs_ptr = &bufs)
                    {
                        Delegates.glDrawBuffersARB((Int32)n, (OpenTK.Graphics.OpenGL.ARB_draw_buffers*)bufs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_draw_buffers", Version = "1.5", EntryPoint = "glDrawBuffersARB")]
            public static
            unsafe void DrawBuffers(Int32 n, int* bufs)
            {
                Delegates.glDrawBuffersARB((Int32)n, (OpenTK.Graphics.OpenGL.ARB_draw_buffers*)bufs);
            }

            [AutoGenerated(Category = "ARB_draw_instanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedARB")]
            public static
            void DrawElementsInstanced(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices, Int32 primcount)
            {
                Delegates.glDrawElementsInstancedARB((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
            }

            [AutoGenerated(Category = "ARB_draw_instanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedARB")]
            public static
            void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstancedARB((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_draw_instanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedARB")]
            public static
            void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstancedARB((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_draw_instanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedARB")]
            public static
            void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstancedARB((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_draw_instanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedARB")]
            public static
            void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstancedARB((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    indices = (T3)indices_ptr.Target;
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_draw_instanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedARB")]
            public static
            void DrawElementsInstanced(int mode, Int32 count, int type, IntPtr indices, Int32 primcount)
            {
                Delegates.glDrawElementsInstancedARB((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
            }

            [AutoGenerated(Category = "ARB_draw_instanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedARB")]
            public static
            void DrawElementsInstanced<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstancedARB((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_draw_instanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedARB")]
            public static
            void DrawElementsInstanced<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstancedARB((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_draw_instanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedARB")]
            public static
            void DrawElementsInstanced<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstancedARB((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_draw_instanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedARB")]
            public static
            void DrawElementsInstanced<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstancedARB((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    indices = (T3)indices_ptr.Target;
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glEnableVertexAttribArrayARB")]
            public static
            void EnableVertexAttribArray(Int32 index)
            {
                Delegates.glEnableVertexAttribArrayARB((UInt32)index);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glEnableVertexAttribArrayARB")]
            public static
            void EnableVertexAttribArray(UInt32 index)
            {
                Delegates.glEnableVertexAttribArrayARB((UInt32)index);
            }

            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glEndQueryARB")]
            public static
            void EndQuery(OpenTK.Graphics.OpenGL.ARB_occlusion_query target)
            {
                Delegates.glEndQueryARB((OpenTK.Graphics.OpenGL.ARB_occlusion_query)target);
            }

            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glEndQueryARB")]
            public static
            void EndQuery(int target)
            {
                Delegates.glEndQueryARB((OpenTK.Graphics.OpenGL.ARB_occlusion_query)target);
            }

            [AutoGenerated(Category = "ARB_geometry_shader4", Version = "3.0", EntryPoint = "glFramebufferTextureARB")]
            public static
            void FramebufferTexture(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, Int32 texture, Int32 level)
            {
                Delegates.glFramebufferTextureARB((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_geometry_shader4", Version = "3.0", EntryPoint = "glFramebufferTextureARB")]
            public static
            void FramebufferTexture(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, UInt32 texture, Int32 level)
            {
                Delegates.glFramebufferTextureARB((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
            }

            [AutoGenerated(Category = "ARB_geometry_shader4", Version = "3.0", EntryPoint = "glFramebufferTextureARB")]
            public static
            void FramebufferTexture(int target, int attachment, Int32 texture, Int32 level)
            {
                Delegates.glFramebufferTextureARB((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_geometry_shader4", Version = "3.0", EntryPoint = "glFramebufferTextureARB")]
            public static
            void FramebufferTexture(int target, int attachment, UInt32 texture, Int32 level)
            {
                Delegates.glFramebufferTextureARB((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
            }

            [AutoGenerated(Category = "ARB_geometry_shader4", Version = "3.0", EntryPoint = "glFramebufferTextureFaceARB")]
            public static
            void FramebufferTextureFace(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, Int32 texture, Int32 level, OpenTK.Graphics.OpenGL.TextureTarget face)
            {
                Delegates.glFramebufferTextureFaceARB((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (OpenTK.Graphics.OpenGL.TextureTarget)face);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_geometry_shader4", Version = "3.0", EntryPoint = "glFramebufferTextureFaceARB")]
            public static
            void FramebufferTextureFace(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, UInt32 texture, Int32 level, OpenTK.Graphics.OpenGL.TextureTarget face)
            {
                Delegates.glFramebufferTextureFaceARB((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (OpenTK.Graphics.OpenGL.TextureTarget)face);
            }

            [AutoGenerated(Category = "ARB_geometry_shader4", Version = "3.0", EntryPoint = "glFramebufferTextureFaceARB")]
            public static
            void FramebufferTextureFace(int target, int attachment, Int32 texture, Int32 level, int face)
            {
                Delegates.glFramebufferTextureFaceARB((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (OpenTK.Graphics.OpenGL.TextureTarget)face);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_geometry_shader4", Version = "3.0", EntryPoint = "glFramebufferTextureFaceARB")]
            public static
            void FramebufferTextureFace(int target, int attachment, UInt32 texture, Int32 level, int face)
            {
                Delegates.glFramebufferTextureFaceARB((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (OpenTK.Graphics.OpenGL.TextureTarget)face);
            }

            [AutoGenerated(Category = "ARB_geometry_shader4", Version = "3.0", EntryPoint = "glFramebufferTextureLayerARB")]
            public static
            void FramebufferTextureLayer(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, Int32 texture, Int32 level, Int32 layer)
            {
                Delegates.glFramebufferTextureLayerARB((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_geometry_shader4", Version = "3.0", EntryPoint = "glFramebufferTextureLayerARB")]
            public static
            void FramebufferTextureLayer(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 layer)
            {
                Delegates.glFramebufferTextureLayerARB((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
            }

            [AutoGenerated(Category = "ARB_geometry_shader4", Version = "3.0", EntryPoint = "glFramebufferTextureLayerARB")]
            public static
            void FramebufferTextureLayer(int target, int attachment, Int32 texture, Int32 level, Int32 layer)
            {
                Delegates.glFramebufferTextureLayerARB((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_geometry_shader4", Version = "3.0", EntryPoint = "glFramebufferTextureLayerARB")]
            public static
            void FramebufferTextureLayer(int target, int attachment, UInt32 texture, Int32 level, Int32 layer)
            {
                Delegates.glFramebufferTextureLayerARB((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGenBuffersARB")]
            public static
            void GenBuffers(Int32 n, [OutAttribute] Int32[] buffers)
            {
                unsafe
                {
                    fixed (Int32* buffers_ptr = buffers)
                    {
                        Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGenBuffersARB")]
            public static
            void GenBuffers(Int32 n, [OutAttribute] out Int32 buffers)
            {
                unsafe
                {
                    fixed (Int32* buffers_ptr = &buffers)
                    {
                        Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                        buffers = *buffers_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGenBuffersARB")]
            public static
            unsafe void GenBuffers(Int32 n, [OutAttribute] Int32* buffers)
            {
                Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGenBuffersARB")]
            public static
            void GenBuffers(Int32 n, [OutAttribute] UInt32[] buffers)
            {
                unsafe
                {
                    fixed (UInt32* buffers_ptr = buffers)
                    {
                        Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGenBuffersARB")]
            public static
            void GenBuffers(Int32 n, [OutAttribute] out UInt32 buffers)
            {
                unsafe
                {
                    fixed (UInt32* buffers_ptr = &buffers)
                    {
                        Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                        buffers = *buffers_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGenBuffersARB")]
            public static
            unsafe void GenBuffers(Int32 n, [OutAttribute] UInt32* buffers)
            {
                Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGenProgramsARB")]
            public static
            void GenProgram(Int32 n, [OutAttribute] Int32[] programs)
            {
                unsafe
                {
                    fixed (Int32* programs_ptr = programs)
                    {
                        Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGenProgramsARB")]
            public static
            void GenProgram(Int32 n, [OutAttribute] out Int32 programs)
            {
                unsafe
                {
                    fixed (Int32* programs_ptr = &programs)
                    {
                        Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs_ptr);
                        programs = *programs_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGenProgramsARB")]
            public static
            unsafe void GenProgram(Int32 n, [OutAttribute] Int32* programs)
            {
                Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGenProgramsARB")]
            public static
            void GenProgram(Int32 n, [OutAttribute] UInt32[] programs)
            {
                unsafe
                {
                    fixed (UInt32* programs_ptr = programs)
                    {
                        Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGenProgramsARB")]
            public static
            void GenProgram(Int32 n, [OutAttribute] out UInt32 programs)
            {
                unsafe
                {
                    fixed (UInt32* programs_ptr = &programs)
                    {
                        Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs_ptr);
                        programs = *programs_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGenProgramsARB")]
            public static
            unsafe void GenProgram(Int32 n, [OutAttribute] UInt32* programs)
            {
                Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs);
            }

            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGenQueriesARB")]
            public static
            void GenQueries(Int32 n, [OutAttribute] Int32[] ids)
            {
                unsafe
                {
                    fixed (Int32* ids_ptr = ids)
                    {
                        Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGenQueriesARB")]
            public static
            void GenQueries(Int32 n, [OutAttribute] out Int32 ids)
            {
                unsafe
                {
                    fixed (Int32* ids_ptr = &ids)
                    {
                        Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids_ptr);
                        ids = *ids_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGenQueriesARB")]
            public static
            unsafe void GenQueries(Int32 n, [OutAttribute] Int32* ids)
            {
                Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGenQueriesARB")]
            public static
            void GenQueries(Int32 n, [OutAttribute] UInt32[] ids)
            {
                unsafe
                {
                    fixed (UInt32* ids_ptr = ids)
                    {
                        Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGenQueriesARB")]
            public static
            void GenQueries(Int32 n, [OutAttribute] out UInt32 ids)
            {
                unsafe
                {
                    fixed (UInt32* ids_ptr = &ids)
                    {
                        Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids_ptr);
                        ids = *ids_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGenQueriesARB")]
            public static
            unsafe void GenQueries(Int32 n, [OutAttribute] UInt32* ids)
            {
                Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids);
            }

            [AutoGenerated(Category = "ARB_vertex_shader", Version = "1.2", EntryPoint = "glGetActiveAttribARB")]
            public static
            void GetActiveAttrib(Int32 programObj, Int32 index, Int32 maxLength, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL.ARB_vertex_shader type, [OutAttribute] StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (OpenTK.Graphics.OpenGL.ARB_vertex_shader* type_ptr = &type)
                    {
                        Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ARB_vertex_shader*)type_ptr, (StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_shader", Version = "1.2", EntryPoint = "glGetActiveAttribARB")]
            public static
            void GetActiveAttrib(Int32 programObj, Int32 index, Int32 maxLength, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out int type, [OutAttribute] StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (int* type_ptr = &type)
                    {
                        Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ARB_vertex_shader*)type_ptr, (StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_shader", Version = "1.2", EntryPoint = "glGetActiveAttribARB")]
            public static
            unsafe void GetActiveAttrib(Int32 programObj, Int32 index, Int32 maxLength, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL.ARB_vertex_shader* type, [OutAttribute] StringBuilder name)
            {
                Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ARB_vertex_shader*)type, (StringBuilder)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_shader", Version = "1.2", EntryPoint = "glGetActiveAttribARB")]
            public static
            unsafe void GetActiveAttrib(Int32 programObj, Int32 index, Int32 maxLength, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] int* type, [OutAttribute] StringBuilder name)
            {
                Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ARB_vertex_shader*)type, (StringBuilder)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_shader", Version = "1.2", EntryPoint = "glGetActiveAttribARB")]
            public static
            void GetActiveAttrib(UInt32 programObj, UInt32 index, Int32 maxLength, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL.ARB_vertex_shader type, [OutAttribute] StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (OpenTK.Graphics.OpenGL.ARB_vertex_shader* type_ptr = &type)
                    {
                        Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ARB_vertex_shader*)type_ptr, (StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_shader", Version = "1.2", EntryPoint = "glGetActiveAttribARB")]
            public static
            void GetActiveAttrib(UInt32 programObj, UInt32 index, Int32 maxLength, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out int type, [OutAttribute] StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (int* type_ptr = &type)
                    {
                        Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ARB_vertex_shader*)type_ptr, (StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_shader", Version = "1.2", EntryPoint = "glGetActiveAttribARB")]
            public static
            unsafe void GetActiveAttrib(UInt32 programObj, UInt32 index, Int32 maxLength, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL.ARB_vertex_shader* type, [OutAttribute] StringBuilder name)
            {
                Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ARB_vertex_shader*)type, (StringBuilder)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_shader", Version = "1.2", EntryPoint = "glGetActiveAttribARB")]
            public static
            unsafe void GetActiveAttrib(UInt32 programObj, UInt32 index, Int32 maxLength, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] int* type, [OutAttribute] StringBuilder name)
            {
                Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ARB_vertex_shader*)type, (StringBuilder)name);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetActiveUniformARB")]
            public static
            void GetActiveUniform(Int32 programObj, Int32 index, Int32 maxLength, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL.ARB_shader_objects type, [OutAttribute] StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (OpenTK.Graphics.OpenGL.ARB_shader_objects* type_ptr = &type)
                    {
                        Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ARB_shader_objects*)type_ptr, (StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetActiveUniformARB")]
            public static
            void GetActiveUniform(Int32 programObj, Int32 index, Int32 maxLength, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out int type, [OutAttribute] StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (int* type_ptr = &type)
                    {
                        Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ARB_shader_objects*)type_ptr, (StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetActiveUniformARB")]
            public static
            unsafe void GetActiveUniform(Int32 programObj, Int32 index, Int32 maxLength, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL.ARB_shader_objects* type, [OutAttribute] StringBuilder name)
            {
                Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ARB_shader_objects*)type, (StringBuilder)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetActiveUniformARB")]
            public static
            unsafe void GetActiveUniform(Int32 programObj, Int32 index, Int32 maxLength, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] int* type, [OutAttribute] StringBuilder name)
            {
                Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ARB_shader_objects*)type, (StringBuilder)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetActiveUniformARB")]
            public static
            void GetActiveUniform(UInt32 programObj, UInt32 index, Int32 maxLength, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL.ARB_shader_objects type, [OutAttribute] StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (OpenTK.Graphics.OpenGL.ARB_shader_objects* type_ptr = &type)
                    {
                        Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ARB_shader_objects*)type_ptr, (StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetActiveUniformARB")]
            public static
            void GetActiveUniform(UInt32 programObj, UInt32 index, Int32 maxLength, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out int type, [OutAttribute] StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (int* type_ptr = &type)
                    {
                        Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ARB_shader_objects*)type_ptr, (StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetActiveUniformARB")]
            public static
            unsafe void GetActiveUniform(UInt32 programObj, UInt32 index, Int32 maxLength, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL.ARB_shader_objects* type, [OutAttribute] StringBuilder name)
            {
                Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ARB_shader_objects*)type, (StringBuilder)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetActiveUniformARB")]
            public static
            unsafe void GetActiveUniform(UInt32 programObj, UInt32 index, Int32 maxLength, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] int* type, [OutAttribute] StringBuilder name)
            {
                Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ARB_shader_objects*)type, (StringBuilder)name);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetAttachedObjectsARB")]
            public static
            void GetAttachedObjects(Int32 containerObj, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] out Int32 obj)
            {
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    fixed (Int32* obj_ptr = &obj)
                    {
                        Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                        count = *count_ptr;
                        obj = *obj_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetAttachedObjectsARB")]
            public static
            unsafe void GetAttachedObjects(Int32 containerObj, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] Int32[] obj)
            {
                fixed (Int32* obj_ptr = obj)
                {
                    Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count, (UInt32*)obj_ptr);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetAttachedObjectsARB")]
            public static
            unsafe void GetAttachedObjects(Int32 containerObj, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] Int32* obj)
            {
                Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetAttachedObjectsARB")]
            public static
            void GetAttachedObjects(UInt32 containerObj, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] out UInt32 obj)
            {
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    fixed (UInt32* obj_ptr = &obj)
                    {
                        Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                        count = *count_ptr;
                        obj = *obj_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetAttachedObjectsARB")]
            public static
            unsafe void GetAttachedObjects(UInt32 containerObj, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] UInt32[] obj)
            {
                fixed (UInt32* obj_ptr = obj)
                {
                    Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count, (UInt32*)obj_ptr);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetAttachedObjectsARB")]
            public static
            unsafe void GetAttachedObjects(UInt32 containerObj, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] UInt32* obj)
            {
                Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
            }

            [AutoGenerated(Category = "ARB_vertex_shader", Version = "1.2", EntryPoint = "glGetAttribLocationARB")]
            public static
            Int32 GetAttribLocation(Int32 programObj, String name)
            {
                return Delegates.glGetAttribLocationARB((UInt32)programObj, (String)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_shader", Version = "1.2", EntryPoint = "glGetAttribLocationARB")]
            public static
            Int32 GetAttribLocation(UInt32 programObj, String name)
            {
                return Delegates.glGetAttribLocationARB((UInt32)programObj, (String)name);
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferParameterivARB")]
            public static
            void GetBufferParameter(OpenTK.Graphics.OpenGL.BufferTargetARB target, OpenTK.Graphics.OpenGL.BufferParameterNameARB pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetBufferParameterivARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.BufferParameterNameARB)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferParameterivARB")]
            public static
            void GetBufferParameter(OpenTK.Graphics.OpenGL.BufferTargetARB target, OpenTK.Graphics.OpenGL.BufferParameterNameARB pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetBufferParameterivARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.BufferParameterNameARB)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferParameterivARB")]
            public static
            unsafe void GetBufferParameter(OpenTK.Graphics.OpenGL.BufferTargetARB target, OpenTK.Graphics.OpenGL.BufferParameterNameARB pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetBufferParameterivARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.BufferParameterNameARB)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferParameterivARB")]
            public static
            void GetBufferParameter(int target, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetBufferParameterivARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.BufferParameterNameARB)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferParameterivARB")]
            public static
            void GetBufferParameter(int target, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetBufferParameterivARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.BufferParameterNameARB)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferParameterivARB")]
            public static
            unsafe void GetBufferParameter(int target, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetBufferParameterivARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.BufferParameterNameARB)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferPointervARB")]
            public static
            void GetBufferPointer(OpenTK.Graphics.OpenGL.BufferTargetARB target, OpenTK.Graphics.OpenGL.BufferPointerNameARB pname, [OutAttribute] IntPtr @params)
            {
                Delegates.glGetBufferPointervARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.BufferPointerNameARB)pname, (IntPtr)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferPointervARB")]
            public static
            void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL.BufferTargetARB target, OpenTK.Graphics.OpenGL.BufferPointerNameARB pname, [InAttribute, OutAttribute] T2[] @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferPointervARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.BufferPointerNameARB)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferPointervARB")]
            public static
            void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL.BufferTargetARB target, OpenTK.Graphics.OpenGL.BufferPointerNameARB pname, [InAttribute, OutAttribute] T2[,] @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferPointervARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.BufferPointerNameARB)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferPointervARB")]
            public static
            void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL.BufferTargetARB target, OpenTK.Graphics.OpenGL.BufferPointerNameARB pname, [InAttribute, OutAttribute] T2[,,] @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferPointervARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.BufferPointerNameARB)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferPointervARB")]
            public static
            void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL.BufferTargetARB target, OpenTK.Graphics.OpenGL.BufferPointerNameARB pname, [InAttribute, OutAttribute] ref T2 @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferPointervARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.BufferPointerNameARB)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    @params = (T2)@params_ptr.Target;
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferPointervARB")]
            public static
            void GetBufferPointer(int target, int pname, [OutAttribute] IntPtr @params)
            {
                Delegates.glGetBufferPointervARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.BufferPointerNameARB)pname, (IntPtr)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferPointervARB")]
            public static
            void GetBufferPointer<T2>(int target, int pname, [InAttribute, OutAttribute] T2[] @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferPointervARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.BufferPointerNameARB)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferPointervARB")]
            public static
            void GetBufferPointer<T2>(int target, int pname, [InAttribute, OutAttribute] T2[,] @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferPointervARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.BufferPointerNameARB)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferPointervARB")]
            public static
            void GetBufferPointer<T2>(int target, int pname, [InAttribute, OutAttribute] T2[,,] @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferPointervARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.BufferPointerNameARB)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferPointervARB")]
            public static
            void GetBufferPointer<T2>(int target, int pname, [InAttribute, OutAttribute] ref T2 @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferPointervARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.BufferPointerNameARB)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    @params = (T2)@params_ptr.Target;
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferSubDataARB")]
            public static
            void GetBufferSubData(OpenTK.Graphics.OpenGL.BufferTargetARB target, IntPtr offset, IntPtr size, [OutAttribute] IntPtr data)
            {
                Delegates.glGetBufferSubDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferSubDataARB")]
            public static
            void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetARB target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferSubDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferSubDataARB")]
            public static
            void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetARB target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferSubDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferSubDataARB")]
            public static
            void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetARB target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferSubDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferSubDataARB")]
            public static
            void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetARB target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferSubDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T3)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferSubDataARB")]
            public static
            void GetBufferSubData(int target, IntPtr offset, IntPtr size, [OutAttribute] IntPtr data)
            {
                Delegates.glGetBufferSubDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferSubDataARB")]
            public static
            void GetBufferSubData<T3>(int target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferSubDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferSubDataARB")]
            public static
            void GetBufferSubData<T3>(int target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferSubDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferSubDataARB")]
            public static
            void GetBufferSubData<T3>(int target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferSubDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glGetBufferSubDataARB")]
            public static
            void GetBufferSubData<T3>(int target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferSubDataARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T3)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glGetCompressedTexImageARB")]
            public static
            void GetCompressedTexImage(int target, Int32 level, [OutAttribute] IntPtr img)
            {
                Delegates.glGetCompressedTexImageARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img);
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glGetCompressedTexImageARB")]
            public static
            void GetCompressedTexImage<T2>(int target, Int32 level, [InAttribute, OutAttribute] T2[] img)
                where T2 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTexImageARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glGetCompressedTexImageARB")]
            public static
            void GetCompressedTexImage<T2>(int target, Int32 level, [InAttribute, OutAttribute] T2[,] img)
                where T2 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTexImageARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glGetCompressedTexImageARB")]
            public static
            void GetCompressedTexImage<T2>(int target, Int32 level, [InAttribute, OutAttribute] T2[,,] img)
                where T2 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTexImageARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glGetCompressedTexImageARB")]
            public static
            void GetCompressedTexImage<T2>(int target, Int32 level, [InAttribute, OutAttribute] ref T2 img)
                where T2 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTexImageARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                    img = (T2)img_ptr.Target;
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glGetCompressedTexImageARB")]
            public static
            void GetCompressedTexImage(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, [OutAttribute] IntPtr img)
            {
                Delegates.glGetCompressedTexImageARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img);
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glGetCompressedTexImageARB")]
            public static
            void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, [InAttribute, OutAttribute] T2[] img)
                where T2 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTexImageARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glGetCompressedTexImageARB")]
            public static
            void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, [InAttribute, OutAttribute] T2[,] img)
                where T2 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTexImageARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glGetCompressedTexImageARB")]
            public static
            void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, [InAttribute, OutAttribute] T2[,,] img)
                where T2 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTexImageARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_texture_compression", Version = "1.2", EntryPoint = "glGetCompressedTexImageARB")]
            public static
            void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, [InAttribute, OutAttribute] ref T2 img)
                where T2 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTexImageARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                    img = (T2)img_ptr.Target;
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetHandleARB")]
            public static
            Int32 GetHandle(OpenTK.Graphics.OpenGL.ARB_shader_objects pname)
            {
                return Delegates.glGetHandleARB((OpenTK.Graphics.OpenGL.ARB_shader_objects)pname);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetHandleARB")]
            public static
            Int32 GetHandle(int pname)
            {
                return Delegates.glGetHandleARB((OpenTK.Graphics.OpenGL.ARB_shader_objects)pname);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetInfoLogARB")]
            public static
            void GetInfoLog(Int32 obj, Int32 maxLength, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (StringBuilder)infoLog);
                        length = *length_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetInfoLogARB")]
            public static
            unsafe void GetInfoLog(Int32 obj, Int32 maxLength, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog)
            {
                Delegates.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length, (StringBuilder)infoLog);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetInfoLogARB")]
            public static
            void GetInfoLog(UInt32 obj, Int32 maxLength, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (StringBuilder)infoLog);
                        length = *length_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetInfoLogARB")]
            public static
            unsafe void GetInfoLog(UInt32 obj, Int32 maxLength, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog)
            {
                Delegates.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length, (StringBuilder)infoLog);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterfvARB")]
            public static
            void GetObjectParameter(Int32 obj, OpenTK.Graphics.OpenGL.ARB_shader_objects pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetObjectParameterfvARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterfvARB")]
            public static
            void GetObjectParameter(Int32 obj, OpenTK.Graphics.OpenGL.ARB_shader_objects pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectParameterfvARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterfvARB")]
            public static
            unsafe void GetObjectParameter(Int32 obj, OpenTK.Graphics.OpenGL.ARB_shader_objects pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetObjectParameterfvARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterfvARB")]
            public static
            void GetObjectParameter(Int32 obj, int pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetObjectParameterfvARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterfvARB")]
            public static
            void GetObjectParameter(Int32 obj, int pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectParameterfvARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterfvARB")]
            public static
            unsafe void GetObjectParameter(Int32 obj, int pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetObjectParameterfvARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterfvARB")]
            public static
            void GetObjectParameter(UInt32 obj, OpenTK.Graphics.OpenGL.ARB_shader_objects pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetObjectParameterfvARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterfvARB")]
            public static
            void GetObjectParameter(UInt32 obj, OpenTK.Graphics.OpenGL.ARB_shader_objects pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectParameterfvARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterfvARB")]
            public static
            unsafe void GetObjectParameter(UInt32 obj, OpenTK.Graphics.OpenGL.ARB_shader_objects pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetObjectParameterfvARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterfvARB")]
            public static
            void GetObjectParameter(UInt32 obj, int pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetObjectParameterfvARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterfvARB")]
            public static
            void GetObjectParameter(UInt32 obj, int pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectParameterfvARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterfvARB")]
            public static
            unsafe void GetObjectParameter(UInt32 obj, int pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetObjectParameterfvARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterivARB")]
            public static
            void GetObjectParameter(Int32 obj, OpenTK.Graphics.OpenGL.ARB_shader_objects pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetObjectParameterivARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterivARB")]
            public static
            void GetObjectParameter(Int32 obj, OpenTK.Graphics.OpenGL.ARB_shader_objects pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectParameterivARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterivARB")]
            public static
            unsafe void GetObjectParameter(Int32 obj, OpenTK.Graphics.OpenGL.ARB_shader_objects pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetObjectParameterivARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterivARB")]
            public static
            void GetObjectParameter(Int32 obj, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetObjectParameterivARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterivARB")]
            public static
            void GetObjectParameter(Int32 obj, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectParameterivARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterivARB")]
            public static
            unsafe void GetObjectParameter(Int32 obj, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetObjectParameterivARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterivARB")]
            public static
            void GetObjectParameter(UInt32 obj, OpenTK.Graphics.OpenGL.ARB_shader_objects pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetObjectParameterivARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterivARB")]
            public static
            void GetObjectParameter(UInt32 obj, OpenTK.Graphics.OpenGL.ARB_shader_objects pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectParameterivARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterivARB")]
            public static
            unsafe void GetObjectParameter(UInt32 obj, OpenTK.Graphics.OpenGL.ARB_shader_objects pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetObjectParameterivARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterivARB")]
            public static
            void GetObjectParameter(UInt32 obj, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetObjectParameterivARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterivARB")]
            public static
            void GetObjectParameter(UInt32 obj, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectParameterivARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetObjectParameterivARB")]
            public static
            unsafe void GetObjectParameter(UInt32 obj, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetObjectParameterivARB((UInt32)obj, (OpenTK.Graphics.OpenGL.ARB_shader_objects)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterdvARB")]
            public static
            void GetProgramEnvParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, Int32 index, [OutAttribute] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterdvARB")]
            public static
            void GetProgramEnvParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, Int32 index, [OutAttribute] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterdvARB")]
            public static
            unsafe void GetProgramEnvParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, Int32 index, [OutAttribute] Double* @params)
            {
                Delegates.glGetProgramEnvParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterdvARB")]
            public static
            void GetProgramEnvParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, UInt32 index, [OutAttribute] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterdvARB")]
            public static
            void GetProgramEnvParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, UInt32 index, [OutAttribute] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterdvARB")]
            public static
            unsafe void GetProgramEnvParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, UInt32 index, [OutAttribute] Double* @params)
            {
                Delegates.glGetProgramEnvParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterdvARB")]
            public static
            void GetProgramEnvParameter(int target, Int32 index, [OutAttribute] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterdvARB")]
            public static
            void GetProgramEnvParameter(int target, Int32 index, [OutAttribute] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterdvARB")]
            public static
            unsafe void GetProgramEnvParameter(int target, Int32 index, [OutAttribute] Double* @params)
            {
                Delegates.glGetProgramEnvParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterdvARB")]
            public static
            void GetProgramEnvParameter(int target, UInt32 index, [OutAttribute] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterdvARB")]
            public static
            void GetProgramEnvParameter(int target, UInt32 index, [OutAttribute] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterdvARB")]
            public static
            unsafe void GetProgramEnvParameter(int target, UInt32 index, [OutAttribute] Double* @params)
            {
                Delegates.glGetProgramEnvParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterfvARB")]
            public static
            void GetProgramEnvParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, Int32 index, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterfvARB")]
            public static
            void GetProgramEnvParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, Int32 index, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterfvARB")]
            public static
            unsafe void GetProgramEnvParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, Int32 index, [OutAttribute] Single* @params)
            {
                Delegates.glGetProgramEnvParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterfvARB")]
            public static
            void GetProgramEnvParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, UInt32 index, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterfvARB")]
            public static
            void GetProgramEnvParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, UInt32 index, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterfvARB")]
            public static
            unsafe void GetProgramEnvParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, UInt32 index, [OutAttribute] Single* @params)
            {
                Delegates.glGetProgramEnvParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterfvARB")]
            public static
            void GetProgramEnvParameter(int target, Int32 index, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterfvARB")]
            public static
            void GetProgramEnvParameter(int target, Int32 index, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterfvARB")]
            public static
            unsafe void GetProgramEnvParameter(int target, Int32 index, [OutAttribute] Single* @params)
            {
                Delegates.glGetProgramEnvParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterfvARB")]
            public static
            void GetProgramEnvParameter(int target, UInt32 index, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterfvARB")]
            public static
            void GetProgramEnvParameter(int target, UInt32 index, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramEnvParameterfvARB")]
            public static
            unsafe void GetProgramEnvParameter(int target, UInt32 index, [OutAttribute] Single* @params)
            {
                Delegates.glGetProgramEnvParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramivARB")]
            public static
            void GetProgram(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, OpenTK.Graphics.OpenGL.AssemblyProgramParameterARB pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramivARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.AssemblyProgramParameterARB)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramivARB")]
            public static
            unsafe void GetProgram(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, OpenTK.Graphics.OpenGL.AssemblyProgramParameterARB pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetProgramivARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.AssemblyProgramParameterARB)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramivARB")]
            public static
            void GetProgram(int target, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramivARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.AssemblyProgramParameterARB)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramivARB")]
            public static
            unsafe void GetProgram(int target, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetProgramivARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.AssemblyProgramParameterARB)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterdvARB")]
            public static
            void GetProgramLocalParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, Int32 index, [OutAttribute] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterdvARB")]
            public static
            void GetProgramLocalParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, Int32 index, [OutAttribute] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterdvARB")]
            public static
            unsafe void GetProgramLocalParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, Int32 index, [OutAttribute] Double* @params)
            {
                Delegates.glGetProgramLocalParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterdvARB")]
            public static
            void GetProgramLocalParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, UInt32 index, [OutAttribute] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterdvARB")]
            public static
            void GetProgramLocalParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, UInt32 index, [OutAttribute] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterdvARB")]
            public static
            unsafe void GetProgramLocalParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, UInt32 index, [OutAttribute] Double* @params)
            {
                Delegates.glGetProgramLocalParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterdvARB")]
            public static
            void GetProgramLocalParameter(int target, Int32 index, [OutAttribute] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterdvARB")]
            public static
            void GetProgramLocalParameter(int target, Int32 index, [OutAttribute] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterdvARB")]
            public static
            unsafe void GetProgramLocalParameter(int target, Int32 index, [OutAttribute] Double* @params)
            {
                Delegates.glGetProgramLocalParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterdvARB")]
            public static
            void GetProgramLocalParameter(int target, UInt32 index, [OutAttribute] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterdvARB")]
            public static
            void GetProgramLocalParameter(int target, UInt32 index, [OutAttribute] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterdvARB")]
            public static
            unsafe void GetProgramLocalParameter(int target, UInt32 index, [OutAttribute] Double* @params)
            {
                Delegates.glGetProgramLocalParameterdvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Double*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterfvARB")]
            public static
            void GetProgramLocalParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, Int32 index, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterfvARB")]
            public static
            void GetProgramLocalParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, Int32 index, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterfvARB")]
            public static
            unsafe void GetProgramLocalParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, Int32 index, [OutAttribute] Single* @params)
            {
                Delegates.glGetProgramLocalParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterfvARB")]
            public static
            void GetProgramLocalParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, UInt32 index, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterfvARB")]
            public static
            void GetProgramLocalParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, UInt32 index, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterfvARB")]
            public static
            unsafe void GetProgramLocalParameter(OpenTK.Graphics.OpenGL.ARB_vertex_program target, UInt32 index, [OutAttribute] Single* @params)
            {
                Delegates.glGetProgramLocalParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterfvARB")]
            public static
            void GetProgramLocalParameter(int target, Int32 index, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterfvARB")]
            public static
            void GetProgramLocalParameter(int target, Int32 index, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterfvARB")]
            public static
            unsafe void GetProgramLocalParameter(int target, Int32 index, [OutAttribute] Single* @params)
            {
                Delegates.glGetProgramLocalParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterfvARB")]
            public static
            void GetProgramLocalParameter(int target, UInt32 index, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterfvARB")]
            public static
            void GetProgramLocalParameter(int target, UInt32 index, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramLocalParameterfvARB")]
            public static
            unsafe void GetProgramLocalParameter(int target, UInt32 index, [OutAttribute] Single* @params)
            {
                Delegates.glGetProgramLocalParameterfvARB((OpenTK.Graphics.OpenGL.ARB_vertex_program)target, (UInt32)index, (Single*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramStringARB")]
            public static
            void GetProgramString(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, OpenTK.Graphics.OpenGL.AssemblyProgramParameterARB pname, [OutAttribute] IntPtr @string)
            {
                Delegates.glGetProgramStringARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.AssemblyProgramParameterARB)pname, (IntPtr)@string);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramStringARB")]
            public static
            void GetProgramString<T2>(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, OpenTK.Graphics.OpenGL.AssemblyProgramParameterARB pname, [InAttribute, OutAttribute] T2[] @string)
                where T2 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetProgramStringARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.AssemblyProgramParameterARB)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramStringARB")]
            public static
            void GetProgramString<T2>(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, OpenTK.Graphics.OpenGL.AssemblyProgramParameterARB pname, [InAttribute, OutAttribute] T2[,] @string)
                where T2 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetProgramStringARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.AssemblyProgramParameterARB)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramStringARB")]
            public static
            void GetProgramString<T2>(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, OpenTK.Graphics.OpenGL.AssemblyProgramParameterARB pname, [InAttribute, OutAttribute] T2[,,] @string)
                where T2 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetProgramStringARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.AssemblyProgramParameterARB)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramStringARB")]
            public static
            void GetProgramString<T2>(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, OpenTK.Graphics.OpenGL.AssemblyProgramParameterARB pname, [InAttribute, OutAttribute] ref T2 @string)
                where T2 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetProgramStringARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.AssemblyProgramParameterARB)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    @string = (T2)@string_ptr.Target;
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramStringARB")]
            public static
            void GetProgramString(int target, int pname, [OutAttribute] IntPtr @string)
            {
                Delegates.glGetProgramStringARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.AssemblyProgramParameterARB)pname, (IntPtr)@string);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramStringARB")]
            public static
            void GetProgramString<T2>(int target, int pname, [InAttribute, OutAttribute] T2[] @string)
                where T2 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetProgramStringARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.AssemblyProgramParameterARB)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramStringARB")]
            public static
            void GetProgramString<T2>(int target, int pname, [InAttribute, OutAttribute] T2[,] @string)
                where T2 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetProgramStringARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.AssemblyProgramParameterARB)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramStringARB")]
            public static
            void GetProgramString<T2>(int target, int pname, [InAttribute, OutAttribute] T2[,,] @string)
                where T2 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetProgramStringARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.AssemblyProgramParameterARB)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetProgramStringARB")]
            public static
            void GetProgramString<T2>(int target, int pname, [InAttribute, OutAttribute] ref T2 @string)
                where T2 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetProgramStringARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.AssemblyProgramParameterARB)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    @string = (T2)@string_ptr.Target;
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryivARB")]
            public static
            void GetQuery(OpenTK.Graphics.OpenGL.ARB_occlusion_query target, OpenTK.Graphics.OpenGL.ARB_occlusion_query pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetQueryivARB((OpenTK.Graphics.OpenGL.ARB_occlusion_query)target, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryivARB")]
            public static
            void GetQuery(OpenTK.Graphics.OpenGL.ARB_occlusion_query target, OpenTK.Graphics.OpenGL.ARB_occlusion_query pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryivARB((OpenTK.Graphics.OpenGL.ARB_occlusion_query)target, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryivARB")]
            public static
            unsafe void GetQuery(OpenTK.Graphics.OpenGL.ARB_occlusion_query target, OpenTK.Graphics.OpenGL.ARB_occlusion_query pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetQueryivARB((OpenTK.Graphics.OpenGL.ARB_occlusion_query)target, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryivARB")]
            public static
            void GetQuery(int target, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetQueryivARB((OpenTK.Graphics.OpenGL.ARB_occlusion_query)target, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryivARB")]
            public static
            void GetQuery(int target, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryivARB((OpenTK.Graphics.OpenGL.ARB_occlusion_query)target, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryivARB")]
            public static
            unsafe void GetQuery(int target, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetQueryivARB((OpenTK.Graphics.OpenGL.ARB_occlusion_query)target, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryObjectivARB")]
            public static
            void GetQueryObject(Int32 id, OpenTK.Graphics.OpenGL.ARB_occlusion_query pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectivARB((UInt32)id, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryObjectivARB")]
            public static
            void GetQueryObject(Int32 id, OpenTK.Graphics.OpenGL.ARB_occlusion_query pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectivARB((UInt32)id, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryObjectivARB")]
            public static
            unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.OpenGL.ARB_occlusion_query pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetQueryObjectivARB((UInt32)id, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryObjectivARB")]
            public static
            void GetQueryObject(Int32 id, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectivARB((UInt32)id, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryObjectivARB")]
            public static
            void GetQueryObject(Int32 id, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectivARB((UInt32)id, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryObjectivARB")]
            public static
            unsafe void GetQueryObject(Int32 id, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetQueryObjectivARB((UInt32)id, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryObjectivARB")]
            public static
            void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL.ARB_occlusion_query pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectivARB((UInt32)id, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryObjectivARB")]
            public static
            void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL.ARB_occlusion_query pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectivARB((UInt32)id, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryObjectivARB")]
            public static
            unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL.ARB_occlusion_query pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetQueryObjectivARB((UInt32)id, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryObjectivARB")]
            public static
            void GetQueryObject(UInt32 id, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectivARB((UInt32)id, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryObjectivARB")]
            public static
            void GetQueryObject(UInt32 id, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectivARB((UInt32)id, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryObjectivARB")]
            public static
            unsafe void GetQueryObject(UInt32 id, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetQueryObjectivARB((UInt32)id, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryObjectuivARB")]
            public static
            void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL.ARB_occlusion_query pname, [OutAttribute] UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectuivARB((UInt32)id, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryObjectuivARB")]
            public static
            void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL.ARB_occlusion_query pname, [OutAttribute] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectuivARB((UInt32)id, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryObjectuivARB")]
            public static
            unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL.ARB_occlusion_query pname, [OutAttribute] UInt32* @params)
            {
                Delegates.glGetQueryObjectuivARB((UInt32)id, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryObjectuivARB")]
            public static
            void GetQueryObject(UInt32 id, int pname, [OutAttribute] UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectuivARB((UInt32)id, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryObjectuivARB")]
            public static
            void GetQueryObject(UInt32 id, int pname, [OutAttribute] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectuivARB((UInt32)id, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glGetQueryObjectuivARB")]
            public static
            unsafe void GetQueryObject(UInt32 id, int pname, [OutAttribute] UInt32* @params)
            {
                Delegates.glGetQueryObjectuivARB((UInt32)id, (OpenTK.Graphics.OpenGL.ARB_occlusion_query)pname, (UInt32*)@params);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetShaderSourceARB")]
            public static
            void GetShaderSource(Int32 obj, Int32 maxLength, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder source)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (StringBuilder)source);
                        length = *length_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetShaderSourceARB")]
            public static
            unsafe void GetShaderSource(Int32 obj, Int32 maxLength, [OutAttribute] Int32* length, [OutAttribute] StringBuilder source)
            {
                Delegates.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length, (StringBuilder)source);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetShaderSourceARB")]
            public static
            void GetShaderSource(UInt32 obj, Int32 maxLength, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder source)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (StringBuilder)source);
                        length = *length_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetShaderSourceARB")]
            public static
            unsafe void GetShaderSource(UInt32 obj, Int32 maxLength, [OutAttribute] Int32* length, [OutAttribute] StringBuilder source)
            {
                Delegates.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length, (StringBuilder)source);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetUniformfvARB")]
            public static
            void GetUniform(Int32 programObj, Int32 location, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetUniformfvARB")]
            public static
            void GetUniform(Int32 programObj, Int32 location, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetUniformfvARB")]
            public static
            unsafe void GetUniform(Int32 programObj, Int32 location, [OutAttribute] Single* @params)
            {
                Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetUniformfvARB")]
            public static
            void GetUniform(UInt32 programObj, Int32 location, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetUniformfvARB")]
            public static
            void GetUniform(UInt32 programObj, Int32 location, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetUniformfvARB")]
            public static
            unsafe void GetUniform(UInt32 programObj, Int32 location, [OutAttribute] Single* @params)
            {
                Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetUniformivARB")]
            public static
            void GetUniform(Int32 programObj, Int32 location, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetUniformivARB")]
            public static
            void GetUniform(Int32 programObj, Int32 location, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetUniformivARB")]
            public static
            unsafe void GetUniform(Int32 programObj, Int32 location, [OutAttribute] Int32* @params)
            {
                Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetUniformivARB")]
            public static
            void GetUniform(UInt32 programObj, Int32 location, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetUniformivARB")]
            public static
            void GetUniform(UInt32 programObj, Int32 location, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetUniformivARB")]
            public static
            unsafe void GetUniform(UInt32 programObj, Int32 location, [OutAttribute] Int32* @params)
            {
                Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetUniformLocationARB")]
            public static
            Int32 GetUniformLocation(Int32 programObj, String name)
            {
                return Delegates.glGetUniformLocationARB((UInt32)programObj, (String)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glGetUniformLocationARB")]
            public static
            Int32 GetUniformLocation(UInt32 programObj, String name)
            {
                return Delegates.glGetUniformLocationARB((UInt32)programObj, (String)name);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribdvARB")]
            public static
            void GetVertexAttrib(Int32 index, int pname, [OutAttribute] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribdvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribdvARB")]
            public static
            void GetVertexAttrib(Int32 index, int pname, [OutAttribute] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribdvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribdvARB")]
            public static
            unsafe void GetVertexAttrib(Int32 index, int pname, [OutAttribute] Double* @params)
            {
                Delegates.glGetVertexAttribdvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Double*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribdvARB")]
            public static
            void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameterARB pname, [OutAttribute] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribdvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribdvARB")]
            public static
            void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameterARB pname, [OutAttribute] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribdvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribdvARB")]
            public static
            unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameterARB pname, [OutAttribute] Double* @params)
            {
                Delegates.glGetVertexAttribdvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribdvARB")]
            public static
            void GetVertexAttrib(UInt32 index, int pname, [OutAttribute] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribdvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribdvARB")]
            public static
            void GetVertexAttrib(UInt32 index, int pname, [OutAttribute] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribdvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribdvARB")]
            public static
            unsafe void GetVertexAttrib(UInt32 index, int pname, [OutAttribute] Double* @params)
            {
                Delegates.glGetVertexAttribdvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribdvARB")]
            public static
            void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameterARB pname, [OutAttribute] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribdvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribdvARB")]
            public static
            void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameterARB pname, [OutAttribute] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribdvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribdvARB")]
            public static
            unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameterARB pname, [OutAttribute] Double* @params)
            {
                Delegates.glGetVertexAttribdvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Double*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribfvARB")]
            public static
            void GetVertexAttrib(Int32 index, int pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribfvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribfvARB")]
            public static
            void GetVertexAttrib(Int32 index, int pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribfvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribfvARB")]
            public static
            unsafe void GetVertexAttrib(Int32 index, int pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetVertexAttribfvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribfvARB")]
            public static
            void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameterARB pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribfvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribfvARB")]
            public static
            void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameterARB pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribfvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribfvARB")]
            public static
            unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameterARB pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetVertexAttribfvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribfvARB")]
            public static
            void GetVertexAttrib(UInt32 index, int pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribfvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribfvARB")]
            public static
            void GetVertexAttrib(UInt32 index, int pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribfvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribfvARB")]
            public static
            unsafe void GetVertexAttrib(UInt32 index, int pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetVertexAttribfvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribfvARB")]
            public static
            void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameterARB pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribfvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribfvARB")]
            public static
            void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameterARB pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribfvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribfvARB")]
            public static
            unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameterARB pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetVertexAttribfvARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribivARB")]
            public static
            void GetVertexAttrib(Int32 index, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribivARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribivARB")]
            public static
            void GetVertexAttrib(Int32 index, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribivARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribivARB")]
            public static
            unsafe void GetVertexAttrib(Int32 index, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetVertexAttribivARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribivARB")]
            public static
            void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameterARB pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribivARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribivARB")]
            public static
            void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameterARB pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribivARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribivARB")]
            public static
            unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameterARB pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetVertexAttribivARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribivARB")]
            public static
            void GetVertexAttrib(UInt32 index, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribivARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribivARB")]
            public static
            void GetVertexAttrib(UInt32 index, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribivARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribivARB")]
            public static
            unsafe void GetVertexAttrib(UInt32 index, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetVertexAttribivARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribivARB")]
            public static
            void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameterARB pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribivARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribivARB")]
            public static
            void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameterARB pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribivARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribivARB")]
            public static
            unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameterARB pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetVertexAttribivARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameterARB)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static
            void GetVertexAttribPointer(Int32 index, int pname, [OutAttribute] IntPtr pointer)
            {
                Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB)pname, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static
            void GetVertexAttribPointer<T2>(Int32 index, int pname, [InAttribute, OutAttribute] T2[] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static
            void GetVertexAttribPointer<T2>(Int32 index, int pname, [InAttribute, OutAttribute] T2[,] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static
            void GetVertexAttribPointer<T2>(Int32 index, int pname, [InAttribute, OutAttribute] T2[,,] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static
            void GetVertexAttribPointer<T2>(Int32 index, int pname, [InAttribute, OutAttribute] ref T2 pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T2)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static
            void GetVertexAttribPointer(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB pname, [OutAttribute] IntPtr pointer)
            {
                Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB)pname, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static
            void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB pname, [InAttribute, OutAttribute] T2[] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static
            void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB pname, [InAttribute, OutAttribute] T2[,] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static
            void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB pname, [InAttribute, OutAttribute] T2[,,] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static
            void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB pname, [InAttribute, OutAttribute] ref T2 pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T2)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static
            void GetVertexAttribPointer(UInt32 index, int pname, [OutAttribute] IntPtr pointer)
            {
                Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB)pname, (IntPtr)pointer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static
            void GetVertexAttribPointer<T2>(UInt32 index, int pname, [InAttribute, OutAttribute] T2[] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static
            void GetVertexAttribPointer<T2>(UInt32 index, int pname, [InAttribute, OutAttribute] T2[,] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static
            void GetVertexAttribPointer<T2>(UInt32 index, int pname, [InAttribute, OutAttribute] T2[,,] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static
            void GetVertexAttribPointer<T2>(UInt32 index, int pname, [InAttribute, OutAttribute] ref T2 pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T2)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static
            void GetVertexAttribPointer(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB pname, [OutAttribute] IntPtr pointer)
            {
                Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB)pname, (IntPtr)pointer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static
            void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB pname, [InAttribute, OutAttribute] T2[] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static
            void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB pname, [InAttribute, OutAttribute] T2[,] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static
            void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB pname, [InAttribute, OutAttribute] T2[,,] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static
            void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB pname, [InAttribute, OutAttribute] ref T2 pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameterARB)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T2)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glIsBufferARB")]
            public static
            bool IsBuffer(Int32 buffer)
            {
                return Delegates.glIsBufferARB((UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glIsBufferARB")]
            public static
            bool IsBuffer(UInt32 buffer)
            {
                return Delegates.glIsBufferARB((UInt32)buffer);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glIsProgramARB")]
            public static
            bool IsProgram(Int32 program)
            {
                return Delegates.glIsProgramARB((UInt32)program);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glIsProgramARB")]
            public static
            bool IsProgram(UInt32 program)
            {
                return Delegates.glIsProgramARB((UInt32)program);
            }

            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glIsQueryARB")]
            public static
            bool IsQuery(Int32 id)
            {
                return Delegates.glIsQueryARB((UInt32)id);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_occlusion_query", Version = "1.5", EntryPoint = "glIsQueryARB")]
            public static
            bool IsQuery(UInt32 id)
            {
                return Delegates.glIsQueryARB((UInt32)id);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glLinkProgramARB")]
            public static
            void LinkProgram(Int32 programObj)
            {
                Delegates.glLinkProgramARB((UInt32)programObj);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glLinkProgramARB")]
            public static
            void LinkProgram(UInt32 programObj)
            {
                Delegates.glLinkProgramARB((UInt32)programObj);
            }

            [AutoGenerated(Category = "ARB_transpose_matrix", Version = "1.2", EntryPoint = "glLoadTransposeMatrixdARB")]
            public static
            void LoadTransposeMatrix(Double[] m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glLoadTransposeMatrixdARB((Double*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_transpose_matrix", Version = "1.2", EntryPoint = "glLoadTransposeMatrixdARB")]
            public static
            void LoadTransposeMatrix(ref Double m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glLoadTransposeMatrixdARB((Double*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_transpose_matrix", Version = "1.2", EntryPoint = "glLoadTransposeMatrixdARB")]
            public static
            unsafe void LoadTransposeMatrix(Double* m)
            {
                Delegates.glLoadTransposeMatrixdARB((Double*)m);
            }

            [AutoGenerated(Category = "ARB_transpose_matrix", Version = "1.2", EntryPoint = "glLoadTransposeMatrixfARB")]
            public static
            void LoadTransposeMatrix(Single[] m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glLoadTransposeMatrixfARB((Single*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_transpose_matrix", Version = "1.2", EntryPoint = "glLoadTransposeMatrixfARB")]
            public static
            void LoadTransposeMatrix(ref Single m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glLoadTransposeMatrixfARB((Single*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_transpose_matrix", Version = "1.2", EntryPoint = "glLoadTransposeMatrixfARB")]
            public static
            unsafe void LoadTransposeMatrix(Single* m)
            {
                Delegates.glLoadTransposeMatrixfARB((Single*)m);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glMapBufferARB")]
            public static
            unsafe System.IntPtr MapBuffer(OpenTK.Graphics.OpenGL.BufferTargetARB target, OpenTK.Graphics.OpenGL.BufferAccessARB access)
            {
                return Delegates.glMapBufferARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.BufferAccessARB)access);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glMapBufferARB")]
            public static
            unsafe System.IntPtr MapBuffer(int target, int access)
            {
                return Delegates.glMapBufferARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.BufferAccessARB)access);
            }

            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexPointerARB")]
            public static
            void MatrixIndexPointer(Int32 size, OpenTK.Graphics.OpenGL.ARB_matrix_palette type, Int32 stride, IntPtr pointer)
            {
                Delegates.glMatrixIndexPointerARB((Int32)size, (OpenTK.Graphics.OpenGL.ARB_matrix_palette)type, (Int32)stride, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexPointerARB")]
            public static
            void MatrixIndexPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ARB_matrix_palette type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glMatrixIndexPointerARB((Int32)size, (OpenTK.Graphics.OpenGL.ARB_matrix_palette)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexPointerARB")]
            public static
            void MatrixIndexPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ARB_matrix_palette type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glMatrixIndexPointerARB((Int32)size, (OpenTK.Graphics.OpenGL.ARB_matrix_palette)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexPointerARB")]
            public static
            void MatrixIndexPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ARB_matrix_palette type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glMatrixIndexPointerARB((Int32)size, (OpenTK.Graphics.OpenGL.ARB_matrix_palette)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexPointerARB")]
            public static
            void MatrixIndexPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ARB_matrix_palette type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glMatrixIndexPointerARB((Int32)size, (OpenTK.Graphics.OpenGL.ARB_matrix_palette)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T3)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexPointerARB")]
            public static
            void MatrixIndexPointer(Int32 size, int type, Int32 stride, IntPtr pointer)
            {
                Delegates.glMatrixIndexPointerARB((Int32)size, (OpenTK.Graphics.OpenGL.ARB_matrix_palette)type, (Int32)stride, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexPointerARB")]
            public static
            void MatrixIndexPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glMatrixIndexPointerARB((Int32)size, (OpenTK.Graphics.OpenGL.ARB_matrix_palette)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexPointerARB")]
            public static
            void MatrixIndexPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glMatrixIndexPointerARB((Int32)size, (OpenTK.Graphics.OpenGL.ARB_matrix_palette)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexPointerARB")]
            public static
            void MatrixIndexPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glMatrixIndexPointerARB((Int32)size, (OpenTK.Graphics.OpenGL.ARB_matrix_palette)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexPointerARB")]
            public static
            void MatrixIndexPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glMatrixIndexPointerARB((Int32)size, (OpenTK.Graphics.OpenGL.ARB_matrix_palette)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T3)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexubvARB")]
            public static
            void MatrixIndex(Int32 size, Byte[] indices)
            {
                unsafe
                {
                    fixed (Byte* indices_ptr = indices)
                    {
                        Delegates.glMatrixIndexubvARB((Int32)size, (Byte*)indices_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexubvARB")]
            public static
            void MatrixIndex(Int32 size, ref Byte indices)
            {
                unsafe
                {
                    fixed (Byte* indices_ptr = &indices)
                    {
                        Delegates.glMatrixIndexubvARB((Int32)size, (Byte*)indices_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexubvARB")]
            public static
            unsafe void MatrixIndex(Int32 size, Byte* indices)
            {
                Delegates.glMatrixIndexubvARB((Int32)size, (Byte*)indices);
            }

            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexuivARB")]
            public static
            void MatrixIndex(Int32 size, Int32[] indices)
            {
                unsafe
                {
                    fixed (Int32* indices_ptr = indices)
                    {
                        Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexuivARB")]
            public static
            void MatrixIndex(Int32 size, ref Int32 indices)
            {
                unsafe
                {
                    fixed (Int32* indices_ptr = &indices)
                    {
                        Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexuivARB")]
            public static
            unsafe void MatrixIndex(Int32 size, Int32* indices)
            {
                Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexuivARB")]
            public static
            void MatrixIndex(Int32 size, UInt32[] indices)
            {
                unsafe
                {
                    fixed (UInt32* indices_ptr = indices)
                    {
                        Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexuivARB")]
            public static
            void MatrixIndex(Int32 size, ref UInt32 indices)
            {
                unsafe
                {
                    fixed (UInt32* indices_ptr = &indices)
                    {
                        Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexuivARB")]
            public static
            unsafe void MatrixIndex(Int32 size, UInt32* indices)
            {
                Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices);
            }

            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexusvARB")]
            public static
            void MatrixIndex(Int32 size, Int16[] indices)
            {
                unsafe
                {
                    fixed (Int16* indices_ptr = indices)
                    {
                        Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexusvARB")]
            public static
            void MatrixIndex(Int32 size, ref Int16 indices)
            {
                unsafe
                {
                    fixed (Int16* indices_ptr = &indices)
                    {
                        Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexusvARB")]
            public static
            unsafe void MatrixIndex(Int32 size, Int16* indices)
            {
                Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexusvARB")]
            public static
            void MatrixIndex(Int32 size, UInt16[] indices)
            {
                unsafe
                {
                    fixed (UInt16* indices_ptr = indices)
                    {
                        Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexusvARB")]
            public static
            void MatrixIndex(Int32 size, ref UInt16 indices)
            {
                unsafe
                {
                    fixed (UInt16* indices_ptr = &indices)
                    {
                        Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "1.1", EntryPoint = "glMatrixIndexusvARB")]
            public static
            unsafe void MatrixIndex(Int32 size, UInt16* indices)
            {
                Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1dARB")]
            public static
            void MultiTexCoord1(int target, Double s)
            {
                Delegates.glMultiTexCoord1dARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double)s);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1dARB")]
            public static
            void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Double s)
            {
                Delegates.glMultiTexCoord1dARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double)s);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1dvARB")]
            public static
            unsafe void MultiTexCoord1(int target, Double* v)
            {
                Delegates.glMultiTexCoord1dvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1dvARB")]
            public static
            unsafe void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Double* v)
            {
                Delegates.glMultiTexCoord1dvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1fARB")]
            public static
            void MultiTexCoord1(int target, Single s)
            {
                Delegates.glMultiTexCoord1fARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single)s);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1fARB")]
            public static
            void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Single s)
            {
                Delegates.glMultiTexCoord1fARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single)s);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1fvARB")]
            public static
            unsafe void MultiTexCoord1(int target, Single* v)
            {
                Delegates.glMultiTexCoord1fvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1fvARB")]
            public static
            unsafe void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Single* v)
            {
                Delegates.glMultiTexCoord1fvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1iARB")]
            public static
            void MultiTexCoord1(int target, Int32 s)
            {
                Delegates.glMultiTexCoord1iARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32)s);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1iARB")]
            public static
            void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Int32 s)
            {
                Delegates.glMultiTexCoord1iARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32)s);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1ivARB")]
            public static
            unsafe void MultiTexCoord1(int target, Int32* v)
            {
                Delegates.glMultiTexCoord1ivARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1ivARB")]
            public static
            unsafe void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Int32* v)
            {
                Delegates.glMultiTexCoord1ivARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1sARB")]
            public static
            void MultiTexCoord1(int target, Int16 s)
            {
                Delegates.glMultiTexCoord1sARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16)s);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1sARB")]
            public static
            void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Int16 s)
            {
                Delegates.glMultiTexCoord1sARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16)s);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1svARB")]
            public static
            unsafe void MultiTexCoord1(int target, Int16* v)
            {
                Delegates.glMultiTexCoord1svARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1svARB")]
            public static
            unsafe void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Int16* v)
            {
                Delegates.glMultiTexCoord1svARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2dARB")]
            public static
            void MultiTexCoord2(int target, Double s, Double t)
            {
                Delegates.glMultiTexCoord2dARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double)s, (Double)t);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2dARB")]
            public static
            void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Double s, Double t)
            {
                Delegates.glMultiTexCoord2dARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double)s, (Double)t);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2dvARB")]
            public static
            void MultiTexCoord2(int target, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2dvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2dvARB")]
            public static
            void MultiTexCoord2(int target, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2dvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2dvARB")]
            public static
            unsafe void MultiTexCoord2(int target, Double* v)
            {
                Delegates.glMultiTexCoord2dvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2dvARB")]
            public static
            void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2dvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2dvARB")]
            public static
            void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2dvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2dvARB")]
            public static
            unsafe void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Double* v)
            {
                Delegates.glMultiTexCoord2dvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2fARB")]
            public static
            void MultiTexCoord2(int target, Single s, Single t)
            {
                Delegates.glMultiTexCoord2fARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single)s, (Single)t);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2fARB")]
            public static
            void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Single s, Single t)
            {
                Delegates.glMultiTexCoord2fARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single)s, (Single)t);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2fvARB")]
            public static
            void MultiTexCoord2(int target, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2fvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2fvARB")]
            public static
            void MultiTexCoord2(int target, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2fvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2fvARB")]
            public static
            unsafe void MultiTexCoord2(int target, Single* v)
            {
                Delegates.glMultiTexCoord2fvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2fvARB")]
            public static
            void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2fvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2fvARB")]
            public static
            void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2fvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2fvARB")]
            public static
            unsafe void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Single* v)
            {
                Delegates.glMultiTexCoord2fvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2iARB")]
            public static
            void MultiTexCoord2(int target, Int32 s, Int32 t)
            {
                Delegates.glMultiTexCoord2iARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32)s, (Int32)t);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2iARB")]
            public static
            void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Int32 s, Int32 t)
            {
                Delegates.glMultiTexCoord2iARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32)s, (Int32)t);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2ivARB")]
            public static
            void MultiTexCoord2(int target, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2ivARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2ivARB")]
            public static
            void MultiTexCoord2(int target, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2ivARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2ivARB")]
            public static
            unsafe void MultiTexCoord2(int target, Int32* v)
            {
                Delegates.glMultiTexCoord2ivARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2ivARB")]
            public static
            void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2ivARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2ivARB")]
            public static
            void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2ivARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2ivARB")]
            public static
            unsafe void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Int32* v)
            {
                Delegates.glMultiTexCoord2ivARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2sARB")]
            public static
            void MultiTexCoord2(int target, Int16 s, Int16 t)
            {
                Delegates.glMultiTexCoord2sARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16)s, (Int16)t);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2sARB")]
            public static
            void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Int16 s, Int16 t)
            {
                Delegates.glMultiTexCoord2sARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16)s, (Int16)t);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2svARB")]
            public static
            void MultiTexCoord2(int target, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2svARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2svARB")]
            public static
            void MultiTexCoord2(int target, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2svARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2svARB")]
            public static
            unsafe void MultiTexCoord2(int target, Int16* v)
            {
                Delegates.glMultiTexCoord2svARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2svARB")]
            public static
            void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2svARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2svARB")]
            public static
            void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2svARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2svARB")]
            public static
            unsafe void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Int16* v)
            {
                Delegates.glMultiTexCoord2svARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3dARB")]
            public static
            void MultiTexCoord3(int target, Double s, Double t, Double r)
            {
                Delegates.glMultiTexCoord3dARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double)s, (Double)t, (Double)r);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3dARB")]
            public static
            void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Double s, Double t, Double r)
            {
                Delegates.glMultiTexCoord3dARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double)s, (Double)t, (Double)r);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3dvARB")]
            public static
            void MultiTexCoord3(int target, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3dvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3dvARB")]
            public static
            void MultiTexCoord3(int target, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3dvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3dvARB")]
            public static
            unsafe void MultiTexCoord3(int target, Double* v)
            {
                Delegates.glMultiTexCoord3dvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3dvARB")]
            public static
            void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3dvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3dvARB")]
            public static
            void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3dvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3dvARB")]
            public static
            unsafe void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Double* v)
            {
                Delegates.glMultiTexCoord3dvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3fARB")]
            public static
            void MultiTexCoord3(int target, Single s, Single t, Single r)
            {
                Delegates.glMultiTexCoord3fARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single)s, (Single)t, (Single)r);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3fARB")]
            public static
            void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Single s, Single t, Single r)
            {
                Delegates.glMultiTexCoord3fARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single)s, (Single)t, (Single)r);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3fvARB")]
            public static
            void MultiTexCoord3(int target, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3fvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3fvARB")]
            public static
            void MultiTexCoord3(int target, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3fvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3fvARB")]
            public static
            unsafe void MultiTexCoord3(int target, Single* v)
            {
                Delegates.glMultiTexCoord3fvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3fvARB")]
            public static
            void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3fvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3fvARB")]
            public static
            void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3fvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3fvARB")]
            public static
            unsafe void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Single* v)
            {
                Delegates.glMultiTexCoord3fvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3iARB")]
            public static
            void MultiTexCoord3(int target, Int32 s, Int32 t, Int32 r)
            {
                Delegates.glMultiTexCoord3iARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32)s, (Int32)t, (Int32)r);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3iARB")]
            public static
            void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Int32 s, Int32 t, Int32 r)
            {
                Delegates.glMultiTexCoord3iARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32)s, (Int32)t, (Int32)r);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3ivARB")]
            public static
            void MultiTexCoord3(int target, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3ivARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3ivARB")]
            public static
            void MultiTexCoord3(int target, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3ivARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3ivARB")]
            public static
            unsafe void MultiTexCoord3(int target, Int32* v)
            {
                Delegates.glMultiTexCoord3ivARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3ivARB")]
            public static
            void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3ivARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3ivARB")]
            public static
            void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3ivARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3ivARB")]
            public static
            unsafe void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Int32* v)
            {
                Delegates.glMultiTexCoord3ivARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3sARB")]
            public static
            void MultiTexCoord3(int target, Int16 s, Int16 t, Int16 r)
            {
                Delegates.glMultiTexCoord3sARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16)s, (Int16)t, (Int16)r);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3sARB")]
            public static
            void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Int16 s, Int16 t, Int16 r)
            {
                Delegates.glMultiTexCoord3sARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16)s, (Int16)t, (Int16)r);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3svARB")]
            public static
            void MultiTexCoord3(int target, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3svARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3svARB")]
            public static
            void MultiTexCoord3(int target, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3svARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3svARB")]
            public static
            unsafe void MultiTexCoord3(int target, Int16* v)
            {
                Delegates.glMultiTexCoord3svARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3svARB")]
            public static
            void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3svARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3svARB")]
            public static
            void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3svARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3svARB")]
            public static
            unsafe void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Int16* v)
            {
                Delegates.glMultiTexCoord3svARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4dARB")]
            public static
            void MultiTexCoord4(int target, Double s, Double t, Double r, Double q)
            {
                Delegates.glMultiTexCoord4dARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double)s, (Double)t, (Double)r, (Double)q);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4dARB")]
            public static
            void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Double s, Double t, Double r, Double q)
            {
                Delegates.glMultiTexCoord4dARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double)s, (Double)t, (Double)r, (Double)q);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4dvARB")]
            public static
            void MultiTexCoord4(int target, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4dvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4dvARB")]
            public static
            void MultiTexCoord4(int target, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4dvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4dvARB")]
            public static
            unsafe void MultiTexCoord4(int target, Double* v)
            {
                Delegates.glMultiTexCoord4dvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4dvARB")]
            public static
            void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4dvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4dvARB")]
            public static
            void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4dvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4dvARB")]
            public static
            unsafe void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Double* v)
            {
                Delegates.glMultiTexCoord4dvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4fARB")]
            public static
            void MultiTexCoord4(int target, Single s, Single t, Single r, Single q)
            {
                Delegates.glMultiTexCoord4fARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single)s, (Single)t, (Single)r, (Single)q);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4fARB")]
            public static
            void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Single s, Single t, Single r, Single q)
            {
                Delegates.glMultiTexCoord4fARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single)s, (Single)t, (Single)r, (Single)q);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4fvARB")]
            public static
            void MultiTexCoord4(int target, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4fvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4fvARB")]
            public static
            void MultiTexCoord4(int target, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4fvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4fvARB")]
            public static
            unsafe void MultiTexCoord4(int target, Single* v)
            {
                Delegates.glMultiTexCoord4fvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4fvARB")]
            public static
            void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4fvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4fvARB")]
            public static
            void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4fvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4fvARB")]
            public static
            unsafe void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Single* v)
            {
                Delegates.glMultiTexCoord4fvARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4iARB")]
            public static
            void MultiTexCoord4(int target, Int32 s, Int32 t, Int32 r, Int32 q)
            {
                Delegates.glMultiTexCoord4iARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32)s, (Int32)t, (Int32)r, (Int32)q);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4iARB")]
            public static
            void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Int32 s, Int32 t, Int32 r, Int32 q)
            {
                Delegates.glMultiTexCoord4iARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32)s, (Int32)t, (Int32)r, (Int32)q);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4ivARB")]
            public static
            void MultiTexCoord4(int target, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4ivARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4ivARB")]
            public static
            void MultiTexCoord4(int target, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4ivARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4ivARB")]
            public static
            unsafe void MultiTexCoord4(int target, Int32* v)
            {
                Delegates.glMultiTexCoord4ivARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4ivARB")]
            public static
            void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4ivARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4ivARB")]
            public static
            void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4ivARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4ivARB")]
            public static
            unsafe void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Int32* v)
            {
                Delegates.glMultiTexCoord4ivARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4sARB")]
            public static
            void MultiTexCoord4(int target, Int16 s, Int16 t, Int16 r, Int16 q)
            {
                Delegates.glMultiTexCoord4sARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16)s, (Int16)t, (Int16)r, (Int16)q);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4sARB")]
            public static
            void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Int16 s, Int16 t, Int16 r, Int16 q)
            {
                Delegates.glMultiTexCoord4sARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16)s, (Int16)t, (Int16)r, (Int16)q);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4svARB")]
            public static
            void MultiTexCoord4(int target, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4svARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4svARB")]
            public static
            void MultiTexCoord4(int target, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4svARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4svARB")]
            public static
            unsafe void MultiTexCoord4(int target, Int16* v)
            {
                Delegates.glMultiTexCoord4svARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v);
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4svARB")]
            public static
            void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4svARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4svARB")]
            public static
            void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4svARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_multitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4svARB")]
            public static
            unsafe void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Int16* v)
            {
                Delegates.glMultiTexCoord4svARB((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v);
            }

            [AutoGenerated(Category = "ARB_transpose_matrix", Version = "1.2", EntryPoint = "glMultTransposeMatrixdARB")]
            public static
            void MultTransposeMatrix(Double[] m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glMultTransposeMatrixdARB((Double*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_transpose_matrix", Version = "1.2", EntryPoint = "glMultTransposeMatrixdARB")]
            public static
            void MultTransposeMatrix(ref Double m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glMultTransposeMatrixdARB((Double*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_transpose_matrix", Version = "1.2", EntryPoint = "glMultTransposeMatrixdARB")]
            public static
            unsafe void MultTransposeMatrix(Double* m)
            {
                Delegates.glMultTransposeMatrixdARB((Double*)m);
            }

            [AutoGenerated(Category = "ARB_transpose_matrix", Version = "1.2", EntryPoint = "glMultTransposeMatrixfARB")]
            public static
            void MultTransposeMatrix(Single[] m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glMultTransposeMatrixfARB((Single*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_transpose_matrix", Version = "1.2", EntryPoint = "glMultTransposeMatrixfARB")]
            public static
            void MultTransposeMatrix(ref Single m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glMultTransposeMatrixfARB((Single*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_transpose_matrix", Version = "1.2", EntryPoint = "glMultTransposeMatrixfARB")]
            public static
            unsafe void MultTransposeMatrix(Single* m)
            {
                Delegates.glMultTransposeMatrixfARB((Single*)m);
            }

            [AutoGenerated(Category = "ARB_point_parameters", Version = "1.0", EntryPoint = "glPointParameterfARB")]
            public static
            void PointParameter(OpenTK.Graphics.OpenGL.ARB_point_parameters pname, Single param)
            {
                Delegates.glPointParameterfARB((OpenTK.Graphics.OpenGL.ARB_point_parameters)pname, (Single)param);
            }

            [AutoGenerated(Category = "ARB_point_parameters", Version = "1.0", EntryPoint = "glPointParameterfARB")]
            public static
            void PointParameter(int pname, Single param)
            {
                Delegates.glPointParameterfARB((OpenTK.Graphics.OpenGL.ARB_point_parameters)pname, (Single)param);
            }

            [AutoGenerated(Category = "ARB_point_parameters", Version = "1.0", EntryPoint = "glPointParameterfvARB")]
            public static
            void PointParameter(OpenTK.Graphics.OpenGL.ARB_point_parameters pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glPointParameterfvARB((OpenTK.Graphics.OpenGL.ARB_point_parameters)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_point_parameters", Version = "1.0", EntryPoint = "glPointParameterfvARB")]
            public static
            unsafe void PointParameter(OpenTK.Graphics.OpenGL.ARB_point_parameters pname, Single* @params)
            {
                Delegates.glPointParameterfvARB((OpenTK.Graphics.OpenGL.ARB_point_parameters)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "ARB_point_parameters", Version = "1.0", EntryPoint = "glPointParameterfvARB")]
            public static
            void PointParameter(int pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glPointParameterfvARB((OpenTK.Graphics.OpenGL.ARB_point_parameters)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_point_parameters", Version = "1.0", EntryPoint = "glPointParameterfvARB")]
            public static
            unsafe void PointParameter(int pname, Single* @params)
            {
                Delegates.glPointParameterfvARB((OpenTK.Graphics.OpenGL.ARB_point_parameters)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4dARB")]
            public static
            void ProgramEnvParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, Int32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glProgramEnvParameter4dARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4dARB")]
            public static
            void ProgramEnvParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, UInt32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glProgramEnvParameter4dARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4dARB")]
            public static
            void ProgramEnvParameter4(int target, Int32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glProgramEnvParameter4dARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4dARB")]
            public static
            void ProgramEnvParameter4(int target, UInt32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glProgramEnvParameter4dARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4dvARB")]
            public static
            void ProgramEnvParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, Int32 index, Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4dvARB")]
            public static
            void ProgramEnvParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, Int32 index, ref Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4dvARB")]
            public static
            unsafe void ProgramEnvParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, Int32 index, Double* @params)
            {
                Delegates.glProgramEnvParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4dvARB")]
            public static
            void ProgramEnvParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, UInt32 index, Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4dvARB")]
            public static
            void ProgramEnvParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, UInt32 index, ref Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4dvARB")]
            public static
            unsafe void ProgramEnvParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, UInt32 index, Double* @params)
            {
                Delegates.glProgramEnvParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4dvARB")]
            public static
            void ProgramEnvParameter4(int target, Int32 index, Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4dvARB")]
            public static
            void ProgramEnvParameter4(int target, Int32 index, ref Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4dvARB")]
            public static
            unsafe void ProgramEnvParameter4(int target, Int32 index, Double* @params)
            {
                Delegates.glProgramEnvParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4dvARB")]
            public static
            void ProgramEnvParameter4(int target, UInt32 index, Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4dvARB")]
            public static
            void ProgramEnvParameter4(int target, UInt32 index, ref Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4dvARB")]
            public static
            unsafe void ProgramEnvParameter4(int target, UInt32 index, Double* @params)
            {
                Delegates.glProgramEnvParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4fARB")]
            public static
            void ProgramEnvParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, Int32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glProgramEnvParameter4fARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4fARB")]
            public static
            void ProgramEnvParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, UInt32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glProgramEnvParameter4fARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4fARB")]
            public static
            void ProgramEnvParameter4(int target, Int32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glProgramEnvParameter4fARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4fARB")]
            public static
            void ProgramEnvParameter4(int target, UInt32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glProgramEnvParameter4fARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4fvARB")]
            public static
            void ProgramEnvParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, Int32 index, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4fvARB")]
            public static
            void ProgramEnvParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, Int32 index, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4fvARB")]
            public static
            unsafe void ProgramEnvParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, Int32 index, Single* @params)
            {
                Delegates.glProgramEnvParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4fvARB")]
            public static
            void ProgramEnvParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, UInt32 index, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4fvARB")]
            public static
            void ProgramEnvParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, UInt32 index, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4fvARB")]
            public static
            unsafe void ProgramEnvParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, UInt32 index, Single* @params)
            {
                Delegates.glProgramEnvParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4fvARB")]
            public static
            void ProgramEnvParameter4(int target, Int32 index, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4fvARB")]
            public static
            void ProgramEnvParameter4(int target, Int32 index, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4fvARB")]
            public static
            unsafe void ProgramEnvParameter4(int target, Int32 index, Single* @params)
            {
                Delegates.glProgramEnvParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4fvARB")]
            public static
            void ProgramEnvParameter4(int target, UInt32 index, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4fvARB")]
            public static
            void ProgramEnvParameter4(int target, UInt32 index, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramEnvParameter4fvARB")]
            public static
            unsafe void ProgramEnvParameter4(int target, UInt32 index, Single* @params)
            {
                Delegates.glProgramEnvParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4dARB")]
            public static
            void ProgramLocalParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, Int32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glProgramLocalParameter4dARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4dARB")]
            public static
            void ProgramLocalParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, UInt32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glProgramLocalParameter4dARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4dARB")]
            public static
            void ProgramLocalParameter4(int target, Int32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glProgramLocalParameter4dARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4dARB")]
            public static
            void ProgramLocalParameter4(int target, UInt32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glProgramLocalParameter4dARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4dvARB")]
            public static
            void ProgramLocalParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, Int32 index, Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4dvARB")]
            public static
            void ProgramLocalParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, Int32 index, ref Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4dvARB")]
            public static
            unsafe void ProgramLocalParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, Int32 index, Double* @params)
            {
                Delegates.glProgramLocalParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4dvARB")]
            public static
            void ProgramLocalParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, UInt32 index, Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4dvARB")]
            public static
            void ProgramLocalParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, UInt32 index, ref Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4dvARB")]
            public static
            unsafe void ProgramLocalParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, UInt32 index, Double* @params)
            {
                Delegates.glProgramLocalParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4dvARB")]
            public static
            void ProgramLocalParameter4(int target, Int32 index, Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4dvARB")]
            public static
            void ProgramLocalParameter4(int target, Int32 index, ref Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4dvARB")]
            public static
            unsafe void ProgramLocalParameter4(int target, Int32 index, Double* @params)
            {
                Delegates.glProgramLocalParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4dvARB")]
            public static
            void ProgramLocalParameter4(int target, UInt32 index, Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4dvARB")]
            public static
            void ProgramLocalParameter4(int target, UInt32 index, ref Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4dvARB")]
            public static
            unsafe void ProgramLocalParameter4(int target, UInt32 index, Double* @params)
            {
                Delegates.glProgramLocalParameter4dvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Double*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4fARB")]
            public static
            void ProgramLocalParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, Int32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glProgramLocalParameter4fARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4fARB")]
            public static
            void ProgramLocalParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, UInt32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glProgramLocalParameter4fARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4fARB")]
            public static
            void ProgramLocalParameter4(int target, Int32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glProgramLocalParameter4fARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4fARB")]
            public static
            void ProgramLocalParameter4(int target, UInt32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glProgramLocalParameter4fARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4fvARB")]
            public static
            void ProgramLocalParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, Int32 index, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4fvARB")]
            public static
            void ProgramLocalParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, Int32 index, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4fvARB")]
            public static
            unsafe void ProgramLocalParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, Int32 index, Single* @params)
            {
                Delegates.glProgramLocalParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4fvARB")]
            public static
            void ProgramLocalParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, UInt32 index, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4fvARB")]
            public static
            void ProgramLocalParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, UInt32 index, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4fvARB")]
            public static
            unsafe void ProgramLocalParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, UInt32 index, Single* @params)
            {
                Delegates.glProgramLocalParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4fvARB")]
            public static
            void ProgramLocalParameter4(int target, Int32 index, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4fvARB")]
            public static
            void ProgramLocalParameter4(int target, Int32 index, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4fvARB")]
            public static
            unsafe void ProgramLocalParameter4(int target, Int32 index, Single* @params)
            {
                Delegates.glProgramLocalParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4fvARB")]
            public static
            void ProgramLocalParameter4(int target, UInt32 index, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4fvARB")]
            public static
            void ProgramLocalParameter4(int target, UInt32 index, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramLocalParameter4fvARB")]
            public static
            unsafe void ProgramLocalParameter4(int target, UInt32 index, Single* @params)
            {
                Delegates.glProgramLocalParameter4fvARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (UInt32)index, (Single*)@params);
            }

            [AutoGenerated(Category = "ARB_geometry_shader4", Version = "3.0", EntryPoint = "glProgramParameteriARB")]
            public static
            void ProgramParameter(Int32 program, OpenTK.Graphics.OpenGL.ARB_geometry_shader4 pname, Int32 value)
            {
                Delegates.glProgramParameteriARB((UInt32)program, (OpenTK.Graphics.OpenGL.ARB_geometry_shader4)pname, (Int32)value);
            }

            [AutoGenerated(Category = "ARB_geometry_shader4", Version = "3.0", EntryPoint = "glProgramParameteriARB")]
            public static
            void ProgramParameter(Int32 program, int pname, Int32 value)
            {
                Delegates.glProgramParameteriARB((UInt32)program, (OpenTK.Graphics.OpenGL.ARB_geometry_shader4)pname, (Int32)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_geometry_shader4", Version = "3.0", EntryPoint = "glProgramParameteriARB")]
            public static
            void ProgramParameter(UInt32 program, OpenTK.Graphics.OpenGL.ARB_geometry_shader4 pname, Int32 value)
            {
                Delegates.glProgramParameteriARB((UInt32)program, (OpenTK.Graphics.OpenGL.ARB_geometry_shader4)pname, (Int32)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_geometry_shader4", Version = "3.0", EntryPoint = "glProgramParameteriARB")]
            public static
            void ProgramParameter(UInt32 program, int pname, Int32 value)
            {
                Delegates.glProgramParameteriARB((UInt32)program, (OpenTK.Graphics.OpenGL.ARB_geometry_shader4)pname, (Int32)value);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramStringARB")]
            public static
            void ProgramString(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, OpenTK.Graphics.OpenGL.ARB_vertex_program format, Int32 len, IntPtr @string)
            {
                Delegates.glProgramStringARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.ARB_vertex_program)format, (Int32)len, (IntPtr)@string);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramStringARB")]
            public static
            void ProgramString<T3>(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, OpenTK.Graphics.OpenGL.ARB_vertex_program format, Int32 len, [InAttribute, OutAttribute] T3[] @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glProgramStringARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.ARB_vertex_program)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramStringARB")]
            public static
            void ProgramString<T3>(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, OpenTK.Graphics.OpenGL.ARB_vertex_program format, Int32 len, [InAttribute, OutAttribute] T3[,] @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glProgramStringARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.ARB_vertex_program)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramStringARB")]
            public static
            void ProgramString<T3>(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, OpenTK.Graphics.OpenGL.ARB_vertex_program format, Int32 len, [InAttribute, OutAttribute] T3[,,] @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glProgramStringARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.ARB_vertex_program)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramStringARB")]
            public static
            void ProgramString<T3>(OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB target, OpenTK.Graphics.OpenGL.ARB_vertex_program format, Int32 len, [InAttribute, OutAttribute] ref T3 @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glProgramStringARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.ARB_vertex_program)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    @string = (T3)@string_ptr.Target;
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramStringARB")]
            public static
            void ProgramString(int target, int format, Int32 len, IntPtr @string)
            {
                Delegates.glProgramStringARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.ARB_vertex_program)format, (Int32)len, (IntPtr)@string);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramStringARB")]
            public static
            void ProgramString<T3>(int target, int format, Int32 len, [InAttribute, OutAttribute] T3[] @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glProgramStringARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.ARB_vertex_program)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramStringARB")]
            public static
            void ProgramString<T3>(int target, int format, Int32 len, [InAttribute, OutAttribute] T3[,] @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glProgramStringARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.ARB_vertex_program)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramStringARB")]
            public static
            void ProgramString<T3>(int target, int format, Int32 len, [InAttribute, OutAttribute] T3[,,] @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glProgramStringARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.ARB_vertex_program)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glProgramStringARB")]
            public static
            void ProgramString<T3>(int target, int format, Int32 len, [InAttribute, OutAttribute] ref T3 @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glProgramStringARB((OpenTK.Graphics.OpenGL.AssemblyProgramTargetARB)target, (OpenTK.Graphics.OpenGL.ARB_vertex_program)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    @string = (T3)@string_ptr.Target;
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_multisample", Version = "1.2", EntryPoint = "glSampleCoverageARB")]
            public static
            void SampleCoverage(Single value, bool invert)
            {
                Delegates.glSampleCoverageARB((Single)value, (bool)invert);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glShaderSourceARB")]
            public static
            void ShaderSource(Int32 shaderObj, Int32 count, String[] @string, ref Int32 length)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glShaderSourceARB((UInt32)shaderObj, (Int32)count, (String[])@string, (Int32*)length_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glShaderSourceARB")]
            public static
            unsafe void ShaderSource(Int32 shaderObj, Int32 count, String[] @string, Int32* length)
            {
                Delegates.glShaderSourceARB((UInt32)shaderObj, (Int32)count, (String[])@string, (Int32*)length);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glShaderSourceARB")]
            public static
            void ShaderSource(UInt32 shaderObj, Int32 count, String[] @string, ref Int32 length)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glShaderSourceARB((UInt32)shaderObj, (Int32)count, (String[])@string, (Int32*)length_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glShaderSourceARB")]
            public static
            unsafe void ShaderSource(UInt32 shaderObj, Int32 count, String[] @string, Int32* length)
            {
                Delegates.glShaderSourceARB((UInt32)shaderObj, (Int32)count, (String[])@string, (Int32*)length);
            }

            [AutoGenerated(Category = "ARB_texture_buffer_object", Version = "3.0", EntryPoint = "glTexBufferARB")]
            public static
            void TexBuffer(int target, int internalformat, Int32 buffer)
            {
                Delegates.glTexBufferARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.ARB_texture_buffer_object)internalformat, (UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_texture_buffer_object", Version = "3.0", EntryPoint = "glTexBufferARB")]
            public static
            void TexBuffer(int target, int internalformat, UInt32 buffer)
            {
                Delegates.glTexBufferARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.ARB_texture_buffer_object)internalformat, (UInt32)buffer);
            }

            [AutoGenerated(Category = "ARB_texture_buffer_object", Version = "3.0", EntryPoint = "glTexBufferARB")]
            public static
            void TexBuffer(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.ARB_texture_buffer_object internalformat, Int32 buffer)
            {
                Delegates.glTexBufferARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.ARB_texture_buffer_object)internalformat, (UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_texture_buffer_object", Version = "3.0", EntryPoint = "glTexBufferARB")]
            public static
            void TexBuffer(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.ARB_texture_buffer_object internalformat, UInt32 buffer)
            {
                Delegates.glTexBufferARB((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.ARB_texture_buffer_object)internalformat, (UInt32)buffer);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform1fARB")]
            public static
            void Uniform1(Int32 location, Single v0)
            {
                Delegates.glUniform1fARB((Int32)location, (Single)v0);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform1fvARB")]
            public static
            void Uniform1(Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniform1fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform1fvARB")]
            public static
            void Uniform1(Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniform1fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform1fvARB")]
            public static
            unsafe void Uniform1(Int32 location, Int32 count, Single* value)
            {
                Delegates.glUniform1fvARB((Int32)location, (Int32)count, (Single*)value);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform1iARB")]
            public static
            void Uniform1(Int32 location, Int32 v0)
            {
                Delegates.glUniform1iARB((Int32)location, (Int32)v0);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform1ivARB")]
            public static
            void Uniform1(Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform1ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform1ivARB")]
            public static
            void Uniform1(Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform1ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform1ivARB")]
            public static
            unsafe void Uniform1(Int32 location, Int32 count, Int32* value)
            {
                Delegates.glUniform1ivARB((Int32)location, (Int32)count, (Int32*)value);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform2fARB")]
            public static
            void Uniform2(Int32 location, Single v0, Single v1)
            {
                Delegates.glUniform2fARB((Int32)location, (Single)v0, (Single)v1);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform2fvARB")]
            public static
            void Uniform2(Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniform2fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform2fvARB")]
            public static
            void Uniform2(Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniform2fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform2fvARB")]
            public static
            unsafe void Uniform2(Int32 location, Int32 count, Single* value)
            {
                Delegates.glUniform2fvARB((Int32)location, (Int32)count, (Single*)value);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform2iARB")]
            public static
            void Uniform2(Int32 location, Int32 v0, Int32 v1)
            {
                Delegates.glUniform2iARB((Int32)location, (Int32)v0, (Int32)v1);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform2ivARB")]
            public static
            void Uniform2(Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform2ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform2ivARB")]
            public static
            unsafe void Uniform2(Int32 location, Int32 count, Int32* value)
            {
                Delegates.glUniform2ivARB((Int32)location, (Int32)count, (Int32*)value);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform3fARB")]
            public static
            void Uniform3(Int32 location, Single v0, Single v1, Single v2)
            {
                Delegates.glUniform3fARB((Int32)location, (Single)v0, (Single)v1, (Single)v2);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform3fvARB")]
            public static
            void Uniform3(Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniform3fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform3fvARB")]
            public static
            void Uniform3(Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniform3fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform3fvARB")]
            public static
            unsafe void Uniform3(Int32 location, Int32 count, Single* value)
            {
                Delegates.glUniform3fvARB((Int32)location, (Int32)count, (Single*)value);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform3iARB")]
            public static
            void Uniform3(Int32 location, Int32 v0, Int32 v1, Int32 v2)
            {
                Delegates.glUniform3iARB((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform3ivARB")]
            public static
            void Uniform3(Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform3ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform3ivARB")]
            public static
            void Uniform3(Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform3ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform3ivARB")]
            public static
            unsafe void Uniform3(Int32 location, Int32 count, Int32* value)
            {
                Delegates.glUniform3ivARB((Int32)location, (Int32)count, (Int32*)value);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform4fARB")]
            public static
            void Uniform4(Int32 location, Single v0, Single v1, Single v2, Single v3)
            {
                Delegates.glUniform4fARB((Int32)location, (Single)v0, (Single)v1, (Single)v2, (Single)v3);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform4fvARB")]
            public static
            void Uniform4(Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniform4fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform4fvARB")]
            public static
            void Uniform4(Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniform4fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform4fvARB")]
            public static
            unsafe void Uniform4(Int32 location, Int32 count, Single* value)
            {
                Delegates.glUniform4fvARB((Int32)location, (Int32)count, (Single*)value);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform4iARB")]
            public static
            void Uniform4(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
            {
                Delegates.glUniform4iARB((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2, (Int32)v3);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform4ivARB")]
            public static
            void Uniform4(Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform4ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform4ivARB")]
            public static
            void Uniform4(Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform4ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniform4ivARB")]
            public static
            unsafe void Uniform4(Int32 location, Int32 count, Int32* value)
            {
                Delegates.glUniform4ivARB((Int32)location, (Int32)count, (Int32*)value);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniformMatrix2fvARB")]
            public static
            void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniformMatrix2fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniformMatrix2fvARB")]
            public static
            void UniformMatrix2(Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniformMatrix2fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniformMatrix2fvARB")]
            public static
            unsafe void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glUniformMatrix2fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniformMatrix3fvARB")]
            public static
            void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniformMatrix3fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniformMatrix3fvARB")]
            public static
            void UniformMatrix3(Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniformMatrix3fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniformMatrix3fvARB")]
            public static
            unsafe void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glUniformMatrix3fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniformMatrix4fvARB")]
            public static
            void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniformMatrix4fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniformMatrix4fvARB")]
            public static
            void UniformMatrix4(Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniformMatrix4fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUniformMatrix4fvARB")]
            public static
            unsafe void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glUniformMatrix4fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glUnmapBufferARB")]
            public static
            bool UnmapBuffer(OpenTK.Graphics.OpenGL.BufferTargetARB target)
            {
                return Delegates.glUnmapBufferARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target);
            }

            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "1.2", EntryPoint = "glUnmapBufferARB")]
            public static
            bool UnmapBuffer(int target)
            {
                return Delegates.glUnmapBufferARB((OpenTK.Graphics.OpenGL.BufferTargetARB)target);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUseProgramObjectARB")]
            public static
            void UseProgramObject(Int32 programObj)
            {
                Delegates.glUseProgramObjectARB((UInt32)programObj);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glUseProgramObjectARB")]
            public static
            void UseProgramObject(UInt32 programObj)
            {
                Delegates.glUseProgramObjectARB((UInt32)programObj);
            }

            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glValidateProgramARB")]
            public static
            void ValidateProgram(Int32 programObj)
            {
                Delegates.glValidateProgramARB((UInt32)programObj);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shader_objects", Version = "1.2", EntryPoint = "glValidateProgramARB")]
            public static
            void ValidateProgram(UInt32 programObj)
            {
                Delegates.glValidateProgramARB((UInt32)programObj);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib1dARB")]
            public static
            void VertexAttrib1(Int32 index, Double x)
            {
                Delegates.glVertexAttrib1dARB((UInt32)index, (Double)x);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib1dARB")]
            public static
            void VertexAttrib1(UInt32 index, Double x)
            {
                Delegates.glVertexAttrib1dARB((UInt32)index, (Double)x);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib1dvARB")]
            public static
            unsafe void VertexAttrib1(Int32 index, Double* v)
            {
                Delegates.glVertexAttrib1dvARB((UInt32)index, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib1dvARB")]
            public static
            unsafe void VertexAttrib1(UInt32 index, Double* v)
            {
                Delegates.glVertexAttrib1dvARB((UInt32)index, (Double*)v);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib1fARB")]
            public static
            void VertexAttrib1(Int32 index, Single x)
            {
                Delegates.glVertexAttrib1fARB((UInt32)index, (Single)x);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib1fARB")]
            public static
            void VertexAttrib1(UInt32 index, Single x)
            {
                Delegates.glVertexAttrib1fARB((UInt32)index, (Single)x);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib1fvARB")]
            public static
            unsafe void VertexAttrib1(Int32 index, Single* v)
            {
                Delegates.glVertexAttrib1fvARB((UInt32)index, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib1fvARB")]
            public static
            unsafe void VertexAttrib1(UInt32 index, Single* v)
            {
                Delegates.glVertexAttrib1fvARB((UInt32)index, (Single*)v);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib1sARB")]
            public static
            void VertexAttrib1(Int32 index, Int16 x)
            {
                Delegates.glVertexAttrib1sARB((UInt32)index, (Int16)x);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib1sARB")]
            public static
            void VertexAttrib1(UInt32 index, Int16 x)
            {
                Delegates.glVertexAttrib1sARB((UInt32)index, (Int16)x);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib1svARB")]
            public static
            unsafe void VertexAttrib1(Int32 index, Int16* v)
            {
                Delegates.glVertexAttrib1svARB((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib1svARB")]
            public static
            unsafe void VertexAttrib1(UInt32 index, Int16* v)
            {
                Delegates.glVertexAttrib1svARB((UInt32)index, (Int16*)v);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2dARB")]
            public static
            void VertexAttrib2(Int32 index, Double x, Double y)
            {
                Delegates.glVertexAttrib2dARB((UInt32)index, (Double)x, (Double)y);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2dARB")]
            public static
            void VertexAttrib2(UInt32 index, Double x, Double y)
            {
                Delegates.glVertexAttrib2dARB((UInt32)index, (Double)x, (Double)y);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2dvARB")]
            public static
            void VertexAttrib2(Int32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2dvARB")]
            public static
            void VertexAttrib2(Int32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2dvARB")]
            public static
            unsafe void VertexAttrib2(Int32 index, Double* v)
            {
                Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2dvARB")]
            public static
            void VertexAttrib2(UInt32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2dvARB")]
            public static
            void VertexAttrib2(UInt32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2dvARB")]
            public static
            unsafe void VertexAttrib2(UInt32 index, Double* v)
            {
                Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2fARB")]
            public static
            void VertexAttrib2(Int32 index, Single x, Single y)
            {
                Delegates.glVertexAttrib2fARB((UInt32)index, (Single)x, (Single)y);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2fARB")]
            public static
            void VertexAttrib2(UInt32 index, Single x, Single y)
            {
                Delegates.glVertexAttrib2fARB((UInt32)index, (Single)x, (Single)y);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2fvARB")]
            public static
            void VertexAttrib2(Int32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2fvARB")]
            public static
            void VertexAttrib2(Int32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2fvARB")]
            public static
            unsafe void VertexAttrib2(Int32 index, Single* v)
            {
                Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2fvARB")]
            public static
            void VertexAttrib2(UInt32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2fvARB")]
            public static
            void VertexAttrib2(UInt32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2fvARB")]
            public static
            unsafe void VertexAttrib2(UInt32 index, Single* v)
            {
                Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2sARB")]
            public static
            void VertexAttrib2(Int32 index, Int16 x, Int16 y)
            {
                Delegates.glVertexAttrib2sARB((UInt32)index, (Int16)x, (Int16)y);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2sARB")]
            public static
            void VertexAttrib2(UInt32 index, Int16 x, Int16 y)
            {
                Delegates.glVertexAttrib2sARB((UInt32)index, (Int16)x, (Int16)y);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2svARB")]
            public static
            void VertexAttrib2(Int32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2svARB")]
            public static
            void VertexAttrib2(Int32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2svARB")]
            public static
            unsafe void VertexAttrib2(Int32 index, Int16* v)
            {
                Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2svARB")]
            public static
            void VertexAttrib2(UInt32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2svARB")]
            public static
            void VertexAttrib2(UInt32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib2svARB")]
            public static
            unsafe void VertexAttrib2(UInt32 index, Int16* v)
            {
                Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3dARB")]
            public static
            void VertexAttrib3(Int32 index, Double x, Double y, Double z)
            {
                Delegates.glVertexAttrib3dARB((UInt32)index, (Double)x, (Double)y, (Double)z);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3dARB")]
            public static
            void VertexAttrib3(UInt32 index, Double x, Double y, Double z)
            {
                Delegates.glVertexAttrib3dARB((UInt32)index, (Double)x, (Double)y, (Double)z);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3dvARB")]
            public static
            void VertexAttrib3(Int32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3dvARB")]
            public static
            void VertexAttrib3(Int32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3dvARB")]
            public static
            unsafe void VertexAttrib3(Int32 index, Double* v)
            {
                Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3dvARB")]
            public static
            void VertexAttrib3(UInt32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3dvARB")]
            public static
            void VertexAttrib3(UInt32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3dvARB")]
            public static
            unsafe void VertexAttrib3(UInt32 index, Double* v)
            {
                Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3fARB")]
            public static
            void VertexAttrib3(Int32 index, Single x, Single y, Single z)
            {
                Delegates.glVertexAttrib3fARB((UInt32)index, (Single)x, (Single)y, (Single)z);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3fARB")]
            public static
            void VertexAttrib3(UInt32 index, Single x, Single y, Single z)
            {
                Delegates.glVertexAttrib3fARB((UInt32)index, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3fvARB")]
            public static
            void VertexAttrib3(Int32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3fvARB")]
            public static
            void VertexAttrib3(Int32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3fvARB")]
            public static
            unsafe void VertexAttrib3(Int32 index, Single* v)
            {
                Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3fvARB")]
            public static
            void VertexAttrib3(UInt32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3fvARB")]
            public static
            void VertexAttrib3(UInt32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3fvARB")]
            public static
            unsafe void VertexAttrib3(UInt32 index, Single* v)
            {
                Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3sARB")]
            public static
            void VertexAttrib3(Int32 index, Int16 x, Int16 y, Int16 z)
            {
                Delegates.glVertexAttrib3sARB((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3sARB")]
            public static
            void VertexAttrib3(UInt32 index, Int16 x, Int16 y, Int16 z)
            {
                Delegates.glVertexAttrib3sARB((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3svARB")]
            public static
            void VertexAttrib3(Int32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3svARB")]
            public static
            void VertexAttrib3(Int32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3svARB")]
            public static
            unsafe void VertexAttrib3(Int32 index, Int16* v)
            {
                Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3svARB")]
            public static
            void VertexAttrib3(UInt32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3svARB")]
            public static
            void VertexAttrib3(UInt32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib3svARB")]
            public static
            unsafe void VertexAttrib3(UInt32 index, Int16* v)
            {
                Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4bvARB")]
            public static
            void VertexAttrib4(UInt32 index, SByte[] v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4bvARB((UInt32)index, (SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4bvARB")]
            public static
            void VertexAttrib4(UInt32 index, ref SByte v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4bvARB((UInt32)index, (SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4bvARB")]
            public static
            unsafe void VertexAttrib4(UInt32 index, SByte* v)
            {
                Delegates.glVertexAttrib4bvARB((UInt32)index, (SByte*)v);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4dARB")]
            public static
            void VertexAttrib4(Int32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glVertexAttrib4dARB((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4dARB")]
            public static
            void VertexAttrib4(UInt32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glVertexAttrib4dARB((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4dvARB")]
            public static
            void VertexAttrib4(Int32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4dvARB")]
            public static
            void VertexAttrib4(Int32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4dvARB")]
            public static
            unsafe void VertexAttrib4(Int32 index, Double* v)
            {
                Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4dvARB")]
            public static
            void VertexAttrib4(UInt32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4dvARB")]
            public static
            void VertexAttrib4(UInt32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4dvARB")]
            public static
            unsafe void VertexAttrib4(UInt32 index, Double* v)
            {
                Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4fARB")]
            public static
            void VertexAttrib4(Int32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glVertexAttrib4fARB((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4fARB")]
            public static
            void VertexAttrib4(UInt32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glVertexAttrib4fARB((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4fvARB")]
            public static
            void VertexAttrib4(Int32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4fvARB")]
            public static
            void VertexAttrib4(Int32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4fvARB")]
            public static
            unsafe void VertexAttrib4(Int32 index, Single* v)
            {
                Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4fvARB")]
            public static
            void VertexAttrib4(UInt32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4fvARB")]
            public static
            void VertexAttrib4(UInt32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4fvARB")]
            public static
            unsafe void VertexAttrib4(UInt32 index, Single* v)
            {
                Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4ivARB")]
            public static
            void VertexAttrib4(Int32 index, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4ivARB")]
            public static
            void VertexAttrib4(Int32 index, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4ivARB")]
            public static
            unsafe void VertexAttrib4(Int32 index, Int32* v)
            {
                Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4ivARB")]
            public static
            void VertexAttrib4(UInt32 index, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4ivARB")]
            public static
            void VertexAttrib4(UInt32 index, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4ivARB")]
            public static
            unsafe void VertexAttrib4(UInt32 index, Int32* v)
            {
                Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NbvARB")]
            public static
            void VertexAttrib4N(UInt32 index, SByte[] v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NbvARB((UInt32)index, (SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NbvARB")]
            public static
            void VertexAttrib4N(UInt32 index, ref SByte v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NbvARB((UInt32)index, (SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NbvARB")]
            public static
            unsafe void VertexAttrib4N(UInt32 index, SByte* v)
            {
                Delegates.glVertexAttrib4NbvARB((UInt32)index, (SByte*)v);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NivARB")]
            public static
            void VertexAttrib4N(Int32 index, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NivARB")]
            public static
            void VertexAttrib4N(Int32 index, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NivARB")]
            public static
            unsafe void VertexAttrib4N(Int32 index, Int32* v)
            {
                Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NivARB")]
            public static
            void VertexAttrib4N(UInt32 index, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NivARB")]
            public static
            void VertexAttrib4N(UInt32 index, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NivARB")]
            public static
            unsafe void VertexAttrib4N(UInt32 index, Int32* v)
            {
                Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NsvARB")]
            public static
            void VertexAttrib4N(Int32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NsvARB")]
            public static
            void VertexAttrib4N(Int32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NsvARB")]
            public static
            unsafe void VertexAttrib4N(Int32 index, Int16* v)
            {
                Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NsvARB")]
            public static
            void VertexAttrib4N(UInt32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NsvARB")]
            public static
            void VertexAttrib4N(UInt32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NsvARB")]
            public static
            unsafe void VertexAttrib4N(UInt32 index, Int16* v)
            {
                Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NubARB")]
            public static
            void VertexAttrib4N(Int32 index, Byte x, Byte y, Byte z, Byte w)
            {
                Delegates.glVertexAttrib4NubARB((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NubARB")]
            public static
            void VertexAttrib4N(UInt32 index, Byte x, Byte y, Byte z, Byte w)
            {
                Delegates.glVertexAttrib4NubARB((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NubvARB")]
            public static
            void VertexAttrib4N(Int32 index, Byte[] v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NubvARB")]
            public static
            void VertexAttrib4N(Int32 index, ref Byte v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NubvARB")]
            public static
            unsafe void VertexAttrib4N(Int32 index, Byte* v)
            {
                Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NubvARB")]
            public static
            void VertexAttrib4N(UInt32 index, Byte[] v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NubvARB")]
            public static
            void VertexAttrib4N(UInt32 index, ref Byte v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NubvARB")]
            public static
            unsafe void VertexAttrib4N(UInt32 index, Byte* v)
            {
                Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NuivARB")]
            public static
            void VertexAttrib4N(UInt32 index, UInt32[] v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NuivARB((UInt32)index, (UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NuivARB")]
            public static
            void VertexAttrib4N(UInt32 index, ref UInt32 v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NuivARB((UInt32)index, (UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NuivARB")]
            public static
            unsafe void VertexAttrib4N(UInt32 index, UInt32* v)
            {
                Delegates.glVertexAttrib4NuivARB((UInt32)index, (UInt32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NusvARB")]
            public static
            void VertexAttrib4N(UInt32 index, UInt16[] v)
            {
                unsafe
                {
                    fixed (UInt16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NusvARB((UInt32)index, (UInt16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NusvARB")]
            public static
            void VertexAttrib4N(UInt32 index, ref UInt16 v)
            {
                unsafe
                {
                    fixed (UInt16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NusvARB((UInt32)index, (UInt16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4NusvARB")]
            public static
            unsafe void VertexAttrib4N(UInt32 index, UInt16* v)
            {
                Delegates.glVertexAttrib4NusvARB((UInt32)index, (UInt16*)v);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4sARB")]
            public static
            void VertexAttrib4(Int32 index, Int16 x, Int16 y, Int16 z, Int16 w)
            {
                Delegates.glVertexAttrib4sARB((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4sARB")]
            public static
            void VertexAttrib4(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w)
            {
                Delegates.glVertexAttrib4sARB((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4svARB")]
            public static
            void VertexAttrib4(Int32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4svARB")]
            public static
            void VertexAttrib4(Int32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4svARB")]
            public static
            unsafe void VertexAttrib4(Int32 index, Int16* v)
            {
                Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4svARB")]
            public static
            void VertexAttrib4(UInt32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4svARB")]
            public static
            void VertexAttrib4(UInt32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4svARB")]
            public static
            unsafe void VertexAttrib4(UInt32 index, Int16* v)
            {
                Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4ubvARB")]
            public static
            void VertexAttrib4(Int32 index, Byte[] v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4ubvARB")]
            public static
            void VertexAttrib4(Int32 index, ref Byte v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4ubvARB")]
            public static
            unsafe void VertexAttrib4(Int32 index, Byte* v)
            {
                Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4ubvARB")]
            public static
            void VertexAttrib4(UInt32 index, Byte[] v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4ubvARB")]
            public static
            void VertexAttrib4(UInt32 index, ref Byte v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4ubvARB")]
            public static
            unsafe void VertexAttrib4(UInt32 index, Byte* v)
            {
                Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4uivARB")]
            public static
            void VertexAttrib4(UInt32 index, UInt32[] v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4uivARB((UInt32)index, (UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4uivARB")]
            public static
            void VertexAttrib4(UInt32 index, ref UInt32 v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4uivARB((UInt32)index, (UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4uivARB")]
            public static
            unsafe void VertexAttrib4(UInt32 index, UInt32* v)
            {
                Delegates.glVertexAttrib4uivARB((UInt32)index, (UInt32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4usvARB")]
            public static
            void VertexAttrib4(UInt32 index, UInt16[] v)
            {
                unsafe
                {
                    fixed (UInt16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4usvARB((UInt32)index, (UInt16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4usvARB")]
            public static
            void VertexAttrib4(UInt32 index, ref UInt16 v)
            {
                unsafe
                {
                    fixed (UInt16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4usvARB((UInt32)index, (UInt16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttrib4usvARB")]
            public static
            unsafe void VertexAttrib4(UInt32 index, UInt16* v)
            {
                Delegates.glVertexAttrib4usvARB((UInt32)index, (UInt16*)v);
            }

            [AutoGenerated(Category = "ARB_instanced_arrays", Version = "2.0", EntryPoint = "glVertexAttribDivisorARB")]
            public static
            void VertexAttribDivisor(Int32 index, Int32 divisor)
            {
                Delegates.glVertexAttribDivisorARB((UInt32)index, (UInt32)divisor);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_instanced_arrays", Version = "2.0", EntryPoint = "glVertexAttribDivisorARB")]
            public static
            void VertexAttribDivisor(UInt32 index, UInt32 divisor)
            {
                Delegates.glVertexAttribDivisorARB((UInt32)index, (UInt32)divisor);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static
            void VertexAttribPointer(Int32 index, Int32 size, int type, bool normalized, Int32 stride, IntPtr pointer)
            {
                Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static
            void VertexAttribPointer<T5>(Int32 index, Int32 size, int type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
                where T5 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static
            void VertexAttribPointer<T5>(Int32 index, Int32 size, int type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
                where T5 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static
            void VertexAttribPointer<T5>(Int32 index, Int32 size, int type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] pointer)
                where T5 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static
            void VertexAttribPointer<T5>(Int32 index, Int32 size, int type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
                where T5 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T5)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static
            void VertexAttribPointer(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB type, bool normalized, Int32 stride, IntPtr pointer)
            {
                Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static
            void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
                where T5 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static
            void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
                where T5 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static
            void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] pointer)
                where T5 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static
            void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
                where T5 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T5)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static
            void VertexAttribPointer(UInt32 index, Int32 size, int type, bool normalized, Int32 stride, IntPtr pointer)
            {
                Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static
            void VertexAttribPointer<T5>(UInt32 index, Int32 size, int type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
                where T5 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static
            void VertexAttribPointer<T5>(UInt32 index, Int32 size, int type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
                where T5 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static
            void VertexAttribPointer<T5>(UInt32 index, Int32 size, int type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] pointer)
                where T5 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static
            void VertexAttribPointer<T5>(UInt32 index, Int32 size, int type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
                where T5 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T5)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static
            void VertexAttribPointer(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB type, bool normalized, Int32 stride, IntPtr pointer)
            {
                Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static
            void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
                where T5 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static
            void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
                where T5 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static
            void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] pointer)
                where T5 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_program", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static
            void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
                where T5 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerTypeARB)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T5)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glVertexBlendARB")]
            public static
            void VertexBlend(Int32 count)
            {
                Delegates.glVertexBlendARB((Int32)count);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightbvARB")]
            public static
            void Weight(Int32 size, SByte[] weights)
            {
                unsafe
                {
                    fixed (SByte* weights_ptr = weights)
                    {
                        Delegates.glWeightbvARB((Int32)size, (SByte*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightbvARB")]
            public static
            void Weight(Int32 size, ref SByte weights)
            {
                unsafe
                {
                    fixed (SByte* weights_ptr = &weights)
                    {
                        Delegates.glWeightbvARB((Int32)size, (SByte*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightbvARB")]
            public static
            unsafe void Weight(Int32 size, SByte* weights)
            {
                Delegates.glWeightbvARB((Int32)size, (SByte*)weights);
            }

            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightdvARB")]
            public static
            void Weight(Int32 size, Double[] weights)
            {
                unsafe
                {
                    fixed (Double* weights_ptr = weights)
                    {
                        Delegates.glWeightdvARB((Int32)size, (Double*)weights_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightdvARB")]
            public static
            void Weight(Int32 size, ref Double weights)
            {
                unsafe
                {
                    fixed (Double* weights_ptr = &weights)
                    {
                        Delegates.glWeightdvARB((Int32)size, (Double*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightdvARB")]
            public static
            unsafe void Weight(Int32 size, Double* weights)
            {
                Delegates.glWeightdvARB((Int32)size, (Double*)weights);
            }

            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightfvARB")]
            public static
            void Weight(Int32 size, Single[] weights)
            {
                unsafe
                {
                    fixed (Single* weights_ptr = weights)
                    {
                        Delegates.glWeightfvARB((Int32)size, (Single*)weights_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightfvARB")]
            public static
            void Weight(Int32 size, ref Single weights)
            {
                unsafe
                {
                    fixed (Single* weights_ptr = &weights)
                    {
                        Delegates.glWeightfvARB((Int32)size, (Single*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightfvARB")]
            public static
            unsafe void Weight(Int32 size, Single* weights)
            {
                Delegates.glWeightfvARB((Int32)size, (Single*)weights);
            }

            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightivARB")]
            public static
            void Weight(Int32 size, Int32[] weights)
            {
                unsafe
                {
                    fixed (Int32* weights_ptr = weights)
                    {
                        Delegates.glWeightivARB((Int32)size, (Int32*)weights_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightivARB")]
            public static
            void Weight(Int32 size, ref Int32 weights)
            {
                unsafe
                {
                    fixed (Int32* weights_ptr = &weights)
                    {
                        Delegates.glWeightivARB((Int32)size, (Int32*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightivARB")]
            public static
            unsafe void Weight(Int32 size, Int32* weights)
            {
                Delegates.glWeightivARB((Int32)size, (Int32*)weights);
            }

            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightPointerARB")]
            public static
            void WeightPointer(Int32 size, OpenTK.Graphics.OpenGL.ARB_vertex_blend type, Int32 stride, IntPtr pointer)
            {
                Delegates.glWeightPointerARB((Int32)size, (OpenTK.Graphics.OpenGL.ARB_vertex_blend)type, (Int32)stride, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightPointerARB")]
            public static
            void WeightPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ARB_vertex_blend type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glWeightPointerARB((Int32)size, (OpenTK.Graphics.OpenGL.ARB_vertex_blend)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightPointerARB")]
            public static
            void WeightPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ARB_vertex_blend type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glWeightPointerARB((Int32)size, (OpenTK.Graphics.OpenGL.ARB_vertex_blend)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightPointerARB")]
            public static
            void WeightPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ARB_vertex_blend type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glWeightPointerARB((Int32)size, (OpenTK.Graphics.OpenGL.ARB_vertex_blend)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightPointerARB")]
            public static
            void WeightPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ARB_vertex_blend type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glWeightPointerARB((Int32)size, (OpenTK.Graphics.OpenGL.ARB_vertex_blend)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T3)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightPointerARB")]
            public static
            void WeightPointer(Int32 size, int type, Int32 stride, IntPtr pointer)
            {
                Delegates.glWeightPointerARB((Int32)size, (OpenTK.Graphics.OpenGL.ARB_vertex_blend)type, (Int32)stride, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightPointerARB")]
            public static
            void WeightPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glWeightPointerARB((Int32)size, (OpenTK.Graphics.OpenGL.ARB_vertex_blend)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightPointerARB")]
            public static
            void WeightPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glWeightPointerARB((Int32)size, (OpenTK.Graphics.OpenGL.ARB_vertex_blend)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightPointerARB")]
            public static
            void WeightPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glWeightPointerARB((Int32)size, (OpenTK.Graphics.OpenGL.ARB_vertex_blend)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightPointerARB")]
            public static
            void WeightPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glWeightPointerARB((Int32)size, (OpenTK.Graphics.OpenGL.ARB_vertex_blend)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T3)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightsvARB")]
            public static
            void Weight(Int32 size, Int16[] weights)
            {
                unsafe
                {
                    fixed (Int16* weights_ptr = weights)
                    {
                        Delegates.glWeightsvARB((Int32)size, (Int16*)weights_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightsvARB")]
            public static
            void Weight(Int32 size, ref Int16 weights)
            {
                unsafe
                {
                    fixed (Int16* weights_ptr = &weights)
                    {
                        Delegates.glWeightsvARB((Int32)size, (Int16*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightsvARB")]
            public static
            unsafe void Weight(Int32 size, Int16* weights)
            {
                Delegates.glWeightsvARB((Int32)size, (Int16*)weights);
            }

            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightubvARB")]
            public static
            void Weight(Int32 size, Byte[] weights)
            {
                unsafe
                {
                    fixed (Byte* weights_ptr = weights)
                    {
                        Delegates.glWeightubvARB((Int32)size, (Byte*)weights_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightubvARB")]
            public static
            void Weight(Int32 size, ref Byte weights)
            {
                unsafe
                {
                    fixed (Byte* weights_ptr = &weights)
                    {
                        Delegates.glWeightubvARB((Int32)size, (Byte*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightubvARB")]
            public static
            unsafe void Weight(Int32 size, Byte* weights)
            {
                Delegates.glWeightubvARB((Int32)size, (Byte*)weights);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightuivARB")]
            public static
            void Weight(Int32 size, UInt32[] weights)
            {
                unsafe
                {
                    fixed (UInt32* weights_ptr = weights)
                    {
                        Delegates.glWeightuivARB((Int32)size, (UInt32*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightuivARB")]
            public static
            void Weight(Int32 size, ref UInt32 weights)
            {
                unsafe
                {
                    fixed (UInt32* weights_ptr = &weights)
                    {
                        Delegates.glWeightuivARB((Int32)size, (UInt32*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightuivARB")]
            public static
            unsafe void Weight(Int32 size, UInt32* weights)
            {
                Delegates.glWeightuivARB((Int32)size, (UInt32*)weights);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightusvARB")]
            public static
            void Weight(Int32 size, UInt16[] weights)
            {
                unsafe
                {
                    fixed (UInt16* weights_ptr = weights)
                    {
                        Delegates.glWeightusvARB((Int32)size, (UInt16*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightusvARB")]
            public static
            void Weight(Int32 size, ref UInt16 weights)
            {
                unsafe
                {
                    fixed (UInt16* weights_ptr = &weights)
                    {
                        Delegates.glWeightusvARB((Int32)size, (UInt16*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_vertex_blend", Version = "1.1", EntryPoint = "glWeightusvARB")]
            public static
            unsafe void Weight(Int32 size, UInt16* weights)
            {
                Delegates.glWeightusvARB((Int32)size, (UInt16*)weights);
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos2dARB")]
            public static
            void WindowPos2(Double x, Double y)
            {
                Delegates.glWindowPos2dARB((Double)x, (Double)y);
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos2dvARB")]
            public static
            void WindowPos2(Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glWindowPos2dvARB((Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos2dvARB")]
            public static
            void WindowPos2(ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glWindowPos2dvARB((Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos2dvARB")]
            public static
            unsafe void WindowPos2(Double* v)
            {
                Delegates.glWindowPos2dvARB((Double*)v);
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos2fARB")]
            public static
            void WindowPos2(Single x, Single y)
            {
                Delegates.glWindowPos2fARB((Single)x, (Single)y);
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos2fvARB")]
            public static
            void WindowPos2(Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glWindowPos2fvARB((Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos2fvARB")]
            public static
            void WindowPos2(ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glWindowPos2fvARB((Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos2fvARB")]
            public static
            unsafe void WindowPos2(Single* v)
            {
                Delegates.glWindowPos2fvARB((Single*)v);
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos2iARB")]
            public static
            void WindowPos2(Int32 x, Int32 y)
            {
                Delegates.glWindowPos2iARB((Int32)x, (Int32)y);
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos2ivARB")]
            public static
            void WindowPos2(Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glWindowPos2ivARB((Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos2ivARB")]
            public static
            void WindowPos2(ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glWindowPos2ivARB((Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos2ivARB")]
            public static
            unsafe void WindowPos2(Int32* v)
            {
                Delegates.glWindowPos2ivARB((Int32*)v);
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos2sARB")]
            public static
            void WindowPos2(Int16 x, Int16 y)
            {
                Delegates.glWindowPos2sARB((Int16)x, (Int16)y);
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos2svARB")]
            public static
            void WindowPos2(Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glWindowPos2svARB((Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos2svARB")]
            public static
            void WindowPos2(ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glWindowPos2svARB((Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos2svARB")]
            public static
            unsafe void WindowPos2(Int16* v)
            {
                Delegates.glWindowPos2svARB((Int16*)v);
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos3dARB")]
            public static
            void WindowPos3(Double x, Double y, Double z)
            {
                Delegates.glWindowPos3dARB((Double)x, (Double)y, (Double)z);
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos3dvARB")]
            public static
            void WindowPos3(Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glWindowPos3dvARB((Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos3dvARB")]
            public static
            void WindowPos3(ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glWindowPos3dvARB((Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos3dvARB")]
            public static
            unsafe void WindowPos3(Double* v)
            {
                Delegates.glWindowPos3dvARB((Double*)v);
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos3fARB")]
            public static
            void WindowPos3(Single x, Single y, Single z)
            {
                Delegates.glWindowPos3fARB((Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos3fvARB")]
            public static
            void WindowPos3(Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glWindowPos3fvARB((Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos3fvARB")]
            public static
            void WindowPos3(ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glWindowPos3fvARB((Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos3fvARB")]
            public static
            unsafe void WindowPos3(Single* v)
            {
                Delegates.glWindowPos3fvARB((Single*)v);
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos3iARB")]
            public static
            void WindowPos3(Int32 x, Int32 y, Int32 z)
            {
                Delegates.glWindowPos3iARB((Int32)x, (Int32)y, (Int32)z);
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos3ivARB")]
            public static
            void WindowPos3(Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glWindowPos3ivARB((Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos3ivARB")]
            public static
            void WindowPos3(ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glWindowPos3ivARB((Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos3ivARB")]
            public static
            unsafe void WindowPos3(Int32* v)
            {
                Delegates.glWindowPos3ivARB((Int32*)v);
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos3sARB")]
            public static
            void WindowPos3(Int16 x, Int16 y, Int16 z)
            {
                Delegates.glWindowPos3sARB((Int16)x, (Int16)y, (Int16)z);
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos3svARB")]
            public static
            void WindowPos3(Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glWindowPos3svARB((Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos3svARB")]
            public static
            void WindowPos3(ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glWindowPos3svARB((Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_window_pos", Version = "1.0", EntryPoint = "glWindowPos3svARB")]
            public static
            unsafe void WindowPos3(Int16* v)
            {
                Delegates.glWindowPos3svARB((Int16*)v);
            }

        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glAccum")]
        public static
        void Accum(OpenTK.Graphics.OpenGL.AccumOp op, Single value)
        {
            Delegates.glAccum((OpenTK.Graphics.OpenGL.AccumOp)op, (Single)value);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glAccum")]
        public static
        void Accum(int op, Single value)
        {
            Delegates.glAccum((OpenTK.Graphics.OpenGL.AccumOp)op, (Single)value);
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glActiveTexture")]
        public static
        void ActiveTexture(int texture)
        {
            Delegates.glActiveTexture((OpenTK.Graphics.OpenGL.TextureUnit)texture);
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glActiveTexture")]
        public static
        void ActiveTexture(OpenTK.Graphics.OpenGL.TextureUnit texture)
        {
            Delegates.glActiveTexture((OpenTK.Graphics.OpenGL.TextureUnit)texture);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glAlphaFunc")]
        public static
        void AlphaFunc(OpenTK.Graphics.OpenGL.AlphaFunction func, Single @ref)
        {
            Delegates.glAlphaFunc((OpenTK.Graphics.OpenGL.AlphaFunction)func, (Single)@ref);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glAlphaFunc")]
        public static
        void AlphaFunc(int func, Single @ref)
        {
            Delegates.glAlphaFunc((OpenTK.Graphics.OpenGL.AlphaFunction)func, (Single)@ref);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glAreTexturesResident")]
        public static
        bool AreTexturesResident(Int32 n, Int32[] textures, [OutAttribute] bool[] residences)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = textures)
                fixed (bool* residences_ptr = residences)
                {
                    return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glAreTexturesResident")]
        public static
        bool AreTexturesResident(Int32 n, ref Int32 textures, [OutAttribute] out bool residences)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = &textures)
                fixed (bool* residences_ptr = &residences)
                {
                    bool retval = Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                    residences = *residences_ptr;
                    return retval;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glAreTexturesResident")]
        public static
        unsafe bool AreTexturesResident(Int32 n, Int32* textures, [OutAttribute] bool* residences)
        {
            return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures, (bool*)residences);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glAreTexturesResident")]
        public static
        bool AreTexturesResident(Int32 n, UInt32[] textures, [OutAttribute] bool[] residences)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = textures)
                fixed (bool* residences_ptr = residences)
                {
                    return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glAreTexturesResident")]
        public static
        bool AreTexturesResident(Int32 n, ref UInt32 textures, [OutAttribute] out bool residences)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = &textures)
                fixed (bool* residences_ptr = &residences)
                {
                    bool retval = Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                    residences = *residences_ptr;
                    return retval;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glAreTexturesResident")]
        public static
        unsafe bool AreTexturesResident(Int32 n, UInt32* textures, [OutAttribute] bool* residences)
        {
            return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures, (bool*)residences);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glArrayElement")]
        public static
        void ArrayElement(Int32 i)
        {
            Delegates.glArrayElement((Int32)i);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glAttachShader")]
        public static
        void AttachShader(Int32 program, Int32 shader)
        {
            Delegates.glAttachShader((UInt32)program, (UInt32)shader);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glAttachShader")]
        public static
        void AttachShader(UInt32 program, UInt32 shader)
        {
            Delegates.glAttachShader((UInt32)program, (UInt32)shader);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glBegin")]
        public static
        void Begin(OpenTK.Graphics.OpenGL.BeginMode mode)
        {
            Delegates.glBegin((OpenTK.Graphics.OpenGL.BeginMode)mode);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glBegin")]
        public static
        void Begin(int mode)
        {
            Delegates.glBegin((OpenTK.Graphics.OpenGL.BeginMode)mode);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBeginConditionalRender")]
        public static
        void BeginConditionalRender(Int32 id, OpenTK.Graphics.OpenGL.ConditionalRenderType mode)
        {
            Delegates.glBeginConditionalRender((UInt32)id, (OpenTK.Graphics.OpenGL.ConditionalRenderType)mode);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBeginConditionalRender")]
        public static
        void BeginConditionalRender(Int32 id, int mode)
        {
            Delegates.glBeginConditionalRender((UInt32)id, (OpenTK.Graphics.OpenGL.ConditionalRenderType)mode);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBeginConditionalRender")]
        public static
        void BeginConditionalRender(UInt32 id, OpenTK.Graphics.OpenGL.ConditionalRenderType mode)
        {
            Delegates.glBeginConditionalRender((UInt32)id, (OpenTK.Graphics.OpenGL.ConditionalRenderType)mode);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBeginConditionalRender")]
        public static
        void BeginConditionalRender(UInt32 id, int mode)
        {
            Delegates.glBeginConditionalRender((UInt32)id, (OpenTK.Graphics.OpenGL.ConditionalRenderType)mode);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBeginQuery")]
        public static
        void BeginQuery(int target, Int32 id)
        {
            Delegates.glBeginQuery((OpenTK.Graphics.OpenGL.QueryTarget)target, (UInt32)id);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBeginQuery")]
        public static
        void BeginQuery(int target, UInt32 id)
        {
            Delegates.glBeginQuery((OpenTK.Graphics.OpenGL.QueryTarget)target, (UInt32)id);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBeginQuery")]
        public static
        void BeginQuery(OpenTK.Graphics.OpenGL.QueryTarget target, Int32 id)
        {
            Delegates.glBeginQuery((OpenTK.Graphics.OpenGL.QueryTarget)target, (UInt32)id);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBeginQuery")]
        public static
        void BeginQuery(OpenTK.Graphics.OpenGL.QueryTarget target, UInt32 id)
        {
            Delegates.glBeginQuery((OpenTK.Graphics.OpenGL.QueryTarget)target, (UInt32)id);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBeginTransformFeedback")]
        public static
        void BeginTransformFeedback(OpenTK.Graphics.OpenGL.BeginFeedbackMode primitiveMode)
        {
            Delegates.glBeginTransformFeedback((OpenTK.Graphics.OpenGL.BeginFeedbackMode)primitiveMode);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBeginTransformFeedback")]
        public static
        void BeginTransformFeedback(int primitiveMode)
        {
            Delegates.glBeginTransformFeedback((OpenTK.Graphics.OpenGL.BeginFeedbackMode)primitiveMode);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glBindAttribLocation")]
        public static
        void BindAttribLocation(Int32 program, Int32 index, String name)
        {
            Delegates.glBindAttribLocation((UInt32)program, (UInt32)index, (String)name);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glBindAttribLocation")]
        public static
        void BindAttribLocation(UInt32 program, UInt32 index, String name)
        {
            Delegates.glBindAttribLocation((UInt32)program, (UInt32)index, (String)name);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBindBuffer")]
        public static
        void BindBuffer(OpenTK.Graphics.OpenGL.BufferTarget target, Int32 buffer)
        {
            Delegates.glBindBuffer((OpenTK.Graphics.OpenGL.BufferTarget)target, (UInt32)buffer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBindBuffer")]
        public static
        void BindBuffer(OpenTK.Graphics.OpenGL.BufferTarget target, UInt32 buffer)
        {
            Delegates.glBindBuffer((OpenTK.Graphics.OpenGL.BufferTarget)target, (UInt32)buffer);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBindBuffer")]
        public static
        void BindBuffer(int target, Int32 buffer)
        {
            Delegates.glBindBuffer((OpenTK.Graphics.OpenGL.BufferTarget)target, (UInt32)buffer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBindBuffer")]
        public static
        void BindBuffer(int target, UInt32 buffer)
        {
            Delegates.glBindBuffer((OpenTK.Graphics.OpenGL.BufferTarget)target, (UInt32)buffer);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferBase")]
        public static
        void BindBufferBase(OpenTK.Graphics.OpenGL.BufferTarget target, Int32 index, Int32 buffer)
        {
            Delegates.glBindBufferBase((OpenTK.Graphics.OpenGL.BufferTarget)target, (UInt32)index, (UInt32)buffer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferBase")]
        public static
        void BindBufferBase(OpenTK.Graphics.OpenGL.BufferTarget target, UInt32 index, UInt32 buffer)
        {
            Delegates.glBindBufferBase((OpenTK.Graphics.OpenGL.BufferTarget)target, (UInt32)index, (UInt32)buffer);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferBase")]
        public static
        void BindBufferBase(int target, Int32 index, Int32 buffer)
        {
            Delegates.glBindBufferBase((OpenTK.Graphics.OpenGL.BufferTarget)target, (UInt32)index, (UInt32)buffer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferBase")]
        public static
        void BindBufferBase(int target, UInt32 index, UInt32 buffer)
        {
            Delegates.glBindBufferBase((OpenTK.Graphics.OpenGL.BufferTarget)target, (UInt32)index, (UInt32)buffer);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferRange")]
        public static
        void BindBufferRange(OpenTK.Graphics.OpenGL.BufferTarget target, Int32 index, Int32 buffer, IntPtr offset, IntPtr size)
        {
            Delegates.glBindBufferRange((OpenTK.Graphics.OpenGL.BufferTarget)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferRange")]
        public static
        void BindBufferRange(OpenTK.Graphics.OpenGL.BufferTarget target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size)
        {
            Delegates.glBindBufferRange((OpenTK.Graphics.OpenGL.BufferTarget)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferRange")]
        public static
        void BindBufferRange(int target, Int32 index, Int32 buffer, IntPtr offset, IntPtr size)
        {
            Delegates.glBindBufferRange((OpenTK.Graphics.OpenGL.BufferTarget)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferRange")]
        public static
        void BindBufferRange(int target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size)
        {
            Delegates.glBindBufferRange((OpenTK.Graphics.OpenGL.BufferTarget)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindFragDataLocation")]
        public static
        void BindFragDataLocation(Int32 program, Int32 color, String name)
        {
            Delegates.glBindFragDataLocation((UInt32)program, (UInt32)color, (String)name);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindFragDataLocation")]
        public static
        void BindFragDataLocation(UInt32 program, UInt32 color, String name)
        {
            Delegates.glBindFragDataLocation((UInt32)program, (UInt32)color, (String)name);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glBindFramebuffer")]
        public static
        void BindFramebuffer(OpenTK.Graphics.OpenGL.FramebufferTarget target, Int32 framebuffer)
        {
            Delegates.glBindFramebuffer((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (UInt32)framebuffer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glBindFramebuffer")]
        public static
        void BindFramebuffer(OpenTK.Graphics.OpenGL.FramebufferTarget target, UInt32 framebuffer)
        {
            Delegates.glBindFramebuffer((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (UInt32)framebuffer);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glBindFramebuffer")]
        public static
        void BindFramebuffer(int target, Int32 framebuffer)
        {
            Delegates.glBindFramebuffer((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (UInt32)framebuffer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glBindFramebuffer")]
        public static
        void BindFramebuffer(int target, UInt32 framebuffer)
        {
            Delegates.glBindFramebuffer((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (UInt32)framebuffer);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glBindRenderbuffer")]
        public static
        void BindRenderbuffer(int target, Int32 renderbuffer)
        {
            Delegates.glBindRenderbuffer((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (UInt32)renderbuffer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glBindRenderbuffer")]
        public static
        void BindRenderbuffer(int target, UInt32 renderbuffer)
        {
            Delegates.glBindRenderbuffer((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (UInt32)renderbuffer);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glBindRenderbuffer")]
        public static
        void BindRenderbuffer(OpenTK.Graphics.OpenGL.RenderbufferTarget target, Int32 renderbuffer)
        {
            Delegates.glBindRenderbuffer((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (UInt32)renderbuffer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glBindRenderbuffer")]
        public static
        void BindRenderbuffer(OpenTK.Graphics.OpenGL.RenderbufferTarget target, UInt32 renderbuffer)
        {
            Delegates.glBindRenderbuffer((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (UInt32)renderbuffer);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glBindTexture")]
        public static
        void BindTexture(int target, Int32 texture)
        {
            Delegates.glBindTexture((OpenTK.Graphics.OpenGL.TextureTarget)target, (UInt32)texture);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glBindTexture")]
        public static
        void BindTexture(int target, UInt32 texture)
        {
            Delegates.glBindTexture((OpenTK.Graphics.OpenGL.TextureTarget)target, (UInt32)texture);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glBindTexture")]
        public static
        void BindTexture(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 texture)
        {
            Delegates.glBindTexture((OpenTK.Graphics.OpenGL.TextureTarget)target, (UInt32)texture);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glBindTexture")]
        public static
        void BindTexture(OpenTK.Graphics.OpenGL.TextureTarget target, UInt32 texture)
        {
            Delegates.glBindTexture((OpenTK.Graphics.OpenGL.TextureTarget)target, (UInt32)texture);
        }

        [AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glBindVertexArray")]
        public static
        void BindVertexArray(Int32 array)
        {
            Delegates.glBindVertexArray((UInt32)array);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glBindVertexArray")]
        public static
        void BindVertexArray(UInt32 array)
        {
            Delegates.glBindVertexArray((UInt32)array);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glBitmap")]
        public static
        void Bitmap(Int32 width, Int32 height, Single xorig, Single yorig, Single xmove, Single ymove, Byte[] bitmap)
        {
            unsafe
            {
                fixed (Byte* bitmap_ptr = bitmap)
                {
                    Delegates.glBitmap((Int32)width, (Int32)height, (Single)xorig, (Single)yorig, (Single)xmove, (Single)ymove, (Byte*)bitmap_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glBitmap")]
        public static
        void Bitmap(Int32 width, Int32 height, Single xorig, Single yorig, Single xmove, Single ymove, ref Byte bitmap)
        {
            unsafe
            {
                fixed (Byte* bitmap_ptr = &bitmap)
                {
                    Delegates.glBitmap((Int32)width, (Int32)height, (Single)xorig, (Single)yorig, (Single)xmove, (Single)ymove, (Byte*)bitmap_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glBitmap")]
        public static
        unsafe void Bitmap(Int32 width, Int32 height, Single xorig, Single yorig, Single xmove, Single ymove, Byte* bitmap)
        {
            Delegates.glBitmap((Int32)width, (Int32)height, (Single)xorig, (Single)yorig, (Single)xmove, (Single)ymove, (Byte*)bitmap);
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glBlendColor")]
        public static
        void BlendColor(Single red, Single green, Single blue, Single alpha)
        {
            Delegates.glBlendColor((Single)red, (Single)green, (Single)blue, (Single)alpha);
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glBlendEquation")]
        public static
        void BlendEquation(OpenTK.Graphics.OpenGL.BlendEquationMode mode)
        {
            Delegates.glBlendEquation((OpenTK.Graphics.OpenGL.BlendEquationMode)mode);
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glBlendEquation")]
        public static
        void BlendEquation(int mode)
        {
            Delegates.glBlendEquation((OpenTK.Graphics.OpenGL.BlendEquationMode)mode);
        }

        [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "1.2", EntryPoint = "glBlendEquationi")]
        public static
        void BlendEquation(Int32 buf, OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend mode)
        {
            Delegates.glBlendEquationi((UInt32)buf, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)mode);
        }

        [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "1.2", EntryPoint = "glBlendEquationi")]
        public static
        void BlendEquation(Int32 buf, int mode)
        {
            Delegates.glBlendEquationi((UInt32)buf, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)mode);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "1.2", EntryPoint = "glBlendEquationi")]
        public static
        void BlendEquation(UInt32 buf, OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend mode)
        {
            Delegates.glBlendEquationi((UInt32)buf, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)mode);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "1.2", EntryPoint = "glBlendEquationi")]
        public static
        void BlendEquation(UInt32 buf, int mode)
        {
            Delegates.glBlendEquationi((UInt32)buf, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)mode);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glBlendEquationSeparate")]
        public static
        void BlendEquationSeparate(OpenTK.Graphics.OpenGL.BlendEquationMode modeRGB, OpenTK.Graphics.OpenGL.BlendEquationMode modeAlpha)
        {
            Delegates.glBlendEquationSeparate((OpenTK.Graphics.OpenGL.BlendEquationMode)modeRGB, (OpenTK.Graphics.OpenGL.BlendEquationMode)modeAlpha);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glBlendEquationSeparate")]
        public static
        void BlendEquationSeparate(int modeRGB, int modeAlpha)
        {
            Delegates.glBlendEquationSeparate((OpenTK.Graphics.OpenGL.BlendEquationMode)modeRGB, (OpenTK.Graphics.OpenGL.BlendEquationMode)modeAlpha);
        }

        [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "1.2", EntryPoint = "glBlendEquationSeparatei")]
        public static
        void BlendEquationSeparate(Int32 buf, OpenTK.Graphics.OpenGL.BlendEquationMode modeRGB, OpenTK.Graphics.OpenGL.BlendEquationMode modeAlpha)
        {
            Delegates.glBlendEquationSeparatei((UInt32)buf, (OpenTK.Graphics.OpenGL.BlendEquationMode)modeRGB, (OpenTK.Graphics.OpenGL.BlendEquationMode)modeAlpha);
        }

        [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "1.2", EntryPoint = "glBlendEquationSeparatei")]
        public static
        void BlendEquationSeparate(Int32 buf, int modeRGB, int modeAlpha)
        {
            Delegates.glBlendEquationSeparatei((UInt32)buf, (OpenTK.Graphics.OpenGL.BlendEquationMode)modeRGB, (OpenTK.Graphics.OpenGL.BlendEquationMode)modeAlpha);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "1.2", EntryPoint = "glBlendEquationSeparatei")]
        public static
        void BlendEquationSeparate(UInt32 buf, OpenTK.Graphics.OpenGL.BlendEquationMode modeRGB, OpenTK.Graphics.OpenGL.BlendEquationMode modeAlpha)
        {
            Delegates.glBlendEquationSeparatei((UInt32)buf, (OpenTK.Graphics.OpenGL.BlendEquationMode)modeRGB, (OpenTK.Graphics.OpenGL.BlendEquationMode)modeAlpha);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "1.2", EntryPoint = "glBlendEquationSeparatei")]
        public static
        void BlendEquationSeparate(UInt32 buf, int modeRGB, int modeAlpha)
        {
            Delegates.glBlendEquationSeparatei((UInt32)buf, (OpenTK.Graphics.OpenGL.BlendEquationMode)modeRGB, (OpenTK.Graphics.OpenGL.BlendEquationMode)modeAlpha);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glBlendFunc")]
        public static
        void BlendFunc(OpenTK.Graphics.OpenGL.BlendingFactorSrc sfactor, OpenTK.Graphics.OpenGL.BlendingFactorDest dfactor)
        {
            Delegates.glBlendFunc((OpenTK.Graphics.OpenGL.BlendingFactorSrc)sfactor, (OpenTK.Graphics.OpenGL.BlendingFactorDest)dfactor);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glBlendFunc")]
        public static
        void BlendFunc(int sfactor, int dfactor)
        {
            Delegates.glBlendFunc((OpenTK.Graphics.OpenGL.BlendingFactorSrc)sfactor, (OpenTK.Graphics.OpenGL.BlendingFactorDest)dfactor);
        }

        [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "1.2", EntryPoint = "glBlendFunci")]
        public static
        void BlendFunc(Int32 buf, OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend src, OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend dst)
        {
            Delegates.glBlendFunci((UInt32)buf, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)src, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)dst);
        }

        [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "1.2", EntryPoint = "glBlendFunci")]
        public static
        void BlendFunc(Int32 buf, int src, int dst)
        {
            Delegates.glBlendFunci((UInt32)buf, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)src, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)dst);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "1.2", EntryPoint = "glBlendFunci")]
        public static
        void BlendFunc(UInt32 buf, OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend src, OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend dst)
        {
            Delegates.glBlendFunci((UInt32)buf, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)src, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)dst);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "1.2", EntryPoint = "glBlendFunci")]
        public static
        void BlendFunc(UInt32 buf, int src, int dst)
        {
            Delegates.glBlendFunci((UInt32)buf, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)src, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)dst);
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glBlendFuncSeparate")]
        public static
        void BlendFuncSeparate(OpenTK.Graphics.OpenGL.BlendingFactorSrc sfactorRGB, OpenTK.Graphics.OpenGL.BlendingFactorDest dfactorRGB, OpenTK.Graphics.OpenGL.BlendingFactorSrc sfactorAlpha, OpenTK.Graphics.OpenGL.BlendingFactorDest dfactorAlpha)
        {
            Delegates.glBlendFuncSeparate((OpenTK.Graphics.OpenGL.BlendingFactorSrc)sfactorRGB, (OpenTK.Graphics.OpenGL.BlendingFactorDest)dfactorRGB, (OpenTK.Graphics.OpenGL.BlendingFactorSrc)sfactorAlpha, (OpenTK.Graphics.OpenGL.BlendingFactorDest)dfactorAlpha);
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glBlendFuncSeparate")]
        public static
        void BlendFuncSeparate(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha)
        {
            Delegates.glBlendFuncSeparate((OpenTK.Graphics.OpenGL.BlendingFactorSrc)sfactorRGB, (OpenTK.Graphics.OpenGL.BlendingFactorDest)dfactorRGB, (OpenTK.Graphics.OpenGL.BlendingFactorSrc)sfactorAlpha, (OpenTK.Graphics.OpenGL.BlendingFactorDest)dfactorAlpha);
        }

        [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "1.2", EntryPoint = "glBlendFuncSeparatei")]
        public static
        void BlendFuncSeparate(Int32 buf, OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend srcRGB, OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend dstRGB, OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend srcAlpha, OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend dstAlpha)
        {
            Delegates.glBlendFuncSeparatei((UInt32)buf, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)srcRGB, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)dstRGB, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)srcAlpha, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)dstAlpha);
        }

        [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "1.2", EntryPoint = "glBlendFuncSeparatei")]
        public static
        void BlendFuncSeparate(Int32 buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha)
        {
            Delegates.glBlendFuncSeparatei((UInt32)buf, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)srcRGB, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)dstRGB, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)srcAlpha, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)dstAlpha);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "1.2", EntryPoint = "glBlendFuncSeparatei")]
        public static
        void BlendFuncSeparate(UInt32 buf, OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend srcRGB, OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend dstRGB, OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend srcAlpha, OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend dstAlpha)
        {
            Delegates.glBlendFuncSeparatei((UInt32)buf, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)srcRGB, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)dstRGB, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)srcAlpha, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)dstAlpha);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "1.2", EntryPoint = "glBlendFuncSeparatei")]
        public static
        void BlendFuncSeparate(UInt32 buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha)
        {
            Delegates.glBlendFuncSeparatei((UInt32)buf, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)srcRGB, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)dstRGB, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)srcAlpha, (OpenTK.Graphics.OpenGL.ARB_draw_buffers_blend)dstAlpha);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glBlitFramebuffer")]
        public static
        void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.OpenGL.ClearBufferMask mask, OpenTK.Graphics.OpenGL.BlitFramebufferFilter filter)
        {
            Delegates.glBlitFramebuffer((Int32)srcX0, (Int32)srcY0, (Int32)srcX1, (Int32)srcY1, (Int32)dstX0, (Int32)dstY0, (Int32)dstX1, (Int32)dstY1, (OpenTK.Graphics.OpenGL.ClearBufferMask)mask, (OpenTK.Graphics.OpenGL.BlitFramebufferFilter)filter);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glBlitFramebuffer")]
        public static
        void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, int mask, int filter)
        {
            Delegates.glBlitFramebuffer((Int32)srcX0, (Int32)srcY0, (Int32)srcX1, (Int32)srcY1, (Int32)dstX0, (Int32)dstY0, (Int32)dstX1, (Int32)dstY1, (OpenTK.Graphics.OpenGL.ClearBufferMask)mask, (OpenTK.Graphics.OpenGL.BlitFramebufferFilter)filter);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static
        void BufferData(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr size, IntPtr data, OpenTK.Graphics.OpenGL.BufferUsageHint usage)
        {
            Delegates.glBufferData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)size, (IntPtr)data, (OpenTK.Graphics.OpenGL.BufferUsageHint)usage);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static
        void BufferData<T2>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[] data, OpenTK.Graphics.OpenGL.BufferUsageHint usage)
            where T2 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.BufferUsageHint)usage);
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static
        void BufferData<T2>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[,] data, OpenTK.Graphics.OpenGL.BufferUsageHint usage)
            where T2 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.BufferUsageHint)usage);
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static
        void BufferData<T2>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[,,] data, OpenTK.Graphics.OpenGL.BufferUsageHint usage)
            where T2 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.BufferUsageHint)usage);
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static
        void BufferData<T2>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] ref T2 data, OpenTK.Graphics.OpenGL.BufferUsageHint usage)
            where T2 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.BufferUsageHint)usage);
                data = (T2)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static
        void BufferData(int target, IntPtr size, IntPtr data, int usage)
        {
            Delegates.glBufferData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)size, (IntPtr)data, (OpenTK.Graphics.OpenGL.BufferUsageHint)usage);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static
        void BufferData<T2>(int target, IntPtr size, [InAttribute, OutAttribute] T2[] data, int usage)
            where T2 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.BufferUsageHint)usage);
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static
        void BufferData<T2>(int target, IntPtr size, [InAttribute, OutAttribute] T2[,] data, int usage)
            where T2 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.BufferUsageHint)usage);
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static
        void BufferData<T2>(int target, IntPtr size, [InAttribute, OutAttribute] T2[,,] data, int usage)
            where T2 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.BufferUsageHint)usage);
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static
        void BufferData<T2>(int target, IntPtr size, [InAttribute, OutAttribute] ref T2 data, int usage)
            where T2 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.BufferUsageHint)usage);
                data = (T2)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static
        void BufferSubData(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, IntPtr data)
        {
            Delegates.glBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static
        void BufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static
        void BufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static
        void BufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
            where T3 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static
        void BufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T3)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static
        void BufferSubData(int target, IntPtr offset, IntPtr size, IntPtr data)
        {
            Delegates.glBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static
        void BufferSubData<T3>(int target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static
        void BufferSubData<T3>(int target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static
        void BufferSubData<T3>(int target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
            where T3 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static
        void BufferSubData<T3>(int target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T3)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glCallList")]
        public static
        void CallList(Int32 list)
        {
            Delegates.glCallList((UInt32)list);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glCallList")]
        public static
        void CallList(UInt32 list)
        {
            Delegates.glCallList((UInt32)list);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glCallLists")]
        public static
        void CallLists(Int32 n, int type, IntPtr lists)
        {
            Delegates.glCallLists((Int32)n, (OpenTK.Graphics.OpenGL.ListNameType)type, (IntPtr)lists);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glCallLists")]
        public static
        void CallLists<T2>(Int32 n, int type, [InAttribute, OutAttribute] T2[] lists)
            where T2 : struct
        {
            GCHandle lists_ptr = GCHandle.Alloc(lists, GCHandleType.Pinned);
            try
            {
                Delegates.glCallLists((Int32)n, (OpenTK.Graphics.OpenGL.ListNameType)type, (IntPtr)lists_ptr.AddrOfPinnedObject());
            }
            finally
            {
                lists_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glCallLists")]
        public static
        void CallLists<T2>(Int32 n, int type, [InAttribute, OutAttribute] T2[,] lists)
            where T2 : struct
        {
            GCHandle lists_ptr = GCHandle.Alloc(lists, GCHandleType.Pinned);
            try
            {
                Delegates.glCallLists((Int32)n, (OpenTK.Graphics.OpenGL.ListNameType)type, (IntPtr)lists_ptr.AddrOfPinnedObject());
            }
            finally
            {
                lists_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glCallLists")]
        public static
        void CallLists<T2>(Int32 n, int type, [InAttribute, OutAttribute] T2[,,] lists)
            where T2 : struct
        {
            GCHandle lists_ptr = GCHandle.Alloc(lists, GCHandleType.Pinned);
            try
            {
                Delegates.glCallLists((Int32)n, (OpenTK.Graphics.OpenGL.ListNameType)type, (IntPtr)lists_ptr.AddrOfPinnedObject());
            }
            finally
            {
                lists_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glCallLists")]
        public static
        void CallLists<T2>(Int32 n, int type, [InAttribute, OutAttribute] ref T2 lists)
            where T2 : struct
        {
            GCHandle lists_ptr = GCHandle.Alloc(lists, GCHandleType.Pinned);
            try
            {
                Delegates.glCallLists((Int32)n, (OpenTK.Graphics.OpenGL.ListNameType)type, (IntPtr)lists_ptr.AddrOfPinnedObject());
                lists = (T2)lists_ptr.Target;
            }
            finally
            {
                lists_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glCallLists")]
        public static
        void CallLists(Int32 n, OpenTK.Graphics.OpenGL.ListNameType type, IntPtr lists)
        {
            Delegates.glCallLists((Int32)n, (OpenTK.Graphics.OpenGL.ListNameType)type, (IntPtr)lists);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glCallLists")]
        public static
        void CallLists<T2>(Int32 n, OpenTK.Graphics.OpenGL.ListNameType type, [InAttribute, OutAttribute] T2[] lists)
            where T2 : struct
        {
            GCHandle lists_ptr = GCHandle.Alloc(lists, GCHandleType.Pinned);
            try
            {
                Delegates.glCallLists((Int32)n, (OpenTK.Graphics.OpenGL.ListNameType)type, (IntPtr)lists_ptr.AddrOfPinnedObject());
            }
            finally
            {
                lists_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glCallLists")]
        public static
        void CallLists<T2>(Int32 n, OpenTK.Graphics.OpenGL.ListNameType type, [InAttribute, OutAttribute] T2[,] lists)
            where T2 : struct
        {
            GCHandle lists_ptr = GCHandle.Alloc(lists, GCHandleType.Pinned);
            try
            {
                Delegates.glCallLists((Int32)n, (OpenTK.Graphics.OpenGL.ListNameType)type, (IntPtr)lists_ptr.AddrOfPinnedObject());
            }
            finally
            {
                lists_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glCallLists")]
        public static
        void CallLists<T2>(Int32 n, OpenTK.Graphics.OpenGL.ListNameType type, [InAttribute, OutAttribute] T2[,,] lists)
            where T2 : struct
        {
            GCHandle lists_ptr = GCHandle.Alloc(lists, GCHandleType.Pinned);
            try
            {
                Delegates.glCallLists((Int32)n, (OpenTK.Graphics.OpenGL.ListNameType)type, (IntPtr)lists_ptr.AddrOfPinnedObject());
            }
            finally
            {
                lists_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glCallLists")]
        public static
        void CallLists<T2>(Int32 n, OpenTK.Graphics.OpenGL.ListNameType type, [InAttribute, OutAttribute] ref T2 lists)
            where T2 : struct
        {
            GCHandle lists_ptr = GCHandle.Alloc(lists, GCHandleType.Pinned);
            try
            {
                Delegates.glCallLists((Int32)n, (OpenTK.Graphics.OpenGL.ListNameType)type, (IntPtr)lists_ptr.AddrOfPinnedObject());
                lists = (T2)lists_ptr.Target;
            }
            finally
            {
                lists_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glCheckFramebufferStatus")]
        public static
        OpenTK.Graphics.OpenGL.FramebufferErrorCode CheckFramebufferStatus(OpenTK.Graphics.OpenGL.FramebufferTarget target)
        {
            return Delegates.glCheckFramebufferStatus((OpenTK.Graphics.OpenGL.FramebufferTarget)target);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glCheckFramebufferStatus")]
        public static
        OpenTK.Graphics.OpenGL.FramebufferErrorCode CheckFramebufferStatus(int target)
        {
            return Delegates.glCheckFramebufferStatus((OpenTK.Graphics.OpenGL.FramebufferTarget)target);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClampColor")]
        public static
        void ClampColor(OpenTK.Graphics.OpenGL.ClampColorTarget target, OpenTK.Graphics.OpenGL.ClampColorMode clamp)
        {
            Delegates.glClampColor((OpenTK.Graphics.OpenGL.ClampColorTarget)target, (OpenTK.Graphics.OpenGL.ClampColorMode)clamp);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClampColor")]
        public static
        void ClampColor(int target, int clamp)
        {
            Delegates.glClampColor((OpenTK.Graphics.OpenGL.ClampColorTarget)target, (OpenTK.Graphics.OpenGL.ClampColorMode)clamp);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClear")]
        public static
        void Clear(OpenTK.Graphics.OpenGL.ClearBufferMask mask)
        {
            Delegates.glClear((OpenTK.Graphics.OpenGL.ClearBufferMask)mask);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClear")]
        public static
        void Clear(int mask)
        {
            Delegates.glClear((OpenTK.Graphics.OpenGL.ClearBufferMask)mask);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glClearAccum")]
        public static
        void ClearAccum(Single red, Single green, Single blue, Single alpha)
        {
            Delegates.glClearAccum((Single)red, (Single)green, (Single)blue, (Single)alpha);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfi")]
        public static
        void ClearBuffer(OpenTK.Graphics.OpenGL.ClearBuffer buffer, Int32 drawbuffer, Single depth, Int32 stencil)
        {
            Delegates.glClearBufferfi((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (Single)depth, (Int32)stencil);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfi")]
        public static
        void ClearBuffer(int buffer, Int32 drawbuffer, Single depth, Int32 stencil)
        {
            Delegates.glClearBufferfi((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (Single)depth, (Int32)stencil);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        public static
        void ClearBuffer(OpenTK.Graphics.OpenGL.ClearBuffer buffer, Int32 drawbuffer, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glClearBufferfv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        public static
        void ClearBuffer(OpenTK.Graphics.OpenGL.ClearBuffer buffer, Int32 drawbuffer, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glClearBufferfv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        public static
        unsafe void ClearBuffer(OpenTK.Graphics.OpenGL.ClearBuffer buffer, Int32 drawbuffer, Single* value)
        {
            Delegates.glClearBufferfv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (Single*)value);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        public static
        void ClearBuffer(int buffer, Int32 drawbuffer, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glClearBufferfv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        public static
        void ClearBuffer(int buffer, Int32 drawbuffer, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glClearBufferfv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        public static
        unsafe void ClearBuffer(int buffer, Int32 drawbuffer, Single* value)
        {
            Delegates.glClearBufferfv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (Single*)value);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        public static
        void ClearBuffer(OpenTK.Graphics.OpenGL.ClearBuffer buffer, Int32 drawbuffer, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Delegates.glClearBufferiv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (Int32*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        public static
        void ClearBuffer(OpenTK.Graphics.OpenGL.ClearBuffer buffer, Int32 drawbuffer, ref Int32 value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Delegates.glClearBufferiv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (Int32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        public static
        unsafe void ClearBuffer(OpenTK.Graphics.OpenGL.ClearBuffer buffer, Int32 drawbuffer, Int32* value)
        {
            Delegates.glClearBufferiv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (Int32*)value);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        public static
        void ClearBuffer(int buffer, Int32 drawbuffer, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Delegates.glClearBufferiv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (Int32*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        public static
        void ClearBuffer(int buffer, Int32 drawbuffer, ref Int32 value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Delegates.glClearBufferiv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (Int32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        public static
        unsafe void ClearBuffer(int buffer, Int32 drawbuffer, Int32* value)
        {
            Delegates.glClearBufferiv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (Int32*)value);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        public static
        void ClearBuffer(OpenTK.Graphics.OpenGL.ClearBuffer buffer, Int32 drawbuffer, UInt32[] value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = value)
                {
                    Delegates.glClearBufferuiv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        public static
        void ClearBuffer(OpenTK.Graphics.OpenGL.ClearBuffer buffer, Int32 drawbuffer, ref UInt32 value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = &value)
                {
                    Delegates.glClearBufferuiv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        public static
        unsafe void ClearBuffer(OpenTK.Graphics.OpenGL.ClearBuffer buffer, Int32 drawbuffer, UInt32* value)
        {
            Delegates.glClearBufferuiv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (UInt32*)value);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        public static
        void ClearBuffer(int buffer, Int32 drawbuffer, UInt32[] value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = value)
                {
                    Delegates.glClearBufferuiv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        public static
        void ClearBuffer(int buffer, Int32 drawbuffer, ref UInt32 value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = &value)
                {
                    Delegates.glClearBufferuiv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        public static
        unsafe void ClearBuffer(int buffer, Int32 drawbuffer, UInt32* value)
        {
            Delegates.glClearBufferuiv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (UInt32*)value);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearColor")]
        public static
        void ClearColor(Single red, Single green, Single blue, Single alpha)
        {
            Delegates.glClearColor((Single)red, (Single)green, (Single)blue, (Single)alpha);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearDepth")]
        public static
        void ClearDepth(Double depth)
        {
            Delegates.glClearDepth((Double)depth);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glClearIndex")]
        public static
        void ClearIndex(Single c)
        {
            Delegates.glClearIndex((Single)c);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearStencil")]
        public static
        void ClearStencil(Int32 s)
        {
            Delegates.glClearStencil((Int32)s);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glClientActiveTexture")]
        public static
        void ClientActiveTexture(int texture)
        {
            Delegates.glClientActiveTexture((OpenTK.Graphics.OpenGL.TextureUnit)texture);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glClientActiveTexture")]
        public static
        void ClientActiveTexture(OpenTK.Graphics.OpenGL.TextureUnit texture)
        {
            Delegates.glClientActiveTexture((OpenTK.Graphics.OpenGL.TextureUnit)texture);
        }

        [AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glClientWaitSync")]
        public static
        OpenTK.Graphics.OpenGL.ARB_sync ClientWaitSync(IntPtr sync, Int32 flags, Int64 timeout)
        {
            return Delegates.glClientWaitSync((IntPtr)sync, (UInt32)flags, (UInt64)timeout);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glClientWaitSync")]
        public static
        OpenTK.Graphics.OpenGL.ARB_sync ClientWaitSync(IntPtr sync, UInt32 flags, UInt64 timeout)
        {
            return Delegates.glClientWaitSync((IntPtr)sync, (UInt32)flags, (UInt64)timeout);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glClipPlane")]
        public static
        void ClipPlane(OpenTK.Graphics.OpenGL.ClipPlaneName plane, Double[] equation)
        {
            unsafe
            {
                fixed (Double* equation_ptr = equation)
                {
                    Delegates.glClipPlane((OpenTK.Graphics.OpenGL.ClipPlaneName)plane, (Double*)equation_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glClipPlane")]
        public static
        void ClipPlane(OpenTK.Graphics.OpenGL.ClipPlaneName plane, ref Double equation)
        {
            unsafe
            {
                fixed (Double* equation_ptr = &equation)
                {
                    Delegates.glClipPlane((OpenTK.Graphics.OpenGL.ClipPlaneName)plane, (Double*)equation_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glClipPlane")]
        public static
        unsafe void ClipPlane(OpenTK.Graphics.OpenGL.ClipPlaneName plane, Double* equation)
        {
            Delegates.glClipPlane((OpenTK.Graphics.OpenGL.ClipPlaneName)plane, (Double*)equation);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glClipPlane")]
        public static
        void ClipPlane(int plane, Double[] equation)
        {
            unsafe
            {
                fixed (Double* equation_ptr = equation)
                {
                    Delegates.glClipPlane((OpenTK.Graphics.OpenGL.ClipPlaneName)plane, (Double*)equation_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glClipPlane")]
        public static
        void ClipPlane(int plane, ref Double equation)
        {
            unsafe
            {
                fixed (Double* equation_ptr = &equation)
                {
                    Delegates.glClipPlane((OpenTK.Graphics.OpenGL.ClipPlaneName)plane, (Double*)equation_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glClipPlane")]
        public static
        unsafe void ClipPlane(int plane, Double* equation)
        {
            Delegates.glClipPlane((OpenTK.Graphics.OpenGL.ClipPlaneName)plane, (Double*)equation);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3b")]
        public static
        void Color3(SByte red, SByte green, SByte blue)
        {
            Delegates.glColor3b((SByte)red, (SByte)green, (SByte)blue);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3bv")]
        public static
        void Color3(SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Delegates.glColor3bv((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3bv")]
        public static
        void Color3(ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Delegates.glColor3bv((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3bv")]
        public static
        unsafe void Color3(SByte* v)
        {
            Delegates.glColor3bv((SByte*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3d")]
        public static
        void Color3(Double red, Double green, Double blue)
        {
            Delegates.glColor3d((Double)red, (Double)green, (Double)blue);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3dv")]
        public static
        void Color3(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glColor3dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3dv")]
        public static
        void Color3(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glColor3dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3dv")]
        public static
        unsafe void Color3(Double* v)
        {
            Delegates.glColor3dv((Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3f")]
        public static
        void Color3(Single red, Single green, Single blue)
        {
            Delegates.glColor3f((Single)red, (Single)green, (Single)blue);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3fv")]
        public static
        void Color3(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glColor3fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3fv")]
        public static
        void Color3(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glColor3fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3fv")]
        public static
        unsafe void Color3(Single* v)
        {
            Delegates.glColor3fv((Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3i")]
        public static
        void Color3(Int32 red, Int32 green, Int32 blue)
        {
            Delegates.glColor3i((Int32)red, (Int32)green, (Int32)blue);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3iv")]
        public static
        void Color3(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glColor3iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3iv")]
        public static
        void Color3(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glColor3iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3iv")]
        public static
        unsafe void Color3(Int32* v)
        {
            Delegates.glColor3iv((Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3s")]
        public static
        void Color3(Int16 red, Int16 green, Int16 blue)
        {
            Delegates.glColor3s((Int16)red, (Int16)green, (Int16)blue);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3sv")]
        public static
        void Color3(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glColor3sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3sv")]
        public static
        void Color3(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glColor3sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3sv")]
        public static
        unsafe void Color3(Int16* v)
        {
            Delegates.glColor3sv((Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3ub")]
        public static
        void Color3(Byte red, Byte green, Byte blue)
        {
            Delegates.glColor3ub((Byte)red, (Byte)green, (Byte)blue);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3ubv")]
        public static
        void Color3(Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glColor3ubv((Byte*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3ubv")]
        public static
        void Color3(ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glColor3ubv((Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3ubv")]
        public static
        unsafe void Color3(Byte* v)
        {
            Delegates.glColor3ubv((Byte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3ui")]
        public static
        void Color3(UInt32 red, UInt32 green, UInt32 blue)
        {
            Delegates.glColor3ui((UInt32)red, (UInt32)green, (UInt32)blue);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3uiv")]
        public static
        void Color3(UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glColor3uiv((UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3uiv")]
        public static
        void Color3(ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glColor3uiv((UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3uiv")]
        public static
        unsafe void Color3(UInt32* v)
        {
            Delegates.glColor3uiv((UInt32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3us")]
        public static
        void Color3(UInt16 red, UInt16 green, UInt16 blue)
        {
            Delegates.glColor3us((UInt16)red, (UInt16)green, (UInt16)blue);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3usv")]
        public static
        void Color3(UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Delegates.glColor3usv((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3usv")]
        public static
        void Color3(ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Delegates.glColor3usv((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3usv")]
        public static
        unsafe void Color3(UInt16* v)
        {
            Delegates.glColor3usv((UInt16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4b")]
        public static
        void Color4(SByte red, SByte green, SByte blue, SByte alpha)
        {
            Delegates.glColor4b((SByte)red, (SByte)green, (SByte)blue, (SByte)alpha);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4bv")]
        public static
        void Color4(SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Delegates.glColor4bv((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4bv")]
        public static
        void Color4(ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Delegates.glColor4bv((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4bv")]
        public static
        unsafe void Color4(SByte* v)
        {
            Delegates.glColor4bv((SByte*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4d")]
        public static
        void Color4(Double red, Double green, Double blue, Double alpha)
        {
            Delegates.glColor4d((Double)red, (Double)green, (Double)blue, (Double)alpha);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4dv")]
        public static
        void Color4(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glColor4dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4dv")]
        public static
        void Color4(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glColor4dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4dv")]
        public static
        unsafe void Color4(Double* v)
        {
            Delegates.glColor4dv((Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4f")]
        public static
        void Color4(Single red, Single green, Single blue, Single alpha)
        {
            Delegates.glColor4f((Single)red, (Single)green, (Single)blue, (Single)alpha);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4fv")]
        public static
        void Color4(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glColor4fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4fv")]
        public static
        void Color4(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glColor4fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4fv")]
        public static
        unsafe void Color4(Single* v)
        {
            Delegates.glColor4fv((Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4i")]
        public static
        void Color4(Int32 red, Int32 green, Int32 blue, Int32 alpha)
        {
            Delegates.glColor4i((Int32)red, (Int32)green, (Int32)blue, (Int32)alpha);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4iv")]
        public static
        void Color4(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glColor4iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4iv")]
        public static
        void Color4(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glColor4iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4iv")]
        public static
        unsafe void Color4(Int32* v)
        {
            Delegates.glColor4iv((Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4s")]
        public static
        void Color4(Int16 red, Int16 green, Int16 blue, Int16 alpha)
        {
            Delegates.glColor4s((Int16)red, (Int16)green, (Int16)blue, (Int16)alpha);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4sv")]
        public static
        void Color4(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glColor4sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4sv")]
        public static
        void Color4(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glColor4sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4sv")]
        public static
        unsafe void Color4(Int16* v)
        {
            Delegates.glColor4sv((Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4ub")]
        public static
        void Color4(Byte red, Byte green, Byte blue, Byte alpha)
        {
            Delegates.glColor4ub((Byte)red, (Byte)green, (Byte)blue, (Byte)alpha);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4ubv")]
        public static
        void Color4(Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glColor4ubv((Byte*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4ubv")]
        public static
        void Color4(ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glColor4ubv((Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4ubv")]
        public static
        unsafe void Color4(Byte* v)
        {
            Delegates.glColor4ubv((Byte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4ui")]
        public static
        void Color4(UInt32 red, UInt32 green, UInt32 blue, UInt32 alpha)
        {
            Delegates.glColor4ui((UInt32)red, (UInt32)green, (UInt32)blue, (UInt32)alpha);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4uiv")]
        public static
        void Color4(UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glColor4uiv((UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4uiv")]
        public static
        void Color4(ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glColor4uiv((UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4uiv")]
        public static
        unsafe void Color4(UInt32* v)
        {
            Delegates.glColor4uiv((UInt32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4us")]
        public static
        void Color4(UInt16 red, UInt16 green, UInt16 blue, UInt16 alpha)
        {
            Delegates.glColor4us((UInt16)red, (UInt16)green, (UInt16)blue, (UInt16)alpha);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4usv")]
        public static
        void Color4(UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Delegates.glColor4usv((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4usv")]
        public static
        void Color4(ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Delegates.glColor4usv((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4usv")]
        public static
        unsafe void Color4(UInt16* v)
        {
            Delegates.glColor4usv((UInt16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColorMask")]
        public static
        void ColorMask(bool red, bool green, bool blue, bool alpha)
        {
            Delegates.glColorMask((bool)red, (bool)green, (bool)blue, (bool)alpha);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glColorMaski")]
        public static
        void ColorMask(Int32 index, bool r, bool g, bool b, bool a)
        {
            Delegates.glColorMaski((UInt32)index, (bool)r, (bool)g, (bool)b, (bool)a);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glColorMaski")]
        public static
        void ColorMask(UInt32 index, bool r, bool g, bool b, bool a)
        {
            Delegates.glColorMaski((UInt32)index, (bool)r, (bool)g, (bool)b, (bool)a);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColorMaterial")]
        public static
        void ColorMaterial(int face, int mode)
        {
            Delegates.glColorMaterial((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.ColorMaterialParameter)mode);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColorMaterial")]
        public static
        void ColorMaterial(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.ColorMaterialParameter mode)
        {
            Delegates.glColorMaterial((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.ColorMaterialParameter)mode);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glColorPointer")]
        public static
        void ColorPointer(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, IntPtr pointer)
        {
            Delegates.glColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glColorPointer")]
        public static
        void ColorPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glColorPointer")]
        public static
        void ColorPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glColorPointer")]
        public static
        void ColorPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glColorPointer")]
        public static
        void ColorPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T3)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glColorPointer")]
        public static
        void ColorPointer(Int32 size, int type, Int32 stride, IntPtr pointer)
        {
            Delegates.glColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glColorPointer")]
        public static
        void ColorPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glColorPointer")]
        public static
        void ColorPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glColorPointer")]
        public static
        void ColorPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glColorPointer")]
        public static
        void ColorPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T3)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorSubTable")]
        public static
        void ColorSubTable(OpenTK.Graphics.OpenGL.ColorTableTarget target, Int32 start, Int32 count, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr data)
        {
            Delegates.glColorSubTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorSubTable")]
        public static
        void ColorSubTable<T5>(OpenTK.Graphics.OpenGL.ColorTableTarget target, Int32 start, Int32 count, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[] data)
            where T5 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glColorSubTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorSubTable")]
        public static
        void ColorSubTable<T5>(OpenTK.Graphics.OpenGL.ColorTableTarget target, Int32 start, Int32 count, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[,] data)
            where T5 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glColorSubTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorSubTable")]
        public static
        void ColorSubTable<T5>(OpenTK.Graphics.OpenGL.ColorTableTarget target, Int32 start, Int32 count, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[,,] data)
            where T5 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glColorSubTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorSubTable")]
        public static
        void ColorSubTable<T5>(OpenTK.Graphics.OpenGL.ColorTableTarget target, Int32 start, Int32 count, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T5 data)
            where T5 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glColorSubTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T5)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorSubTable")]
        public static
        void ColorSubTable(int target, Int32 start, Int32 count, int format, int type, IntPtr data)
        {
            Delegates.glColorSubTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorSubTable")]
        public static
        void ColorSubTable<T5>(int target, Int32 start, Int32 count, int format, int type, [InAttribute, OutAttribute] T5[] data)
            where T5 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glColorSubTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorSubTable")]
        public static
        void ColorSubTable<T5>(int target, Int32 start, Int32 count, int format, int type, [InAttribute, OutAttribute] T5[,] data)
            where T5 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glColorSubTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorSubTable")]
        public static
        void ColorSubTable<T5>(int target, Int32 start, Int32 count, int format, int type, [InAttribute, OutAttribute] T5[,,] data)
            where T5 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glColorSubTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorSubTable")]
        public static
        void ColorSubTable<T5>(int target, Int32 start, Int32 count, int format, int type, [InAttribute, OutAttribute] ref T5 data)
            where T5 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glColorSubTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T5)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTable")]
        public static
        void ColorTable(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr table)
        {
            Delegates.glColorTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTable")]
        public static
        void ColorTable<T5>(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[] table)
            where T5 : struct
        {
            GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
            }
            finally
            {
                table_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTable")]
        public static
        void ColorTable<T5>(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[,] table)
            where T5 : struct
        {
            GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
            }
            finally
            {
                table_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTable")]
        public static
        void ColorTable<T5>(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[,,] table)
            where T5 : struct
        {
            GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
            }
            finally
            {
                table_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTable")]
        public static
        void ColorTable<T5>(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T5 table)
            where T5 : struct
        {
            GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                table = (T5)table_ptr.Target;
            }
            finally
            {
                table_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTable")]
        public static
        void ColorTable(int target, int internalformat, Int32 width, int format, int type, IntPtr table)
        {
            Delegates.glColorTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTable")]
        public static
        void ColorTable<T5>(int target, int internalformat, Int32 width, int format, int type, [InAttribute, OutAttribute] T5[] table)
            where T5 : struct
        {
            GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
            }
            finally
            {
                table_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTable")]
        public static
        void ColorTable<T5>(int target, int internalformat, Int32 width, int format, int type, [InAttribute, OutAttribute] T5[,] table)
            where T5 : struct
        {
            GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
            }
            finally
            {
                table_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTable")]
        public static
        void ColorTable<T5>(int target, int internalformat, Int32 width, int format, int type, [InAttribute, OutAttribute] T5[,,] table)
            where T5 : struct
        {
            GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
            }
            finally
            {
                table_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTable")]
        public static
        void ColorTable<T5>(int target, int internalformat, Int32 width, int format, int type, [InAttribute, OutAttribute] ref T5 table)
            where T5 : struct
        {
            GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                table = (T5)table_ptr.Target;
            }
            finally
            {
                table_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTableParameterfv")]
        public static
        void ColorTableParameter(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.ColorTableParameterPName pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glColorTableParameterfv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.ColorTableParameterPName)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTableParameterfv")]
        public static
        void ColorTableParameter(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.ColorTableParameterPName pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glColorTableParameterfv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.ColorTableParameterPName)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTableParameterfv")]
        public static
        unsafe void ColorTableParameter(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.ColorTableParameterPName pname, Single* @params)
        {
            Delegates.glColorTableParameterfv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.ColorTableParameterPName)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTableParameterfv")]
        public static
        void ColorTableParameter(int target, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glColorTableParameterfv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.ColorTableParameterPName)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTableParameterfv")]
        public static
        void ColorTableParameter(int target, int pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glColorTableParameterfv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.ColorTableParameterPName)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTableParameterfv")]
        public static
        unsafe void ColorTableParameter(int target, int pname, Single* @params)
        {
            Delegates.glColorTableParameterfv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.ColorTableParameterPName)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTableParameteriv")]
        public static
        void ColorTableParameter(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.ColorTableParameterPName pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glColorTableParameteriv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.ColorTableParameterPName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTableParameteriv")]
        public static
        void ColorTableParameter(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.ColorTableParameterPName pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glColorTableParameteriv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.ColorTableParameterPName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTableParameteriv")]
        public static
        unsafe void ColorTableParameter(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.ColorTableParameterPName pname, Int32* @params)
        {
            Delegates.glColorTableParameteriv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.ColorTableParameterPName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTableParameteriv")]
        public static
        void ColorTableParameter(int target, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glColorTableParameteriv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.ColorTableParameterPName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTableParameteriv")]
        public static
        void ColorTableParameter(int target, int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glColorTableParameteriv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.ColorTableParameterPName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTableParameteriv")]
        public static
        unsafe void ColorTableParameter(int target, int pname, Int32* @params)
        {
            Delegates.glColorTableParameteriv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.ColorTableParameterPName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCompileShader")]
        public static
        void CompileShader(Int32 shader)
        {
            Delegates.glCompileShader((UInt32)shader);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCompileShader")]
        public static
        void CompileShader(UInt32 shader)
        {
            Delegates.glCompileShader((UInt32)shader);
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static
        void CompressedTexImage1D(int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr data)
        {
            Delegates.glCompressedTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data);
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static
        void CompressedTexImage1D<T6>(int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T6[] data)
            where T6 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static
        void CompressedTexImage1D<T6>(int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T6[,] data)
            where T6 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static
        void CompressedTexImage1D<T6>(int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T6[,,] data)
            where T6 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static
        void CompressedTexImage1D<T6>(int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T6 data)
            where T6 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T6)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static
        void CompressedTexImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr data)
        {
            Delegates.glCompressedTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data);
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static
        void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T6[] data)
            where T6 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static
        void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T6[,] data)
            where T6 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static
        void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T6[,,] data)
            where T6 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static
        void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T6 data)
            where T6 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T6)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static
        void CompressedTexImage2D(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data)
        {
            Delegates.glCompressedTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data);
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static
        void CompressedTexImage2D<T7>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[] data)
            where T7 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static
        void CompressedTexImage2D<T7>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,] data)
            where T7 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static
        void CompressedTexImage2D<T7>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] data)
            where T7 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static
        void CompressedTexImage2D<T7>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T7 data)
            where T7 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T7)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static
        void CompressedTexImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data)
        {
            Delegates.glCompressedTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data);
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static
        void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[] data)
            where T7 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static
        void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,] data)
            where T7 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static
        void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] data)
            where T7 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static
        void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T7 data)
            where T7 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T7)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static
        void CompressedTexImage3D(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data)
        {
            Delegates.glCompressedTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data);
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static
        void CompressedTexImage3D<T8>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static
        void CompressedTexImage3D<T8>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static
        void CompressedTexImage3D<T8>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
            where T8 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static
        void CompressedTexImage3D<T8>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T8)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static
        void CompressedTexImage3D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data)
        {
            Delegates.glCompressedTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data);
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static
        void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static
        void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static
        void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
            where T8 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static
        void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T8)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static
        void CompressedTexSubImage1D(int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, IntPtr data)
        {
            Delegates.glCompressedTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static
        void CompressedTexSubImage1D<T6>(int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [InAttribute, OutAttribute] T6[] data)
            where T6 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static
        void CompressedTexSubImage1D<T6>(int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [InAttribute, OutAttribute] T6[,] data)
            where T6 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static
        void CompressedTexSubImage1D<T6>(int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [InAttribute, OutAttribute] T6[,,] data)
            where T6 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static
        void CompressedTexSubImage1D<T6>(int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [InAttribute, OutAttribute] ref T6 data)
            where T6 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T6)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static
        void CompressedTexSubImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, IntPtr data)
        {
            Delegates.glCompressedTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static
        void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T6[] data)
            where T6 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static
        void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T6[,] data)
            where T6 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static
        void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T6[,,] data)
            where T6 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static
        void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T6 data)
            where T6 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T6)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static
        void CompressedTexSubImage2D(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, IntPtr data)
        {
            Delegates.glCompressedTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static
        void CompressedTexSubImage2D<T8>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static
        void CompressedTexSubImage2D<T8>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static
        void CompressedTexSubImage2D<T8>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
            where T8 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static
        void CompressedTexSubImage2D<T8>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T8)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static
        void CompressedTexSubImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, IntPtr data)
        {
            Delegates.glCompressedTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static
        void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static
        void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static
        void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
            where T8 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static
        void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T8)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static
        void CompressedTexSubImage3D(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, IntPtr data)
        {
            Delegates.glCompressedTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static
        void CompressedTexSubImage3D<T10>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [InAttribute, OutAttribute] T10[] data)
            where T10 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static
        void CompressedTexSubImage3D<T10>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [InAttribute, OutAttribute] T10[,] data)
            where T10 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static
        void CompressedTexSubImage3D<T10>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [InAttribute, OutAttribute] T10[,,] data)
            where T10 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static
        void CompressedTexSubImage3D<T10>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [InAttribute, OutAttribute] ref T10 data)
            where T10 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T10)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static
        void CompressedTexSubImage3D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, IntPtr data)
        {
            Delegates.glCompressedTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static
        void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[] data)
            where T10 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static
        void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[,] data)
            where T10 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static
        void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[,,] data)
            where T10 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static
        void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T10 data)
            where T10 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T10)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter1D")]
        public static
        void ConvolutionFilter1D(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr image)
        {
            Delegates.glConvolutionFilter1D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter1D")]
        public static
        void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[] image)
            where T5 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter1D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter1D")]
        public static
        void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[,] image)
            where T5 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter1D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter1D")]
        public static
        void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[,,] image)
            where T5 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter1D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter1D")]
        public static
        void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T5 image)
            where T5 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter1D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                image = (T5)image_ptr.Target;
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter1D")]
        public static
        void ConvolutionFilter1D(int target, int internalformat, Int32 width, int format, int type, IntPtr image)
        {
            Delegates.glConvolutionFilter1D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter1D")]
        public static
        void ConvolutionFilter1D<T5>(int target, int internalformat, Int32 width, int format, int type, [InAttribute, OutAttribute] T5[] image)
            where T5 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter1D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter1D")]
        public static
        void ConvolutionFilter1D<T5>(int target, int internalformat, Int32 width, int format, int type, [InAttribute, OutAttribute] T5[,] image)
            where T5 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter1D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter1D")]
        public static
        void ConvolutionFilter1D<T5>(int target, int internalformat, Int32 width, int format, int type, [InAttribute, OutAttribute] T5[,,] image)
            where T5 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter1D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter1D")]
        public static
        void ConvolutionFilter1D<T5>(int target, int internalformat, Int32 width, int format, int type, [InAttribute, OutAttribute] ref T5 image)
            where T5 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter1D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                image = (T5)image_ptr.Target;
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter2D")]
        public static
        void ConvolutionFilter2D(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr image)
        {
            Delegates.glConvolutionFilter2D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter2D")]
        public static
        void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[] image)
            where T6 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter2D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter2D")]
        public static
        void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,] image)
            where T6 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter2D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter2D")]
        public static
        void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,,] image)
            where T6 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter2D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter2D")]
        public static
        void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T6 image)
            where T6 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter2D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                image = (T6)image_ptr.Target;
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter2D")]
        public static
        void ConvolutionFilter2D(int target, int internalformat, Int32 width, Int32 height, int format, int type, IntPtr image)
        {
            Delegates.glConvolutionFilter2D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter2D")]
        public static
        void ConvolutionFilter2D<T6>(int target, int internalformat, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T6[] image)
            where T6 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter2D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter2D")]
        public static
        void ConvolutionFilter2D<T6>(int target, int internalformat, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T6[,] image)
            where T6 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter2D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter2D")]
        public static
        void ConvolutionFilter2D<T6>(int target, int internalformat, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T6[,,] image)
            where T6 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter2D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter2D")]
        public static
        void ConvolutionFilter2D<T6>(int target, int internalformat, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] ref T6 image)
            where T6 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter2D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                image = (T6)image_ptr.Target;
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionParameterf")]
        public static
        void ConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.ConvolutionParameter pname, Single @params)
        {
            Delegates.glConvolutionParameterf((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.ConvolutionParameter)pname, (Single)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionParameterf")]
        public static
        void ConvolutionParameter(int target, int pname, Single @params)
        {
            Delegates.glConvolutionParameterf((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.ConvolutionParameter)pname, (Single)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionParameterfv")]
        public static
        void ConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.ConvolutionParameter pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glConvolutionParameterfv((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.ConvolutionParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionParameterfv")]
        public static
        unsafe void ConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.ConvolutionParameter pname, Single* @params)
        {
            Delegates.glConvolutionParameterfv((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.ConvolutionParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionParameterfv")]
        public static
        void ConvolutionParameter(int target, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glConvolutionParameterfv((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.ConvolutionParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionParameterfv")]
        public static
        unsafe void ConvolutionParameter(int target, int pname, Single* @params)
        {
            Delegates.glConvolutionParameterfv((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.ConvolutionParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionParameteri")]
        public static
        void ConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.ConvolutionParameter pname, Int32 @params)
        {
            Delegates.glConvolutionParameteri((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.ConvolutionParameter)pname, (Int32)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionParameteri")]
        public static
        void ConvolutionParameter(int target, int pname, Int32 @params)
        {
            Delegates.glConvolutionParameteri((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.ConvolutionParameter)pname, (Int32)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionParameteriv")]
        public static
        void ConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.ConvolutionParameter pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glConvolutionParameteriv((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.ConvolutionParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionParameteriv")]
        public static
        unsafe void ConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.ConvolutionParameter pname, Int32* @params)
        {
            Delegates.glConvolutionParameteriv((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.ConvolutionParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionParameteriv")]
        public static
        void ConvolutionParameter(int target, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glConvolutionParameteriv((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.ConvolutionParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionParameteriv")]
        public static
        unsafe void ConvolutionParameter(int target, int pname, Int32* @params)
        {
            Delegates.glConvolutionParameteriv((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.ConvolutionParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "ARB_copy_buffer", Version = "3.0", EntryPoint = "glCopyBufferSubData")]
        public static
        void CopyBufferSubData(OpenTK.Graphics.OpenGL.BufferTarget readTarget, OpenTK.Graphics.OpenGL.BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
        {
            Delegates.glCopyBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)readTarget, (OpenTK.Graphics.OpenGL.BufferTarget)writeTarget, (IntPtr)readOffset, (IntPtr)writeOffset, (IntPtr)size);
        }

        [AutoGenerated(Category = "ARB_copy_buffer", Version = "3.0", EntryPoint = "glCopyBufferSubData")]
        public static
        void CopyBufferSubData(int readTarget, int writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
        {
            Delegates.glCopyBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)readTarget, (OpenTK.Graphics.OpenGL.BufferTarget)writeTarget, (IntPtr)readOffset, (IntPtr)writeOffset, (IntPtr)size);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glCopyColorSubTable")]
        public static
        void CopyColorSubTable(OpenTK.Graphics.OpenGL.ColorTableTarget target, Int32 start, Int32 x, Int32 y, Int32 width)
        {
            Delegates.glCopyColorSubTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)x, (Int32)y, (Int32)width);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glCopyColorSubTable")]
        public static
        void CopyColorSubTable(int target, Int32 start, Int32 x, Int32 y, Int32 width)
        {
            Delegates.glCopyColorSubTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)x, (Int32)y, (Int32)width);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glCopyColorTable")]
        public static
        void CopyColorTable(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width)
        {
            Delegates.glCopyColorTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glCopyColorTable")]
        public static
        void CopyColorTable(int target, int internalformat, Int32 x, Int32 y, Int32 width)
        {
            Delegates.glCopyColorTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glCopyConvolutionFilter1D")]
        public static
        void CopyConvolutionFilter1D(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width)
        {
            Delegates.glCopyConvolutionFilter1D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glCopyConvolutionFilter1D")]
        public static
        void CopyConvolutionFilter1D(int target, int internalformat, Int32 x, Int32 y, Int32 width)
        {
            Delegates.glCopyConvolutionFilter1D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glCopyConvolutionFilter2D")]
        public static
        void CopyConvolutionFilter2D(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            Delegates.glCopyConvolutionFilter2D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glCopyConvolutionFilter2D")]
        public static
        void CopyConvolutionFilter2D(int target, int internalformat, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            Delegates.glCopyConvolutionFilter2D((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glCopyPixels")]
        public static
        void CopyPixels(Int32 x, Int32 y, Int32 width, Int32 height, int type)
        {
            Delegates.glCopyPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelCopyType)type);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glCopyPixels")]
        public static
        void CopyPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelCopyType type)
        {
            Delegates.glCopyPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelCopyType)type);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexImage1D")]
        public static
        void CopyTexImage1D(int target, Int32 level, int internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
        {
            Delegates.glCopyTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexImage1D")]
        public static
        void CopyTexImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
        {
            Delegates.glCopyTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexImage2D")]
        public static
        void CopyTexImage2D(int target, Int32 level, int internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
        {
            Delegates.glCopyTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexImage2D")]
        public static
        void CopyTexImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
        {
            Delegates.glCopyTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexSubImage1D")]
        public static
        void CopyTexSubImage1D(int target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
        {
            Delegates.glCopyTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexSubImage1D")]
        public static
        void CopyTexSubImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
        {
            Delegates.glCopyTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexSubImage2D")]
        public static
        void CopyTexSubImage2D(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            Delegates.glCopyTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexSubImage2D")]
        public static
        void CopyTexSubImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            Delegates.glCopyTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glCopyTexSubImage3D")]
        public static
        void CopyTexSubImage3D(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            Delegates.glCopyTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glCopyTexSubImage3D")]
        public static
        void CopyTexSubImage3D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            Delegates.glCopyTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCreateProgram")]
        public static
        Int32 CreateProgram()
        {
            return Delegates.glCreateProgram();
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCreateShader")]
        public static
        Int32 CreateShader(int type)
        {
            return Delegates.glCreateShader((OpenTK.Graphics.OpenGL.ShaderType)type);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCreateShader")]
        public static
        Int32 CreateShader(OpenTK.Graphics.OpenGL.ShaderType type)
        {
            return Delegates.glCreateShader((OpenTK.Graphics.OpenGL.ShaderType)type);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glCullFace")]
        public static
        void CullFace(OpenTK.Graphics.OpenGL.CullFaceMode mode)
        {
            Delegates.glCullFace((OpenTK.Graphics.OpenGL.CullFaceMode)mode);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glCullFace")]
        public static
        void CullFace(int mode)
        {
            Delegates.glCullFace((OpenTK.Graphics.OpenGL.CullFaceMode)mode);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static
        void DeleteBuffers(Int32 n, Int32[] buffers)
        {
            unsafe
            {
                fixed (Int32* buffers_ptr = buffers)
                {
                    Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static
        void DeleteBuffers(Int32 n, ref Int32 buffers)
        {
            unsafe
            {
                fixed (Int32* buffers_ptr = &buffers)
                {
                    Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static
        unsafe void DeleteBuffers(Int32 n, Int32* buffers)
        {
            Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static
        void DeleteBuffers(Int32 n, UInt32[] buffers)
        {
            unsafe
            {
                fixed (UInt32* buffers_ptr = buffers)
                {
                    Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static
        void DeleteBuffers(Int32 n, ref UInt32 buffers)
        {
            unsafe
            {
                fixed (UInt32* buffers_ptr = &buffers)
                {
                    Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static
        unsafe void DeleteBuffers(Int32 n, UInt32* buffers)
        {
            Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static
        void DeleteFramebuffers(Int32 n, Int32[] framebuffers)
        {
            unsafe
            {
                fixed (Int32* framebuffers_ptr = framebuffers)
                {
                    Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static
        void DeleteFramebuffers(Int32 n, ref Int32 framebuffers)
        {
            unsafe
            {
                fixed (Int32* framebuffers_ptr = &framebuffers)
                {
                    Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static
        unsafe void DeleteFramebuffers(Int32 n, Int32* framebuffers)
        {
            Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static
        void DeleteFramebuffers(Int32 n, UInt32[] framebuffers)
        {
            unsafe
            {
                fixed (UInt32* framebuffers_ptr = framebuffers)
                {
                    Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static
        void DeleteFramebuffers(Int32 n, ref UInt32 framebuffers)
        {
            unsafe
            {
                fixed (UInt32* framebuffers_ptr = &framebuffers)
                {
                    Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static
        unsafe void DeleteFramebuffers(Int32 n, UInt32* framebuffers)
        {
            Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glDeleteLists")]
        public static
        void DeleteLists(Int32 list, Int32 range)
        {
            Delegates.glDeleteLists((UInt32)list, (Int32)range);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glDeleteLists")]
        public static
        void DeleteLists(UInt32 list, Int32 range)
        {
            Delegates.glDeleteLists((UInt32)list, (Int32)range);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteProgram")]
        public static
        void DeleteProgram(Int32 program)
        {
            Delegates.glDeleteProgram((UInt32)program);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteProgram")]
        public static
        void DeleteProgram(UInt32 program)
        {
            Delegates.glDeleteProgram((UInt32)program);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static
        void DeleteQueries(Int32 n, Int32[] ids)
        {
            unsafe
            {
                fixed (Int32* ids_ptr = ids)
                {
                    Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static
        void DeleteQueries(Int32 n, ref Int32 ids)
        {
            unsafe
            {
                fixed (Int32* ids_ptr = &ids)
                {
                    Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static
        unsafe void DeleteQueries(Int32 n, Int32* ids)
        {
            Delegates.glDeleteQueries((Int32)n, (UInt32*)ids);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static
        void DeleteQueries(Int32 n, UInt32[] ids)
        {
            unsafe
            {
                fixed (UInt32* ids_ptr = ids)
                {
                    Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static
        void DeleteQueries(Int32 n, ref UInt32 ids)
        {
            unsafe
            {
                fixed (UInt32* ids_ptr = &ids)
                {
                    Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static
        unsafe void DeleteQueries(Int32 n, UInt32* ids)
        {
            Delegates.glDeleteQueries((Int32)n, (UInt32*)ids);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static
        void DeleteRenderbuffers(Int32 n, Int32[] renderbuffers)
        {
            unsafe
            {
                fixed (Int32* renderbuffers_ptr = renderbuffers)
                {
                    Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static
        void DeleteRenderbuffers(Int32 n, ref Int32 renderbuffers)
        {
            unsafe
            {
                fixed (Int32* renderbuffers_ptr = &renderbuffers)
                {
                    Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static
        unsafe void DeleteRenderbuffers(Int32 n, Int32* renderbuffers)
        {
            Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static
        void DeleteRenderbuffers(Int32 n, UInt32[] renderbuffers)
        {
            unsafe
            {
                fixed (UInt32* renderbuffers_ptr = renderbuffers)
                {
                    Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static
        void DeleteRenderbuffers(Int32 n, ref UInt32 renderbuffers)
        {
            unsafe
            {
                fixed (UInt32* renderbuffers_ptr = &renderbuffers)
                {
                    Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static
        unsafe void DeleteRenderbuffers(Int32 n, UInt32* renderbuffers)
        {
            Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteShader")]
        public static
        void DeleteShader(Int32 shader)
        {
            Delegates.glDeleteShader((UInt32)shader);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteShader")]
        public static
        void DeleteShader(UInt32 shader)
        {
            Delegates.glDeleteShader((UInt32)shader);
        }

        [AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glDeleteSync")]
        public static
        void DeleteSync(IntPtr sync)
        {
            Delegates.glDeleteSync((IntPtr)sync);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static
        void DeleteTextures(Int32 n, Int32[] textures)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = textures)
                {
                    Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static
        void DeleteTextures(Int32 n, ref Int32 textures)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = &textures)
                {
                    Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static
        unsafe void DeleteTextures(Int32 n, Int32* textures)
        {
            Delegates.glDeleteTextures((Int32)n, (UInt32*)textures);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static
        void DeleteTextures(Int32 n, UInt32[] textures)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = textures)
                {
                    Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static
        void DeleteTextures(Int32 n, ref UInt32 textures)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = &textures)
                {
                    Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static
        unsafe void DeleteTextures(Int32 n, UInt32* textures)
        {
            Delegates.glDeleteTextures((Int32)n, (UInt32*)textures);
        }

        [AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static
        void DeleteVertexArrays(Int32 n, Int32[] arrays)
        {
            unsafe
            {
                fixed (Int32* arrays_ptr = arrays)
                {
                    Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static
        void DeleteVertexArrays(Int32 n, ref Int32 arrays)
        {
            unsafe
            {
                fixed (Int32* arrays_ptr = &arrays)
                {
                    Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static
        unsafe void DeleteVertexArrays(Int32 n, Int32* arrays)
        {
            Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static
        void DeleteVertexArrays(Int32 n, UInt32[] arrays)
        {
            unsafe
            {
                fixed (UInt32* arrays_ptr = arrays)
                {
                    Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static
        void DeleteVertexArrays(Int32 n, ref UInt32 arrays)
        {
            unsafe
            {
                fixed (UInt32* arrays_ptr = &arrays)
                {
                    Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static
        unsafe void DeleteVertexArrays(Int32 n, UInt32* arrays)
        {
            Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDepthFunc")]
        public static
        void DepthFunc(OpenTK.Graphics.OpenGL.DepthFunction func)
        {
            Delegates.glDepthFunc((OpenTK.Graphics.OpenGL.DepthFunction)func);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDepthFunc")]
        public static
        void DepthFunc(int func)
        {
            Delegates.glDepthFunc((OpenTK.Graphics.OpenGL.DepthFunction)func);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDepthMask")]
        public static
        void DepthMask(bool flag)
        {
            Delegates.glDepthMask((bool)flag);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDepthRange")]
        public static
        void DepthRange(Double near, Double far)
        {
            Delegates.glDepthRange((Double)near, (Double)far);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDetachShader")]
        public static
        void DetachShader(Int32 program, Int32 shader)
        {
            Delegates.glDetachShader((UInt32)program, (UInt32)shader);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDetachShader")]
        public static
        void DetachShader(UInt32 program, UInt32 shader)
        {
            Delegates.glDetachShader((UInt32)program, (UInt32)shader);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDisable")]
        public static
        void Disable(OpenTK.Graphics.OpenGL.EnableCap cap)
        {
            Delegates.glDisable((OpenTK.Graphics.OpenGL.EnableCap)cap);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDisable")]
        public static
        void Disable(int cap)
        {
            Delegates.glDisable((OpenTK.Graphics.OpenGL.EnableCap)cap);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glDisableClientState")]
        public static
        void DisableClientState(OpenTK.Graphics.OpenGL.ArrayCap array)
        {
            Delegates.glDisableClientState((OpenTK.Graphics.OpenGL.ArrayCap)array);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glDisableClientState")]
        public static
        void DisableClientState(int array)
        {
            Delegates.glDisableClientState((OpenTK.Graphics.OpenGL.ArrayCap)array);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glDisablei")]
        public static
        void Disable(OpenTK.Graphics.OpenGL.IndexedEnableCap target, Int32 index)
        {
            Delegates.glDisablei((OpenTK.Graphics.OpenGL.IndexedEnableCap)target, (UInt32)index);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glDisablei")]
        public static
        void Disable(OpenTK.Graphics.OpenGL.IndexedEnableCap target, UInt32 index)
        {
            Delegates.glDisablei((OpenTK.Graphics.OpenGL.IndexedEnableCap)target, (UInt32)index);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glDisablei")]
        public static
        void Disable(int target, Int32 index)
        {
            Delegates.glDisablei((OpenTK.Graphics.OpenGL.IndexedEnableCap)target, (UInt32)index);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glDisablei")]
        public static
        void Disable(int target, UInt32 index)
        {
            Delegates.glDisablei((OpenTK.Graphics.OpenGL.IndexedEnableCap)target, (UInt32)index);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDisableVertexAttribArray")]
        public static
        void DisableVertexAttribArray(Int32 index)
        {
            Delegates.glDisableVertexAttribArray((UInt32)index);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDisableVertexAttribArray")]
        public static
        void DisableVertexAttribArray(UInt32 index)
        {
            Delegates.glDisableVertexAttribArray((UInt32)index);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawArrays")]
        public static
        void DrawArrays(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 first, Int32 count)
        {
            Delegates.glDrawArrays((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)first, (Int32)count);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawArrays")]
        public static
        void DrawArrays(int mode, Int32 first, Int32 count)
        {
            Delegates.glDrawArrays((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)first, (Int32)count);
        }

        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawArraysInstanced")]
        public static
        void DrawArraysInstanced(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 first, Int32 count, Int32 primcount)
        {
            Delegates.glDrawArraysInstanced((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)first, (Int32)count, (Int32)primcount);
        }

        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawArraysInstanced")]
        public static
        void DrawArraysInstanced(int mode, Int32 first, Int32 count, Int32 primcount)
        {
            Delegates.glDrawArraysInstanced((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)first, (Int32)count, (Int32)primcount);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDrawBuffer")]
        public static
        void DrawBuffer(OpenTK.Graphics.OpenGL.DrawBufferMode mode)
        {
            Delegates.glDrawBuffer((OpenTK.Graphics.OpenGL.DrawBufferMode)mode);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDrawBuffer")]
        public static
        void DrawBuffer(int mode)
        {
            Delegates.glDrawBuffer((OpenTK.Graphics.OpenGL.DrawBufferMode)mode);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDrawBuffers")]
        public static
        void DrawBuffers(Int32 n, OpenTK.Graphics.OpenGL.DrawBuffersEnum[] bufs)
        {
            unsafe
            {
                fixed (OpenTK.Graphics.OpenGL.DrawBuffersEnum* bufs_ptr = bufs)
                {
                    Delegates.glDrawBuffers((Int32)n, (OpenTK.Graphics.OpenGL.DrawBuffersEnum*)bufs_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDrawBuffers")]
        public static
        void DrawBuffers(Int32 n, ref OpenTK.Graphics.OpenGL.DrawBuffersEnum bufs)
        {
            unsafe
            {
                fixed (OpenTK.Graphics.OpenGL.DrawBuffersEnum* bufs_ptr = &bufs)
                {
                    Delegates.glDrawBuffers((Int32)n, (OpenTK.Graphics.OpenGL.DrawBuffersEnum*)bufs_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDrawBuffers")]
        public static
        unsafe void DrawBuffers(Int32 n, OpenTK.Graphics.OpenGL.DrawBuffersEnum* bufs)
        {
            Delegates.glDrawBuffers((Int32)n, (OpenTK.Graphics.OpenGL.DrawBuffersEnum*)bufs);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDrawBuffers")]
        public static
        void DrawBuffers(Int32 n, int[] bufs)
        {
            unsafe
            {
                fixed (int* bufs_ptr = bufs)
                {
                    Delegates.glDrawBuffers((Int32)n, (OpenTK.Graphics.OpenGL.DrawBuffersEnum*)bufs_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDrawBuffers")]
        public static
        void DrawBuffers(Int32 n, ref int bufs)
        {
            unsafe
            {
                fixed (int* bufs_ptr = &bufs)
                {
                    Delegates.glDrawBuffers((Int32)n, (OpenTK.Graphics.OpenGL.DrawBuffersEnum*)bufs_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDrawBuffers")]
        public static
        unsafe void DrawBuffers(Int32 n, int* bufs)
        {
            Delegates.glDrawBuffers((Int32)n, (OpenTK.Graphics.OpenGL.DrawBuffersEnum*)bufs);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static
        void DrawElements(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices)
        {
            Delegates.glDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static
        void DrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static
        void DrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static
        void DrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static
        void DrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                indices = (T3)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static
        void DrawElements(int mode, Int32 count, int type, IntPtr indices)
        {
            Delegates.glDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static
        void DrawElements<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] T3[] indices)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static
        void DrawElements<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] T3[,] indices)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static
        void DrawElements<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] T3[,,] indices)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static
        void DrawElements<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] ref T3 indices)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                indices = (T3)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static
        void DrawElementsBaseVertex(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices, Int32 basevertex)
        {
            Delegates.glDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)basevertex);
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static
        void DrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static
        void DrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static
        void DrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static
        void DrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
                indices = (T3)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static
        void DrawElementsBaseVertex(int mode, Int32 count, int type, IntPtr indices, Int32 basevertex)
        {
            Delegates.glDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)basevertex);
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static
        void DrawElementsBaseVertex<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] T3[] indices, Int32 basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static
        void DrawElementsBaseVertex<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] T3[,] indices, Int32 basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static
        void DrawElementsBaseVertex<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] T3[,,] indices, Int32 basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static
        void DrawElementsBaseVertex<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] ref T3 indices, Int32 basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
                indices = (T3)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static
        void DrawElementsInstanced(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices, Int32 primcount)
        {
            Delegates.glDrawElementsInstanced((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
        }

        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static
        void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsInstanced((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static
        void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsInstanced((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static
        void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsInstanced((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static
        void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsInstanced((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                indices = (T3)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static
        void DrawElementsInstanced(int mode, Int32 count, int type, IntPtr indices, Int32 primcount)
        {
            Delegates.glDrawElementsInstanced((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
        }

        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static
        void DrawElementsInstanced<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsInstanced((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static
        void DrawElementsInstanced<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsInstanced((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static
        void DrawElementsInstanced<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsInstanced((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static
        void DrawElementsInstanced<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsInstanced((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                indices = (T3)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static
        void DrawElementsInstancedBaseVertex(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices, Int32 primcount, Int32 basevertex)
        {
            Delegates.glDrawElementsInstancedBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount, (Int32)basevertex);
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static
        void DrawElementsInstancedBaseVertex<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount, Int32 basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsInstancedBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static
        void DrawElementsInstancedBaseVertex<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount, Int32 basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsInstancedBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static
        void DrawElementsInstancedBaseVertex<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount, Int32 basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsInstancedBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static
        void DrawElementsInstancedBaseVertex<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount, Int32 basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsInstancedBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)basevertex);
                indices = (T3)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static
        void DrawElementsInstancedBaseVertex(int mode, Int32 count, int type, IntPtr indices, Int32 primcount, Int32 basevertex)
        {
            Delegates.glDrawElementsInstancedBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount, (Int32)basevertex);
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static
        void DrawElementsInstancedBaseVertex<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount, Int32 basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsInstancedBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static
        void DrawElementsInstancedBaseVertex<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount, Int32 basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsInstancedBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static
        void DrawElementsInstancedBaseVertex<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount, Int32 basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsInstancedBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static
        void DrawElementsInstancedBaseVertex<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount, Int32 basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsInstancedBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)basevertex);
                indices = (T3)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glDrawPixels")]
        public static
        void DrawPixels(Int32 width, Int32 height, int format, int type, IntPtr pixels)
        {
            Delegates.glDrawPixels((Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glDrawPixels")]
        public static
        void DrawPixels<T4>(Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T4[] pixels)
            where T4 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawPixels((Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glDrawPixels")]
        public static
        void DrawPixels<T4>(Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T4[,] pixels)
            where T4 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawPixels((Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glDrawPixels")]
        public static
        void DrawPixels<T4>(Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T4[,,] pixels)
            where T4 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawPixels((Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glDrawPixels")]
        public static
        void DrawPixels<T4>(Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] ref T4 pixels)
            where T4 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawPixels((Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T4)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glDrawPixels")]
        public static
        void DrawPixels(Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
        {
            Delegates.glDrawPixels((Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glDrawPixels")]
        public static
        void DrawPixels<T4>(Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[] pixels)
            where T4 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawPixels((Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glDrawPixels")]
        public static
        void DrawPixels<T4>(Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[,] pixels)
            where T4 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawPixels((Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glDrawPixels")]
        public static
        void DrawPixels<T4>(Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[,,] pixels)
            where T4 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawPixels((Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glDrawPixels")]
        public static
        void DrawPixels<T4>(Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T4 pixels)
            where T4 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawPixels((Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T4)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static
        void DrawRangeElements(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices)
        {
            Delegates.glDrawRangeElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices);
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static
        void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T5[] indices)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static
        void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T5[,] indices)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static
        void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T5[,,] indices)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static
        void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T5 indices)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                indices = (T5)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static
        void DrawRangeElements(OpenTK.Graphics.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices)
        {
            Delegates.glDrawRangeElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static
        void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T5[] indices)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static
        void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T5[,] indices)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static
        void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T5[,,] indices)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static
        void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T5 indices)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                indices = (T5)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static
        void DrawRangeElements(int mode, Int32 start, Int32 end, Int32 count, int type, IntPtr indices)
        {
            Delegates.glDrawRangeElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices);
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static
        void DrawRangeElements<T5>(int mode, Int32 start, Int32 end, Int32 count, int type, [InAttribute, OutAttribute] T5[] indices)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static
        void DrawRangeElements<T5>(int mode, Int32 start, Int32 end, Int32 count, int type, [InAttribute, OutAttribute] T5[,] indices)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static
        void DrawRangeElements<T5>(int mode, Int32 start, Int32 end, Int32 count, int type, [InAttribute, OutAttribute] T5[,,] indices)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static
        void DrawRangeElements<T5>(int mode, Int32 start, Int32 end, Int32 count, int type, [InAttribute, OutAttribute] ref T5 indices)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                indices = (T5)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static
        void DrawRangeElements(int mode, UInt32 start, UInt32 end, Int32 count, int type, IntPtr indices)
        {
            Delegates.glDrawRangeElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static
        void DrawRangeElements<T5>(int mode, UInt32 start, UInt32 end, Int32 count, int type, [InAttribute, OutAttribute] T5[] indices)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static
        void DrawRangeElements<T5>(int mode, UInt32 start, UInt32 end, Int32 count, int type, [InAttribute, OutAttribute] T5[,] indices)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static
        void DrawRangeElements<T5>(int mode, UInt32 start, UInt32 end, Int32 count, int type, [InAttribute, OutAttribute] T5[,,] indices)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static
        void DrawRangeElements<T5>(int mode, UInt32 start, UInt32 end, Int32 count, int type, [InAttribute, OutAttribute] ref T5 indices)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                indices = (T5)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static
        void DrawRangeElementsBaseVertex(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices, Int32 basevertex)
        {
            Delegates.glDrawRangeElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)basevertex);
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static
        void DrawRangeElementsBaseVertex<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T5[] indices, Int32 basevertex)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static
        void DrawRangeElementsBaseVertex<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T5[,] indices, Int32 basevertex)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static
        void DrawRangeElementsBaseVertex<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T5[,,] indices, Int32 basevertex)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static
        void DrawRangeElementsBaseVertex<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T5 indices, Int32 basevertex)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
                indices = (T5)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static
        void DrawRangeElementsBaseVertex(OpenTK.Graphics.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices, Int32 basevertex)
        {
            Delegates.glDrawRangeElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)basevertex);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static
        void DrawRangeElementsBaseVertex<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T5[] indices, Int32 basevertex)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static
        void DrawRangeElementsBaseVertex<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T5[,] indices, Int32 basevertex)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static
        void DrawRangeElementsBaseVertex<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T5[,,] indices, Int32 basevertex)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static
        void DrawRangeElementsBaseVertex<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T5 indices, Int32 basevertex)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
                indices = (T5)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static
        void DrawRangeElementsBaseVertex(int mode, Int32 start, Int32 end, Int32 count, int type, IntPtr indices, Int32 basevertex)
        {
            Delegates.glDrawRangeElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)basevertex);
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static
        void DrawRangeElementsBaseVertex<T5>(int mode, Int32 start, Int32 end, Int32 count, int type, [InAttribute, OutAttribute] T5[] indices, Int32 basevertex)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static
        void DrawRangeElementsBaseVertex<T5>(int mode, Int32 start, Int32 end, Int32 count, int type, [InAttribute, OutAttribute] T5[,] indices, Int32 basevertex)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static
        void DrawRangeElementsBaseVertex<T5>(int mode, Int32 start, Int32 end, Int32 count, int type, [InAttribute, OutAttribute] T5[,,] indices, Int32 basevertex)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static
        void DrawRangeElementsBaseVertex<T5>(int mode, Int32 start, Int32 end, Int32 count, int type, [InAttribute, OutAttribute] ref T5 indices, Int32 basevertex)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
                indices = (T5)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static
        void DrawRangeElementsBaseVertex(int mode, UInt32 start, UInt32 end, Int32 count, int type, IntPtr indices, Int32 basevertex)
        {
            Delegates.glDrawRangeElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)basevertex);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static
        void DrawRangeElementsBaseVertex<T5>(int mode, UInt32 start, UInt32 end, Int32 count, int type, [InAttribute, OutAttribute] T5[] indices, Int32 basevertex)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static
        void DrawRangeElementsBaseVertex<T5>(int mode, UInt32 start, UInt32 end, Int32 count, int type, [InAttribute, OutAttribute] T5[,] indices, Int32 basevertex)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static
        void DrawRangeElementsBaseVertex<T5>(int mode, UInt32 start, UInt32 end, Int32 count, int type, [InAttribute, OutAttribute] T5[,,] indices, Int32 basevertex)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static
        void DrawRangeElementsBaseVertex<T5>(int mode, UInt32 start, UInt32 end, Int32 count, int type, [InAttribute, OutAttribute] ref T5 indices, Int32 basevertex)
            where T5 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
                indices = (T5)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEdgeFlag")]
        public static
        void EdgeFlag(bool flag)
        {
            Delegates.glEdgeFlag((bool)flag);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glEdgeFlagPointer")]
        public static
        void EdgeFlagPointer(Int32 stride, IntPtr pointer)
        {
            Delegates.glEdgeFlagPointer((Int32)stride, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glEdgeFlagPointer")]
        public static
        void EdgeFlagPointer<T1>(Int32 stride, [InAttribute, OutAttribute] T1[] pointer)
            where T1 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glEdgeFlagPointer((Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glEdgeFlagPointer")]
        public static
        void EdgeFlagPointer<T1>(Int32 stride, [InAttribute, OutAttribute] T1[,] pointer)
            where T1 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glEdgeFlagPointer((Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glEdgeFlagPointer")]
        public static
        void EdgeFlagPointer<T1>(Int32 stride, [InAttribute, OutAttribute] T1[,,] pointer)
            where T1 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glEdgeFlagPointer((Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glEdgeFlagPointer")]
        public static
        void EdgeFlagPointer<T1>(Int32 stride, [InAttribute, OutAttribute] ref T1 pointer)
            where T1 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glEdgeFlagPointer((Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T1)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEdgeFlagv")]
        public static
        unsafe void EdgeFlag(bool* flag)
        {
            Delegates.glEdgeFlagv((bool*)flag);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEnable")]
        public static
        void Enable(OpenTK.Graphics.OpenGL.EnableCap cap)
        {
            Delegates.glEnable((OpenTK.Graphics.OpenGL.EnableCap)cap);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEnable")]
        public static
        void Enable(int cap)
        {
            Delegates.glEnable((OpenTK.Graphics.OpenGL.EnableCap)cap);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glEnableClientState")]
        public static
        void EnableClientState(OpenTK.Graphics.OpenGL.ArrayCap array)
        {
            Delegates.glEnableClientState((OpenTK.Graphics.OpenGL.ArrayCap)array);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glEnableClientState")]
        public static
        void EnableClientState(int array)
        {
            Delegates.glEnableClientState((OpenTK.Graphics.OpenGL.ArrayCap)array);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEnablei")]
        public static
        void Enable(OpenTK.Graphics.OpenGL.IndexedEnableCap target, Int32 index)
        {
            Delegates.glEnablei((OpenTK.Graphics.OpenGL.IndexedEnableCap)target, (UInt32)index);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEnablei")]
        public static
        void Enable(OpenTK.Graphics.OpenGL.IndexedEnableCap target, UInt32 index)
        {
            Delegates.glEnablei((OpenTK.Graphics.OpenGL.IndexedEnableCap)target, (UInt32)index);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEnablei")]
        public static
        void Enable(int target, Int32 index)
        {
            Delegates.glEnablei((OpenTK.Graphics.OpenGL.IndexedEnableCap)target, (UInt32)index);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEnablei")]
        public static
        void Enable(int target, UInt32 index)
        {
            Delegates.glEnablei((OpenTK.Graphics.OpenGL.IndexedEnableCap)target, (UInt32)index);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glEnableVertexAttribArray")]
        public static
        void EnableVertexAttribArray(Int32 index)
        {
            Delegates.glEnableVertexAttribArray((UInt32)index);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glEnableVertexAttribArray")]
        public static
        void EnableVertexAttribArray(UInt32 index)
        {
            Delegates.glEnableVertexAttribArray((UInt32)index);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEnd")]
        public static
        void End()
        {
            Delegates.glEnd();
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEndConditionalRender")]
        public static
        void EndConditionalRender()
        {
            Delegates.glEndConditionalRender();
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEndList")]
        public static
        void EndList()
        {
            Delegates.glEndList();
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glEndQuery")]
        public static
        void EndQuery(int target)
        {
            Delegates.glEndQuery((OpenTK.Graphics.OpenGL.QueryTarget)target);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glEndQuery")]
        public static
        void EndQuery(OpenTK.Graphics.OpenGL.QueryTarget target)
        {
            Delegates.glEndQuery((OpenTK.Graphics.OpenGL.QueryTarget)target);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEndTransformFeedback")]
        public static
        void EndTransformFeedback()
        {
            Delegates.glEndTransformFeedback();
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord1d")]
        public static
        void EvalCoord1(Double u)
        {
            Delegates.glEvalCoord1d((Double)u);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord1dv")]
        public static
        unsafe void EvalCoord1(Double* u)
        {
            Delegates.glEvalCoord1dv((Double*)u);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord1f")]
        public static
        void EvalCoord1(Single u)
        {
            Delegates.glEvalCoord1f((Single)u);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord1fv")]
        public static
        unsafe void EvalCoord1(Single* u)
        {
            Delegates.glEvalCoord1fv((Single*)u);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord2d")]
        public static
        void EvalCoord2(Double u, Double v)
        {
            Delegates.glEvalCoord2d((Double)u, (Double)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord2dv")]
        public static
        void EvalCoord2(Double[] u)
        {
            unsafe
            {
                fixed (Double* u_ptr = u)
                {
                    Delegates.glEvalCoord2dv((Double*)u_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord2dv")]
        public static
        void EvalCoord2(ref Double u)
        {
            unsafe
            {
                fixed (Double* u_ptr = &u)
                {
                    Delegates.glEvalCoord2dv((Double*)u_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord2dv")]
        public static
        unsafe void EvalCoord2(Double* u)
        {
            Delegates.glEvalCoord2dv((Double*)u);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord2f")]
        public static
        void EvalCoord2(Single u, Single v)
        {
            Delegates.glEvalCoord2f((Single)u, (Single)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord2fv")]
        public static
        void EvalCoord2(Single[] u)
        {
            unsafe
            {
                fixed (Single* u_ptr = u)
                {
                    Delegates.glEvalCoord2fv((Single*)u_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord2fv")]
        public static
        void EvalCoord2(ref Single u)
        {
            unsafe
            {
                fixed (Single* u_ptr = &u)
                {
                    Delegates.glEvalCoord2fv((Single*)u_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord2fv")]
        public static
        unsafe void EvalCoord2(Single* u)
        {
            Delegates.glEvalCoord2fv((Single*)u);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalMesh1")]
        public static
        void EvalMesh1(int mode, Int32 i1, Int32 i2)
        {
            Delegates.glEvalMesh1((OpenTK.Graphics.OpenGL.MeshMode1)mode, (Int32)i1, (Int32)i2);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalMesh1")]
        public static
        void EvalMesh1(OpenTK.Graphics.OpenGL.MeshMode1 mode, Int32 i1, Int32 i2)
        {
            Delegates.glEvalMesh1((OpenTK.Graphics.OpenGL.MeshMode1)mode, (Int32)i1, (Int32)i2);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalMesh2")]
        public static
        void EvalMesh2(int mode, Int32 i1, Int32 i2, Int32 j1, Int32 j2)
        {
            Delegates.glEvalMesh2((OpenTK.Graphics.OpenGL.MeshMode2)mode, (Int32)i1, (Int32)i2, (Int32)j1, (Int32)j2);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalMesh2")]
        public static
        void EvalMesh2(OpenTK.Graphics.OpenGL.MeshMode2 mode, Int32 i1, Int32 i2, Int32 j1, Int32 j2)
        {
            Delegates.glEvalMesh2((OpenTK.Graphics.OpenGL.MeshMode2)mode, (Int32)i1, (Int32)i2, (Int32)j1, (Int32)j2);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalPoint1")]
        public static
        void EvalPoint1(Int32 i)
        {
            Delegates.glEvalPoint1((Int32)i);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalPoint2")]
        public static
        void EvalPoint2(Int32 i, Int32 j)
        {
            Delegates.glEvalPoint2((Int32)i, (Int32)j);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFeedbackBuffer")]
        public static
        void FeedbackBuffer(Int32 size, OpenTK.Graphics.OpenGL.FeedbackType type, [OutAttribute] Single[] buffer)
        {
            unsafe
            {
                fixed (Single* buffer_ptr = buffer)
                {
                    Delegates.glFeedbackBuffer((Int32)size, (OpenTK.Graphics.OpenGL.FeedbackType)type, (Single*)buffer_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFeedbackBuffer")]
        public static
        void FeedbackBuffer(Int32 size, OpenTK.Graphics.OpenGL.FeedbackType type, [OutAttribute] out Single buffer)
        {
            unsafe
            {
                fixed (Single* buffer_ptr = &buffer)
                {
                    Delegates.glFeedbackBuffer((Int32)size, (OpenTK.Graphics.OpenGL.FeedbackType)type, (Single*)buffer_ptr);
                    buffer = *buffer_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFeedbackBuffer")]
        public static
        unsafe void FeedbackBuffer(Int32 size, OpenTK.Graphics.OpenGL.FeedbackType type, [OutAttribute] Single* buffer)
        {
            Delegates.glFeedbackBuffer((Int32)size, (OpenTK.Graphics.OpenGL.FeedbackType)type, (Single*)buffer);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFeedbackBuffer")]
        public static
        void FeedbackBuffer(Int32 size, int type, [OutAttribute] Single[] buffer)
        {
            unsafe
            {
                fixed (Single* buffer_ptr = buffer)
                {
                    Delegates.glFeedbackBuffer((Int32)size, (OpenTK.Graphics.OpenGL.FeedbackType)type, (Single*)buffer_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFeedbackBuffer")]
        public static
        void FeedbackBuffer(Int32 size, int type, [OutAttribute] out Single buffer)
        {
            unsafe
            {
                fixed (Single* buffer_ptr = &buffer)
                {
                    Delegates.glFeedbackBuffer((Int32)size, (OpenTK.Graphics.OpenGL.FeedbackType)type, (Single*)buffer_ptr);
                    buffer = *buffer_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFeedbackBuffer")]
        public static
        unsafe void FeedbackBuffer(Int32 size, int type, [OutAttribute] Single* buffer)
        {
            Delegates.glFeedbackBuffer((Int32)size, (OpenTK.Graphics.OpenGL.FeedbackType)type, (Single*)buffer);
        }

        [AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glFenceSync")]
        public static
        IntPtr FenceSync(OpenTK.Graphics.OpenGL.ARB_sync condition, Int32 flags)
        {
            return Delegates.glFenceSync((OpenTK.Graphics.OpenGL.ARB_sync)condition, (UInt32)flags);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glFenceSync")]
        public static
        IntPtr FenceSync(OpenTK.Graphics.OpenGL.ARB_sync condition, UInt32 flags)
        {
            return Delegates.glFenceSync((OpenTK.Graphics.OpenGL.ARB_sync)condition, (UInt32)flags);
        }

        [AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glFenceSync")]
        public static
        IntPtr FenceSync(int condition, Int32 flags)
        {
            return Delegates.glFenceSync((OpenTK.Graphics.OpenGL.ARB_sync)condition, (UInt32)flags);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glFenceSync")]
        public static
        IntPtr FenceSync(int condition, UInt32 flags)
        {
            return Delegates.glFenceSync((OpenTK.Graphics.OpenGL.ARB_sync)condition, (UInt32)flags);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFinish")]
        public static
        void Finish()
        {
            Delegates.glFinish();
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFlush")]
        public static
        void Flush()
        {
            Delegates.glFlush();
        }

        [AutoGenerated(Category = "ARB_map_buffer_range", Version = "3.0", EntryPoint = "glFlushMappedBufferRange")]
        public static
        void FlushMappedBufferRange(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr length)
        {
            Delegates.glFlushMappedBufferRange((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)length);
        }

        [AutoGenerated(Category = "ARB_map_buffer_range", Version = "3.0", EntryPoint = "glFlushMappedBufferRange")]
        public static
        void FlushMappedBufferRange(int target, IntPtr offset, IntPtr length)
        {
            Delegates.glFlushMappedBufferRange((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)length);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoordd")]
        public static
        void FogCoord(Double coord)
        {
            Delegates.glFogCoordd((Double)coord);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoorddv")]
        public static
        unsafe void FogCoord(Double* coord)
        {
            Delegates.glFogCoorddv((Double*)coord);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoordf")]
        public static
        void FogCoord(Single coord)
        {
            Delegates.glFogCoordf((Single)coord);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoordfv")]
        public static
        unsafe void FogCoord(Single* coord)
        {
            Delegates.glFogCoordfv((Single*)coord);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static
        void FogCoordPointer(OpenTK.Graphics.OpenGL.FogPointerType type, Int32 stride, IntPtr pointer)
        {
            Delegates.glFogCoordPointer((OpenTK.Graphics.OpenGL.FogPointerType)type, (Int32)stride, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static
        void FogCoordPointer<T2>(OpenTK.Graphics.OpenGL.FogPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordPointer((OpenTK.Graphics.OpenGL.FogPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static
        void FogCoordPointer<T2>(OpenTK.Graphics.OpenGL.FogPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordPointer((OpenTK.Graphics.OpenGL.FogPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static
        void FogCoordPointer<T2>(OpenTK.Graphics.OpenGL.FogPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordPointer((OpenTK.Graphics.OpenGL.FogPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static
        void FogCoordPointer<T2>(OpenTK.Graphics.OpenGL.FogPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordPointer((OpenTK.Graphics.OpenGL.FogPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T2)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static
        void FogCoordPointer(int type, Int32 stride, IntPtr pointer)
        {
            Delegates.glFogCoordPointer((OpenTK.Graphics.OpenGL.FogPointerType)type, (Int32)stride, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static
        void FogCoordPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordPointer((OpenTK.Graphics.OpenGL.FogPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static
        void FogCoordPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordPointer((OpenTK.Graphics.OpenGL.FogPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static
        void FogCoordPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordPointer((OpenTK.Graphics.OpenGL.FogPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static
        void FogCoordPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordPointer((OpenTK.Graphics.OpenGL.FogPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T2)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFogf")]
        public static
        void Fog(OpenTK.Graphics.OpenGL.FogParameter pname, Single param)
        {
            Delegates.glFogf((OpenTK.Graphics.OpenGL.FogParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFogf")]
        public static
        void Fog(int pname, Single param)
        {
            Delegates.glFogf((OpenTK.Graphics.OpenGL.FogParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFogfv")]
        public static
        void Fog(OpenTK.Graphics.OpenGL.FogParameter pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glFogfv((OpenTK.Graphics.OpenGL.FogParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFogfv")]
        public static
        unsafe void Fog(OpenTK.Graphics.OpenGL.FogParameter pname, Single* @params)
        {
            Delegates.glFogfv((OpenTK.Graphics.OpenGL.FogParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFogfv")]
        public static
        void Fog(int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glFogfv((OpenTK.Graphics.OpenGL.FogParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFogfv")]
        public static
        unsafe void Fog(int pname, Single* @params)
        {
            Delegates.glFogfv((OpenTK.Graphics.OpenGL.FogParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFogi")]
        public static
        void Fog(OpenTK.Graphics.OpenGL.FogParameter pname, Int32 param)
        {
            Delegates.glFogi((OpenTK.Graphics.OpenGL.FogParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFogi")]
        public static
        void Fog(int pname, Int32 param)
        {
            Delegates.glFogi((OpenTK.Graphics.OpenGL.FogParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFogiv")]
        public static
        void Fog(OpenTK.Graphics.OpenGL.FogParameter pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glFogiv((OpenTK.Graphics.OpenGL.FogParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFogiv")]
        public static
        unsafe void Fog(OpenTK.Graphics.OpenGL.FogParameter pname, Int32* @params)
        {
            Delegates.glFogiv((OpenTK.Graphics.OpenGL.FogParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFogiv")]
        public static
        void Fog(int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glFogiv((OpenTK.Graphics.OpenGL.FogParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFogiv")]
        public static
        unsafe void Fog(int pname, Int32* @params)
        {
            Delegates.glFogiv((OpenTK.Graphics.OpenGL.FogParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferRenderbuffer")]
        public static
        void FramebufferRenderbuffer(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.RenderbufferTarget renderbuffertarget, Int32 renderbuffer)
        {
            Delegates.glFramebufferRenderbuffer((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferRenderbuffer")]
        public static
        void FramebufferRenderbuffer(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.RenderbufferTarget renderbuffertarget, UInt32 renderbuffer)
        {
            Delegates.glFramebufferRenderbuffer((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferRenderbuffer")]
        public static
        void FramebufferRenderbuffer(int target, int attachment, int renderbuffertarget, Int32 renderbuffer)
        {
            Delegates.glFramebufferRenderbuffer((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferRenderbuffer")]
        public static
        void FramebufferRenderbuffer(int target, int attachment, int renderbuffertarget, UInt32 renderbuffer)
        {
            Delegates.glFramebufferRenderbuffer((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
        }

        [AutoGenerated(Category = "VERSION_3_2", Version = "1.2", EntryPoint = "glFramebufferTexture")]
        public static
        void FramebufferTexture(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, Int32 texture, Int32 level)
        {
            Delegates.glFramebufferTexture((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_2", Version = "1.2", EntryPoint = "glFramebufferTexture")]
        public static
        void FramebufferTexture(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, UInt32 texture, Int32 level)
        {
            Delegates.glFramebufferTexture((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
        }

        [AutoGenerated(Category = "VERSION_3_2", Version = "1.2", EntryPoint = "glFramebufferTexture")]
        public static
        void FramebufferTexture(int target, int attachment, Int32 texture, Int32 level)
        {
            Delegates.glFramebufferTexture((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_2", Version = "1.2", EntryPoint = "glFramebufferTexture")]
        public static
        void FramebufferTexture(int target, int attachment, UInt32 texture, Int32 level)
        {
            Delegates.glFramebufferTexture((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTexture1D")]
        public static
        void FramebufferTexture1D(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, Int32 texture, Int32 level)
        {
            Delegates.glFramebufferTexture1D((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTexture1D")]
        public static
        void FramebufferTexture1D(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, UInt32 texture, Int32 level)
        {
            Delegates.glFramebufferTexture1D((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTexture1D")]
        public static
        void FramebufferTexture1D(int target, int attachment, int textarget, Int32 texture, Int32 level)
        {
            Delegates.glFramebufferTexture1D((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTexture1D")]
        public static
        void FramebufferTexture1D(int target, int attachment, int textarget, UInt32 texture, Int32 level)
        {
            Delegates.glFramebufferTexture1D((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTexture2D")]
        public static
        void FramebufferTexture2D(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, Int32 texture, Int32 level)
        {
            Delegates.glFramebufferTexture2D((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTexture2D")]
        public static
        void FramebufferTexture2D(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, UInt32 texture, Int32 level)
        {
            Delegates.glFramebufferTexture2D((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTexture2D")]
        public static
        void FramebufferTexture2D(int target, int attachment, int textarget, Int32 texture, Int32 level)
        {
            Delegates.glFramebufferTexture2D((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTexture2D")]
        public static
        void FramebufferTexture2D(int target, int attachment, int textarget, UInt32 texture, Int32 level)
        {
            Delegates.glFramebufferTexture2D((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTexture3D")]
        public static
        void FramebufferTexture3D(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, Int32 texture, Int32 level, Int32 zoffset)
        {
            Delegates.glFramebufferTexture3D((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTexture3D")]
        public static
        void FramebufferTexture3D(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, UInt32 texture, Int32 level, Int32 zoffset)
        {
            Delegates.glFramebufferTexture3D((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTexture3D")]
        public static
        void FramebufferTexture3D(int target, int attachment, int textarget, Int32 texture, Int32 level, Int32 zoffset)
        {
            Delegates.glFramebufferTexture3D((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTexture3D")]
        public static
        void FramebufferTexture3D(int target, int attachment, int textarget, UInt32 texture, Int32 level, Int32 zoffset)
        {
            Delegates.glFramebufferTexture3D((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
        }

        [AutoGenerated(Category = "VERSION_3_2", Version = "1.2", EntryPoint = "glFramebufferTextureFace")]
        public static
        void FramebufferTextureFace(int target, int attachment, Int32 texture, Int32 level, int face)
        {
            Delegates.glFramebufferTextureFace((OpenTK.Graphics.OpenGL.VERSION_3_2)target, (OpenTK.Graphics.OpenGL.VERSION_3_2)attachment, (UInt32)texture, (Int32)level, (OpenTK.Graphics.OpenGL.VERSION_3_2)face);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_2", Version = "1.2", EntryPoint = "glFramebufferTextureFace")]
        public static
        void FramebufferTextureFace(int target, int attachment, UInt32 texture, Int32 level, int face)
        {
            Delegates.glFramebufferTextureFace((OpenTK.Graphics.OpenGL.VERSION_3_2)target, (OpenTK.Graphics.OpenGL.VERSION_3_2)attachment, (UInt32)texture, (Int32)level, (OpenTK.Graphics.OpenGL.VERSION_3_2)face);
        }

        [AutoGenerated(Category = "VERSION_3_2", Version = "1.2", EntryPoint = "glFramebufferTextureFace")]
        public static
        void FramebufferTextureFace(OpenTK.Graphics.OpenGL.VERSION_3_2 target, OpenTK.Graphics.OpenGL.VERSION_3_2 attachment, Int32 texture, Int32 level, OpenTK.Graphics.OpenGL.VERSION_3_2 face)
        {
            Delegates.glFramebufferTextureFace((OpenTK.Graphics.OpenGL.VERSION_3_2)target, (OpenTK.Graphics.OpenGL.VERSION_3_2)attachment, (UInt32)texture, (Int32)level, (OpenTK.Graphics.OpenGL.VERSION_3_2)face);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_2", Version = "1.2", EntryPoint = "glFramebufferTextureFace")]
        public static
        void FramebufferTextureFace(OpenTK.Graphics.OpenGL.VERSION_3_2 target, OpenTK.Graphics.OpenGL.VERSION_3_2 attachment, UInt32 texture, Int32 level, OpenTK.Graphics.OpenGL.VERSION_3_2 face)
        {
            Delegates.glFramebufferTextureFace((OpenTK.Graphics.OpenGL.VERSION_3_2)target, (OpenTK.Graphics.OpenGL.VERSION_3_2)attachment, (UInt32)texture, (Int32)level, (OpenTK.Graphics.OpenGL.VERSION_3_2)face);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
        public static
        void FramebufferTextureLayer(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, Int32 texture, Int32 level, Int32 layer)
        {
            Delegates.glFramebufferTextureLayer((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
        public static
        void FramebufferTextureLayer(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 layer)
        {
            Delegates.glFramebufferTextureLayer((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
        public static
        void FramebufferTextureLayer(int target, int attachment, Int32 texture, Int32 level, Int32 layer)
        {
            Delegates.glFramebufferTextureLayer((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
        public static
        void FramebufferTextureLayer(int target, int attachment, UInt32 texture, Int32 level, Int32 layer)
        {
            Delegates.glFramebufferTextureLayer((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFrontFace")]
        public static
        void FrontFace(OpenTK.Graphics.OpenGL.FrontFaceDirection mode)
        {
            Delegates.glFrontFace((OpenTK.Graphics.OpenGL.FrontFaceDirection)mode);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFrontFace")]
        public static
        void FrontFace(int mode)
        {
            Delegates.glFrontFace((OpenTK.Graphics.OpenGL.FrontFaceDirection)mode);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFrustum")]
        public static
        void Frustum(Double left, Double right, Double bottom, Double top, Double zNear, Double zFar)
        {
            Delegates.glFrustum((Double)left, (Double)right, (Double)bottom, (Double)top, (Double)zNear, (Double)zFar);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static
        void GenBuffers(Int32 n, [OutAttribute] Int32[] buffers)
        {
            unsafe
            {
                fixed (Int32* buffers_ptr = buffers)
                {
                    Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static
        void GenBuffers(Int32 n, [OutAttribute] out Int32 buffers)
        {
            unsafe
            {
                fixed (Int32* buffers_ptr = &buffers)
                {
                    Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                    buffers = *buffers_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static
        unsafe void GenBuffers(Int32 n, [OutAttribute] Int32* buffers)
        {
            Delegates.glGenBuffers((Int32)n, (UInt32*)buffers);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static
        void GenBuffers(Int32 n, [OutAttribute] UInt32[] buffers)
        {
            unsafe
            {
                fixed (UInt32* buffers_ptr = buffers)
                {
                    Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static
        void GenBuffers(Int32 n, [OutAttribute] out UInt32 buffers)
        {
            unsafe
            {
                fixed (UInt32* buffers_ptr = &buffers)
                {
                    Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                    buffers = *buffers_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static
        unsafe void GenBuffers(Int32 n, [OutAttribute] UInt32* buffers)
        {
            Delegates.glGenBuffers((Int32)n, (UInt32*)buffers);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenerateMipmap")]
        public static
        void GenerateMipmap(OpenTK.Graphics.OpenGL.GenerateMipmapTarget target)
        {
            Delegates.glGenerateMipmap((OpenTK.Graphics.OpenGL.GenerateMipmapTarget)target);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenerateMipmap")]
        public static
        void GenerateMipmap(int target)
        {
            Delegates.glGenerateMipmap((OpenTK.Graphics.OpenGL.GenerateMipmapTarget)target);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static
        void GenFramebuffers(Int32 n, [OutAttribute] Int32[] framebuffers)
        {
            unsafe
            {
                fixed (Int32* framebuffers_ptr = framebuffers)
                {
                    Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static
        void GenFramebuffers(Int32 n, [OutAttribute] out Int32 framebuffers)
        {
            unsafe
            {
                fixed (Int32* framebuffers_ptr = &framebuffers)
                {
                    Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                    framebuffers = *framebuffers_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static
        unsafe void GenFramebuffers(Int32 n, [OutAttribute] Int32* framebuffers)
        {
            Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static
        void GenFramebuffers(Int32 n, [OutAttribute] UInt32[] framebuffers)
        {
            unsafe
            {
                fixed (UInt32* framebuffers_ptr = framebuffers)
                {
                    Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static
        void GenFramebuffers(Int32 n, [OutAttribute] out UInt32 framebuffers)
        {
            unsafe
            {
                fixed (UInt32* framebuffers_ptr = &framebuffers)
                {
                    Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                    framebuffers = *framebuffers_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static
        unsafe void GenFramebuffers(Int32 n, [OutAttribute] UInt32* framebuffers)
        {
            Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGenLists")]
        public static
        Int32 GenLists(Int32 range)
        {
            return Delegates.glGenLists((Int32)range);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        public static
        void GenQueries(Int32 n, [OutAttribute] Int32[] ids)
        {
            unsafe
            {
                fixed (Int32* ids_ptr = ids)
                {
                    Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        public static
        void GenQueries(Int32 n, [OutAttribute] out Int32 ids)
        {
            unsafe
            {
                fixed (Int32* ids_ptr = &ids)
                {
                    Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
                    ids = *ids_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        public static
        unsafe void GenQueries(Int32 n, [OutAttribute] Int32* ids)
        {
            Delegates.glGenQueries((Int32)n, (UInt32*)ids);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        public static
        void GenQueries(Int32 n, [OutAttribute] UInt32[] ids)
        {
            unsafe
            {
                fixed (UInt32* ids_ptr = ids)
                {
                    Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        public static
        void GenQueries(Int32 n, [OutAttribute] out UInt32 ids)
        {
            unsafe
            {
                fixed (UInt32* ids_ptr = &ids)
                {
                    Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
                    ids = *ids_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        public static
        unsafe void GenQueries(Int32 n, [OutAttribute] UInt32* ids)
        {
            Delegates.glGenQueries((Int32)n, (UInt32*)ids);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static
        void GenRenderbuffers(Int32 n, [OutAttribute] Int32[] renderbuffers)
        {
            unsafe
            {
                fixed (Int32* renderbuffers_ptr = renderbuffers)
                {
                    Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static
        void GenRenderbuffers(Int32 n, [OutAttribute] out Int32 renderbuffers)
        {
            unsafe
            {
                fixed (Int32* renderbuffers_ptr = &renderbuffers)
                {
                    Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                    renderbuffers = *renderbuffers_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static
        unsafe void GenRenderbuffers(Int32 n, [OutAttribute] Int32* renderbuffers)
        {
            Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static
        void GenRenderbuffers(Int32 n, [OutAttribute] UInt32[] renderbuffers)
        {
            unsafe
            {
                fixed (UInt32* renderbuffers_ptr = renderbuffers)
                {
                    Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static
        void GenRenderbuffers(Int32 n, [OutAttribute] out UInt32 renderbuffers)
        {
            unsafe
            {
                fixed (UInt32* renderbuffers_ptr = &renderbuffers)
                {
                    Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                    renderbuffers = *renderbuffers_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static
        unsafe void GenRenderbuffers(Int32 n, [OutAttribute] UInt32* renderbuffers)
        {
            Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        public static
        void GenTextures(Int32 n, [OutAttribute] Int32[] textures)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = textures)
                {
                    Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        public static
        void GenTextures(Int32 n, [OutAttribute] out Int32 textures)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = &textures)
                {
                    Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                    textures = *textures_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        public static
        unsafe void GenTextures(Int32 n, [OutAttribute] Int32* textures)
        {
            Delegates.glGenTextures((Int32)n, (UInt32*)textures);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        public static
        void GenTextures(Int32 n, [OutAttribute] UInt32[] textures)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = textures)
                {
                    Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        public static
        void GenTextures(Int32 n, [OutAttribute] out UInt32 textures)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = &textures)
                {
                    Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                    textures = *textures_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        public static
        unsafe void GenTextures(Int32 n, [OutAttribute] UInt32* textures)
        {
            Delegates.glGenTextures((Int32)n, (UInt32*)textures);
        }

        [AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static
        void GenVertexArrays(Int32 n, [OutAttribute] Int32[] arrays)
        {
            unsafe
            {
                fixed (Int32* arrays_ptr = arrays)
                {
                    Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static
        void GenVertexArrays(Int32 n, [OutAttribute] out Int32 arrays)
        {
            unsafe
            {
                fixed (Int32* arrays_ptr = &arrays)
                {
                    Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                    arrays = *arrays_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static
        unsafe void GenVertexArrays(Int32 n, [OutAttribute] Int32* arrays)
        {
            Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static
        void GenVertexArrays(Int32 n, [OutAttribute] UInt32[] arrays)
        {
            unsafe
            {
                fixed (UInt32* arrays_ptr = arrays)
                {
                    Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static
        void GenVertexArrays(Int32 n, [OutAttribute] out UInt32 arrays)
        {
            unsafe
            {
                fixed (UInt32* arrays_ptr = &arrays)
                {
                    Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                    arrays = *arrays_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static
        unsafe void GenVertexArrays(Int32 n, [OutAttribute] UInt32* arrays)
        {
            Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static
        void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL.ActiveAttribType type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (OpenTK.Graphics.OpenGL.ActiveAttribType* type_ptr = &type)
                {
                    Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type_ptr, (StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static
        void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out int type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (int* type_ptr = &type)
                {
                    Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type_ptr, (StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static
        unsafe void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL.ActiveAttribType* type, [OutAttribute] StringBuilder name)
        {
            Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type, (StringBuilder)name);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static
        unsafe void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] int* type, [OutAttribute] StringBuilder name)
        {
            Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type, (StringBuilder)name);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static
        void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL.ActiveAttribType type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (OpenTK.Graphics.OpenGL.ActiveAttribType* type_ptr = &type)
                {
                    Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type_ptr, (StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static
        void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out int type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (int* type_ptr = &type)
                {
                    Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type_ptr, (StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static
        unsafe void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL.ActiveAttribType* type, [OutAttribute] StringBuilder name)
        {
            Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type, (StringBuilder)name);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static
        unsafe void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] int* type, [OutAttribute] StringBuilder name)
        {
            Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type, (StringBuilder)name);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static
        void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL.ActiveUniformType type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (OpenTK.Graphics.OpenGL.ActiveUniformType* type_ptr = &type)
                {
                    Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ActiveUniformType*)type_ptr, (StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static
        void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out int type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (int* type_ptr = &type)
                {
                    Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ActiveUniformType*)type_ptr, (StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static
        unsafe void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL.ActiveUniformType* type, [OutAttribute] StringBuilder name)
        {
            Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ActiveUniformType*)type, (StringBuilder)name);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static
        unsafe void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] int* type, [OutAttribute] StringBuilder name)
        {
            Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ActiveUniformType*)type, (StringBuilder)name);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static
        void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL.ActiveUniformType type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (OpenTK.Graphics.OpenGL.ActiveUniformType* type_ptr = &type)
                {
                    Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ActiveUniformType*)type_ptr, (StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static
        void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out int type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (int* type_ptr = &type)
                {
                    Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ActiveUniformType*)type_ptr, (StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static
        unsafe void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL.ActiveUniformType* type, [OutAttribute] StringBuilder name)
        {
            Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ActiveUniformType*)type, (StringBuilder)name);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static
        unsafe void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] int* type, [OutAttribute] StringBuilder name)
        {
            Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ActiveUniformType*)type, (StringBuilder)name);
        }

        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
        public static
        void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
        public static
        void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
        public static
        unsafe void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
        public static
        void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
        public static
        void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
        public static
        unsafe void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
        public static
        void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
        public static
        void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
        public static
        unsafe void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
        public static
        void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
        public static
        void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
        public static
        unsafe void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockName")]
        public static
        void GetActiveUniformBlockName(Int32 program, Int32 uniformBlockIndex, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder uniformBlockName)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Delegates.glGetActiveUniformBlockName((UInt32)program, (UInt32)uniformBlockIndex, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)uniformBlockName);
                    length = *length_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockName")]
        public static
        unsafe void GetActiveUniformBlockName(Int32 program, Int32 uniformBlockIndex, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder uniformBlockName)
        {
            Delegates.glGetActiveUniformBlockName((UInt32)program, (UInt32)uniformBlockIndex, (Int32)bufSize, (Int32*)length, (StringBuilder)uniformBlockName);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockName")]
        public static
        void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder uniformBlockName)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Delegates.glGetActiveUniformBlockName((UInt32)program, (UInt32)uniformBlockIndex, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)uniformBlockName);
                    length = *length_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockName")]
        public static
        unsafe void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder uniformBlockName)
        {
            Delegates.glGetActiveUniformBlockName((UInt32)program, (UInt32)uniformBlockIndex, (Int32)bufSize, (Int32*)length, (StringBuilder)uniformBlockName);
        }

        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformName")]
        public static
        void GetActiveUniformName(Int32 program, Int32 uniformIndex, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder uniformName)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Delegates.glGetActiveUniformName((UInt32)program, (UInt32)uniformIndex, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)uniformName);
                    length = *length_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformName")]
        public static
        unsafe void GetActiveUniformName(Int32 program, Int32 uniformIndex, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder uniformName)
        {
            Delegates.glGetActiveUniformName((UInt32)program, (UInt32)uniformIndex, (Int32)bufSize, (Int32*)length, (StringBuilder)uniformName);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformName")]
        public static
        void GetActiveUniformName(UInt32 program, UInt32 uniformIndex, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder uniformName)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Delegates.glGetActiveUniformName((UInt32)program, (UInt32)uniformIndex, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)uniformName);
                    length = *length_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformName")]
        public static
        unsafe void GetActiveUniformName(UInt32 program, UInt32 uniformIndex, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder uniformName)
        {
            Delegates.glGetActiveUniformName((UInt32)program, (UInt32)uniformIndex, (Int32)bufSize, (Int32*)length, (StringBuilder)uniformName);
        }

        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
        public static
        void GetActiveUniforms(Int32 program, Int32 uniformCount, Int32[] uniformIndices, OpenTK.Graphics.OpenGL.ActiveUniformParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* uniformIndices_ptr = uniformIndices)
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (OpenTK.Graphics.OpenGL.ActiveUniformParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
        public static
        void GetActiveUniforms(Int32 program, Int32 uniformCount, Int32[] uniformIndices, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* uniformIndices_ptr = uniformIndices)
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (OpenTK.Graphics.OpenGL.ActiveUniformParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
        public static
        void GetActiveUniforms(Int32 program, Int32 uniformCount, ref Int32 uniformIndices, OpenTK.Graphics.OpenGL.ActiveUniformParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* uniformIndices_ptr = &uniformIndices)
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (OpenTK.Graphics.OpenGL.ActiveUniformParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
        public static
        void GetActiveUniforms(Int32 program, Int32 uniformCount, ref Int32 uniformIndices, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* uniformIndices_ptr = &uniformIndices)
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (OpenTK.Graphics.OpenGL.ActiveUniformParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
        public static
        unsafe void GetActiveUniforms(Int32 program, Int32 uniformCount, Int32* uniformIndices, OpenTK.Graphics.OpenGL.ActiveUniformParameter pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices, (OpenTK.Graphics.OpenGL.ActiveUniformParameter)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
        public static
        unsafe void GetActiveUniforms(Int32 program, Int32 uniformCount, Int32* uniformIndices, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices, (OpenTK.Graphics.OpenGL.ActiveUniformParameter)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
        public static
        void GetActiveUniforms(UInt32 program, Int32 uniformCount, UInt32[] uniformIndices, OpenTK.Graphics.OpenGL.ActiveUniformParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (UInt32* uniformIndices_ptr = uniformIndices)
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (OpenTK.Graphics.OpenGL.ActiveUniformParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
        public static
        void GetActiveUniforms(UInt32 program, Int32 uniformCount, UInt32[] uniformIndices, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (UInt32* uniformIndices_ptr = uniformIndices)
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (OpenTK.Graphics.OpenGL.ActiveUniformParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
        public static
        void GetActiveUniforms(UInt32 program, Int32 uniformCount, ref UInt32 uniformIndices, OpenTK.Graphics.OpenGL.ActiveUniformParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (UInt32* uniformIndices_ptr = &uniformIndices)
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (OpenTK.Graphics.OpenGL.ActiveUniformParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
        public static
        void GetActiveUniforms(UInt32 program, Int32 uniformCount, ref UInt32 uniformIndices, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (UInt32* uniformIndices_ptr = &uniformIndices)
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (OpenTK.Graphics.OpenGL.ActiveUniformParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
        public static
        unsafe void GetActiveUniforms(UInt32 program, Int32 uniformCount, UInt32* uniformIndices, OpenTK.Graphics.OpenGL.ActiveUniformParameter pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices, (OpenTK.Graphics.OpenGL.ActiveUniformParameter)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
        public static
        unsafe void GetActiveUniforms(UInt32 program, Int32 uniformCount, UInt32* uniformIndices, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices, (OpenTK.Graphics.OpenGL.ActiveUniformParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static
        void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] out Int32 obj)
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (Int32* obj_ptr = &obj)
                {
                    Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                    count = *count_ptr;
                    obj = *obj_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static
        unsafe void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] Int32[] obj)
        {
            fixed (Int32* obj_ptr = obj)
            {
                Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj_ptr);
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static
        unsafe void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] Int32* obj)
        {
            Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static
        void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] out UInt32 obj)
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (UInt32* obj_ptr = &obj)
                {
                    Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                    count = *count_ptr;
                    obj = *obj_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static
        unsafe void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] UInt32[] obj)
        {
            fixed (UInt32* obj_ptr = obj)
            {
                Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj_ptr);
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static
        unsafe void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] UInt32* obj)
        {
            Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttribLocation")]
        public static
        Int32 GetAttribLocation(Int32 program, String name)
        {
            return Delegates.glGetAttribLocation((UInt32)program, (String)name);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttribLocation")]
        public static
        Int32 GetAttribLocation(UInt32 program, String name)
        {
            return Delegates.glGetAttribLocation((UInt32)program, (String)name);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static
        void GetBoolean(OpenTK.Graphics.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute] bool[] data)
        {
            unsafe
            {
                fixed (bool* data_ptr = data)
                {
                    Delegates.glGetBooleani_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (bool*)data_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static
        void GetBoolean(OpenTK.Graphics.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute] out bool data)
        {
            unsafe
            {
                fixed (bool* data_ptr = &data)
                {
                    Delegates.glGetBooleani_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (bool*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static
        unsafe void GetBoolean(OpenTK.Graphics.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute] bool* data)
        {
            Delegates.glGetBooleani_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (bool*)data);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static
        void GetBoolean(OpenTK.Graphics.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute] bool[] data)
        {
            unsafe
            {
                fixed (bool* data_ptr = data)
                {
                    Delegates.glGetBooleani_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (bool*)data_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static
        void GetBoolean(OpenTK.Graphics.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute] out bool data)
        {
            unsafe
            {
                fixed (bool* data_ptr = &data)
                {
                    Delegates.glGetBooleani_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (bool*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static
        unsafe void GetBoolean(OpenTK.Graphics.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute] bool* data)
        {
            Delegates.glGetBooleani_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (bool*)data);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static
        void GetBoolean(int target, Int32 index, [OutAttribute] bool[] data)
        {
            unsafe
            {
                fixed (bool* data_ptr = data)
                {
                    Delegates.glGetBooleani_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (bool*)data_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static
        void GetBoolean(int target, Int32 index, [OutAttribute] out bool data)
        {
            unsafe
            {
                fixed (bool* data_ptr = &data)
                {
                    Delegates.glGetBooleani_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (bool*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static
        unsafe void GetBoolean(int target, Int32 index, [OutAttribute] bool* data)
        {
            Delegates.glGetBooleani_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (bool*)data);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static
        void GetBoolean(int target, UInt32 index, [OutAttribute] bool[] data)
        {
            unsafe
            {
                fixed (bool* data_ptr = data)
                {
                    Delegates.glGetBooleani_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (bool*)data_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static
        void GetBoolean(int target, UInt32 index, [OutAttribute] out bool data)
        {
            unsafe
            {
                fixed (bool* data_ptr = &data)
                {
                    Delegates.glGetBooleani_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (bool*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static
        unsafe void GetBoolean(int target, UInt32 index, [OutAttribute] bool* data)
        {
            Delegates.glGetBooleani_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (bool*)data);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static
        void GetBoolean(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute] bool[] @params)
        {
            unsafe
            {
                fixed (bool* @params_ptr = @params)
                {
                    Delegates.glGetBooleanv((OpenTK.Graphics.OpenGL.GetPName)pname, (bool*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static
        void GetBoolean(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute] out bool @params)
        {
            unsafe
            {
                fixed (bool* @params_ptr = &@params)
                {
                    Delegates.glGetBooleanv((OpenTK.Graphics.OpenGL.GetPName)pname, (bool*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static
        unsafe void GetBoolean(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute] bool* @params)
        {
            Delegates.glGetBooleanv((OpenTK.Graphics.OpenGL.GetPName)pname, (bool*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static
        void GetBoolean(int pname, [OutAttribute] bool[] @params)
        {
            unsafe
            {
                fixed (bool* @params_ptr = @params)
                {
                    Delegates.glGetBooleanv((OpenTK.Graphics.OpenGL.GetPName)pname, (bool*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static
        void GetBoolean(int pname, [OutAttribute] out bool @params)
        {
            unsafe
            {
                fixed (bool* @params_ptr = &@params)
                {
                    Delegates.glGetBooleanv((OpenTK.Graphics.OpenGL.GetPName)pname, (bool*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static
        unsafe void GetBoolean(int pname, [OutAttribute] bool* @params)
        {
            Delegates.glGetBooleanv((OpenTK.Graphics.OpenGL.GetPName)pname, (bool*)@params);
        }

        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetBufferParameteri64v")]
        public static
        void GetBufferParameteri64(OpenTK.Graphics.OpenGL.BufferTargetARB target, OpenTK.Graphics.OpenGL.VERSION_3_2 pname, [OutAttribute] Int64[] @params)
        {
            unsafe
            {
                fixed (Int64* @params_ptr = @params)
                {
                    Delegates.glGetBufferParameteri64v((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.VERSION_3_2)pname, (Int64*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetBufferParameteri64v")]
        public static
        void GetBufferParameteri64(OpenTK.Graphics.OpenGL.BufferTargetARB target, OpenTK.Graphics.OpenGL.VERSION_3_2 pname, [OutAttribute] out Int64 @params)
        {
            unsafe
            {
                fixed (Int64* @params_ptr = &@params)
                {
                    Delegates.glGetBufferParameteri64v((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.VERSION_3_2)pname, (Int64*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetBufferParameteri64v")]
        public static
        unsafe void GetBufferParameteri64(OpenTK.Graphics.OpenGL.BufferTargetARB target, OpenTK.Graphics.OpenGL.VERSION_3_2 pname, [OutAttribute] Int64* @params)
        {
            Delegates.glGetBufferParameteri64v((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.VERSION_3_2)pname, (Int64*)@params);
        }

        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetBufferParameteri64v")]
        public static
        void GetBufferParameteri64(int target, int pname, [OutAttribute] Int64[] @params)
        {
            unsafe
            {
                fixed (Int64* @params_ptr = @params)
                {
                    Delegates.glGetBufferParameteri64v((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.VERSION_3_2)pname, (Int64*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetBufferParameteri64v")]
        public static
        void GetBufferParameteri64(int target, int pname, [OutAttribute] out Int64 @params)
        {
            unsafe
            {
                fixed (Int64* @params_ptr = &@params)
                {
                    Delegates.glGetBufferParameteri64v((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.VERSION_3_2)pname, (Int64*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetBufferParameteri64v")]
        public static
        unsafe void GetBufferParameteri64(int target, int pname, [OutAttribute] Int64* @params)
        {
            Delegates.glGetBufferParameteri64v((OpenTK.Graphics.OpenGL.BufferTargetARB)target, (OpenTK.Graphics.OpenGL.VERSION_3_2)pname, (Int64*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        public static
        void GetBufferParameter(OpenTK.Graphics.OpenGL.BufferTarget target, OpenTK.Graphics.OpenGL.BufferParameterName pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetBufferParameteriv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        public static
        void GetBufferParameter(OpenTK.Graphics.OpenGL.BufferTarget target, OpenTK.Graphics.OpenGL.BufferParameterName pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetBufferParameteriv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferParameterName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        public static
        unsafe void GetBufferParameter(OpenTK.Graphics.OpenGL.BufferTarget target, OpenTK.Graphics.OpenGL.BufferParameterName pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetBufferParameteriv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferParameterName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        public static
        void GetBufferParameter(int target, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetBufferParameteriv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        public static
        void GetBufferParameter(int target, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetBufferParameteriv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferParameterName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        public static
        unsafe void GetBufferParameter(int target, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetBufferParameteriv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferParameterName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static
        void GetBufferPointer(OpenTK.Graphics.OpenGL.BufferTarget target, OpenTK.Graphics.OpenGL.BufferPointer pname, [OutAttribute] IntPtr @params)
        {
            Delegates.glGetBufferPointerv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferPointer)pname, (IntPtr)@params);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static
        void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL.BufferTarget target, OpenTK.Graphics.OpenGL.BufferPointer pname, [InAttribute, OutAttribute] T2[] @params)
            where T2 : struct
        {
            GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferPointerv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
            }
            finally
            {
                @params_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static
        void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL.BufferTarget target, OpenTK.Graphics.OpenGL.BufferPointer pname, [InAttribute, OutAttribute] T2[,] @params)
            where T2 : struct
        {
            GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferPointerv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
            }
            finally
            {
                @params_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static
        void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL.BufferTarget target, OpenTK.Graphics.OpenGL.BufferPointer pname, [InAttribute, OutAttribute] T2[,,] @params)
            where T2 : struct
        {
            GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferPointerv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
            }
            finally
            {
                @params_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static
        void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL.BufferTarget target, OpenTK.Graphics.OpenGL.BufferPointer pname, [InAttribute, OutAttribute] ref T2 @params)
            where T2 : struct
        {
            GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferPointerv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                @params = (T2)@params_ptr.Target;
            }
            finally
            {
                @params_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static
        void GetBufferPointer(int target, int pname, [OutAttribute] IntPtr @params)
        {
            Delegates.glGetBufferPointerv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferPointer)pname, (IntPtr)@params);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static
        void GetBufferPointer<T2>(int target, int pname, [InAttribute, OutAttribute] T2[] @params)
            where T2 : struct
        {
            GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferPointerv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
            }
            finally
            {
                @params_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static
        void GetBufferPointer<T2>(int target, int pname, [InAttribute, OutAttribute] T2[,] @params)
            where T2 : struct
        {
            GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferPointerv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
            }
            finally
            {
                @params_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static
        void GetBufferPointer<T2>(int target, int pname, [InAttribute, OutAttribute] T2[,,] @params)
            where T2 : struct
        {
            GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferPointerv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
            }
            finally
            {
                @params_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static
        void GetBufferPointer<T2>(int target, int pname, [InAttribute, OutAttribute] ref T2 @params)
            where T2 : struct
        {
            GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferPointerv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                @params = (T2)@params_ptr.Target;
            }
            finally
            {
                @params_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static
        void GetBufferSubData(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [OutAttribute] IntPtr data)
        {
            Delegates.glGetBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static
        void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static
        void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static
        void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
            where T3 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static
        void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T3)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static
        void GetBufferSubData(int target, IntPtr offset, IntPtr size, [OutAttribute] IntPtr data)
        {
            Delegates.glGetBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static
        void GetBufferSubData<T3>(int target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static
        void GetBufferSubData<T3>(int target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static
        void GetBufferSubData<T3>(int target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
            where T3 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static
        void GetBufferSubData<T3>(int target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct
        {
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T3)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetClipPlane")]
        public static
        void GetClipPlane(OpenTK.Graphics.OpenGL.ClipPlaneName plane, [OutAttribute] Double[] equation)
        {
            unsafe
            {
                fixed (Double* equation_ptr = equation)
                {
                    Delegates.glGetClipPlane((OpenTK.Graphics.OpenGL.ClipPlaneName)plane, (Double*)equation_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetClipPlane")]
        public static
        void GetClipPlane(OpenTK.Graphics.OpenGL.ClipPlaneName plane, [OutAttribute] out Double equation)
        {
            unsafe
            {
                fixed (Double* equation_ptr = &equation)
                {
                    Delegates.glGetClipPlane((OpenTK.Graphics.OpenGL.ClipPlaneName)plane, (Double*)equation_ptr);
                    equation = *equation_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetClipPlane")]
        public static
        unsafe void GetClipPlane(OpenTK.Graphics.OpenGL.ClipPlaneName plane, [OutAttribute] Double* equation)
        {
            Delegates.glGetClipPlane((OpenTK.Graphics.OpenGL.ClipPlaneName)plane, (Double*)equation);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetClipPlane")]
        public static
        void GetClipPlane(int plane, [OutAttribute] Double[] equation)
        {
            unsafe
            {
                fixed (Double* equation_ptr = equation)
                {
                    Delegates.glGetClipPlane((OpenTK.Graphics.OpenGL.ClipPlaneName)plane, (Double*)equation_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetClipPlane")]
        public static
        void GetClipPlane(int plane, [OutAttribute] out Double equation)
        {
            unsafe
            {
                fixed (Double* equation_ptr = &equation)
                {
                    Delegates.glGetClipPlane((OpenTK.Graphics.OpenGL.ClipPlaneName)plane, (Double*)equation_ptr);
                    equation = *equation_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetClipPlane")]
        public static
        unsafe void GetClipPlane(int plane, [OutAttribute] Double* equation)
        {
            Delegates.glGetClipPlane((OpenTK.Graphics.OpenGL.ClipPlaneName)plane, (Double*)equation);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTable")]
        public static
        void GetColorTable(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr table)
        {
            Delegates.glGetColorTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTable")]
        public static
        void GetColorTable<T3>(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T3[] table)
            where T3 : struct
        {
            GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
            }
            finally
            {
                table_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTable")]
        public static
        void GetColorTable<T3>(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T3[,] table)
            where T3 : struct
        {
            GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
            }
            finally
            {
                table_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTable")]
        public static
        void GetColorTable<T3>(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T3[,,] table)
            where T3 : struct
        {
            GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
            }
            finally
            {
                table_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTable")]
        public static
        void GetColorTable<T3>(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T3 table)
            where T3 : struct
        {
            GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                table = (T3)table_ptr.Target;
            }
            finally
            {
                table_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTable")]
        public static
        void GetColorTable(int target, int format, int type, [OutAttribute] IntPtr table)
        {
            Delegates.glGetColorTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTable")]
        public static
        void GetColorTable<T3>(int target, int format, int type, [InAttribute, OutAttribute] T3[] table)
            where T3 : struct
        {
            GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
            }
            finally
            {
                table_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTable")]
        public static
        void GetColorTable<T3>(int target, int format, int type, [InAttribute, OutAttribute] T3[,] table)
            where T3 : struct
        {
            GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
            }
            finally
            {
                table_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTable")]
        public static
        void GetColorTable<T3>(int target, int format, int type, [InAttribute, OutAttribute] T3[,,] table)
            where T3 : struct
        {
            GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
            }
            finally
            {
                table_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTable")]
        public static
        void GetColorTable<T3>(int target, int format, int type, [InAttribute, OutAttribute] ref T3 table)
            where T3 : struct
        {
            GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                table = (T3)table_ptr.Target;
            }
            finally
            {
                table_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTableParameterfv")]
        public static
        void GetColorTableParameter(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.GetColorTableParameterPName pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetColorTableParameterfv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTableParameterfv")]
        public static
        void GetColorTableParameter(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.GetColorTableParameterPName pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetColorTableParameterfv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTableParameterfv")]
        public static
        unsafe void GetColorTableParameter(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.GetColorTableParameterPName pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetColorTableParameterfv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTableParameterfv")]
        public static
        void GetColorTableParameter(int target, int pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetColorTableParameterfv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTableParameterfv")]
        public static
        void GetColorTableParameter(int target, int pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetColorTableParameterfv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTableParameterfv")]
        public static
        unsafe void GetColorTableParameter(int target, int pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetColorTableParameterfv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTableParameteriv")]
        public static
        void GetColorTableParameter(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.GetColorTableParameterPName pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetColorTableParameteriv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTableParameteriv")]
        public static
        void GetColorTableParameter(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.GetColorTableParameterPName pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetColorTableParameteriv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTableParameteriv")]
        public static
        unsafe void GetColorTableParameter(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.GetColorTableParameterPName pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetColorTableParameteriv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTableParameteriv")]
        public static
        void GetColorTableParameter(int target, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetColorTableParameteriv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTableParameteriv")]
        public static
        void GetColorTableParameter(int target, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetColorTableParameteriv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTableParameteriv")]
        public static
        unsafe void GetColorTableParameter(int target, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetColorTableParameteriv((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static
        void GetCompressedTexImage(int target, Int32 level, [OutAttribute] IntPtr img)
        {
            Delegates.glGetCompressedTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img);
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static
        void GetCompressedTexImage<T2>(int target, Int32 level, [InAttribute, OutAttribute] T2[] img)
            where T2 : struct
        {
            GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCompressedTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
            }
            finally
            {
                img_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static
        void GetCompressedTexImage<T2>(int target, Int32 level, [InAttribute, OutAttribute] T2[,] img)
            where T2 : struct
        {
            GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCompressedTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
            }
            finally
            {
                img_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static
        void GetCompressedTexImage<T2>(int target, Int32 level, [InAttribute, OutAttribute] T2[,,] img)
            where T2 : struct
        {
            GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCompressedTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
            }
            finally
            {
                img_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static
        void GetCompressedTexImage<T2>(int target, Int32 level, [InAttribute, OutAttribute] ref T2 img)
            where T2 : struct
        {
            GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCompressedTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                img = (T2)img_ptr.Target;
            }
            finally
            {
                img_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static
        void GetCompressedTexImage(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, [OutAttribute] IntPtr img)
        {
            Delegates.glGetCompressedTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img);
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static
        void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, [InAttribute, OutAttribute] T2[] img)
            where T2 : struct
        {
            GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCompressedTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
            }
            finally
            {
                img_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static
        void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, [InAttribute, OutAttribute] T2[,] img)
            where T2 : struct
        {
            GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCompressedTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
            }
            finally
            {
                img_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static
        void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, [InAttribute, OutAttribute] T2[,,] img)
            where T2 : struct
        {
            GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCompressedTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
            }
            finally
            {
                img_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static
        void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, [InAttribute, OutAttribute] ref T2 img)
            where T2 : struct
        {
            GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCompressedTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                img = (T2)img_ptr.Target;
            }
            finally
            {
                img_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionFilter")]
        public static
        void GetConvolutionFilter(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr image)
        {
            Delegates.glGetConvolutionFilter((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionFilter")]
        public static
        void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T3[] image)
            where T3 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionFilter((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionFilter")]
        public static
        void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T3[,] image)
            where T3 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionFilter((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionFilter")]
        public static
        void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T3[,,] image)
            where T3 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionFilter((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionFilter")]
        public static
        void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T3 image)
            where T3 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionFilter((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                image = (T3)image_ptr.Target;
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionFilter")]
        public static
        void GetConvolutionFilter(int target, int format, int type, [OutAttribute] IntPtr image)
        {
            Delegates.glGetConvolutionFilter((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionFilter")]
        public static
        void GetConvolutionFilter<T3>(int target, int format, int type, [InAttribute, OutAttribute] T3[] image)
            where T3 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionFilter((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionFilter")]
        public static
        void GetConvolutionFilter<T3>(int target, int format, int type, [InAttribute, OutAttribute] T3[,] image)
            where T3 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionFilter((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionFilter")]
        public static
        void GetConvolutionFilter<T3>(int target, int format, int type, [InAttribute, OutAttribute] T3[,,] image)
            where T3 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionFilter((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionFilter")]
        public static
        void GetConvolutionFilter<T3>(int target, int format, int type, [InAttribute, OutAttribute] ref T3 image)
            where T3 : struct
        {
            GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionFilter((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                image = (T3)image_ptr.Target;
            }
            finally
            {
                image_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionParameterfv")]
        public static
        void GetConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.GetConvolutionParameterPName pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetConvolutionParameterfv((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.GetConvolutionParameterPName)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionParameterfv")]
        public static
        void GetConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.GetConvolutionParameterPName pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetConvolutionParameterfv((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.GetConvolutionParameterPName)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionParameterfv")]
        public static
        unsafe void GetConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.GetConvolutionParameterPName pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetConvolutionParameterfv((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.GetConvolutionParameterPName)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionParameterfv")]
        public static
        void GetConvolutionParameter(int target, int pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetConvolutionParameterfv((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.GetConvolutionParameterPName)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionParameterfv")]
        public static
        void GetConvolutionParameter(int target, int pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetConvolutionParameterfv((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.GetConvolutionParameterPName)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionParameterfv")]
        public static
        unsafe void GetConvolutionParameter(int target, int pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetConvolutionParameterfv((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.GetConvolutionParameterPName)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionParameteriv")]
        public static
        void GetConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.GetConvolutionParameterPName pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetConvolutionParameteriv((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.GetConvolutionParameterPName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionParameteriv")]
        public static
        void GetConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.GetConvolutionParameterPName pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetConvolutionParameteriv((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.GetConvolutionParameterPName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionParameteriv")]
        public static
        unsafe void GetConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTarget target, OpenTK.Graphics.OpenGL.GetConvolutionParameterPName pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetConvolutionParameteriv((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.GetConvolutionParameterPName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionParameteriv")]
        public static
        void GetConvolutionParameter(int target, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetConvolutionParameteriv((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.GetConvolutionParameterPName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionParameteriv")]
        public static
        void GetConvolutionParameter(int target, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetConvolutionParameteriv((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.GetConvolutionParameterPName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionParameteriv")]
        public static
        unsafe void GetConvolutionParameter(int target, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetConvolutionParameteriv((OpenTK.Graphics.OpenGL.ConvolutionTarget)target, (OpenTK.Graphics.OpenGL.GetConvolutionParameterPName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
        public static
        void GetDouble(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Delegates.glGetDoublev((OpenTK.Graphics.OpenGL.GetPName)pname, (Double*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
        public static
        void GetDouble(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Delegates.glGetDoublev((OpenTK.Graphics.OpenGL.GetPName)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
        public static
        unsafe void GetDouble(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute] Double* @params)
        {
            Delegates.glGetDoublev((OpenTK.Graphics.OpenGL.GetPName)pname, (Double*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
        public static
        void GetDouble(int pname, [OutAttribute] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Delegates.glGetDoublev((OpenTK.Graphics.OpenGL.GetPName)pname, (Double*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
        public static
        void GetDouble(int pname, [OutAttribute] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Delegates.glGetDoublev((OpenTK.Graphics.OpenGL.GetPName)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
        public static
        unsafe void GetDouble(int pname, [OutAttribute] Double* @params)
        {
            Delegates.glGetDoublev((OpenTK.Graphics.OpenGL.GetPName)pname, (Double*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetError")]
        public static
        OpenTK.Graphics.OpenGL.ErrorCode GetError()
        {
            return Delegates.glGetError();
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static
        void GetFloat(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetFloatv((OpenTK.Graphics.OpenGL.GetPName)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static
        void GetFloat(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetFloatv((OpenTK.Graphics.OpenGL.GetPName)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static
        unsafe void GetFloat(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetFloatv((OpenTK.Graphics.OpenGL.GetPName)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static
        void GetFloat(int pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetFloatv((OpenTK.Graphics.OpenGL.GetPName)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static
        void GetFloat(int pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetFloatv((OpenTK.Graphics.OpenGL.GetPName)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static
        unsafe void GetFloat(int pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetFloatv((OpenTK.Graphics.OpenGL.GetPName)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetFragDataLocation")]
        public static
        Int32 GetFragDataLocation(Int32 program, String name)
        {
            return Delegates.glGetFragDataLocation((UInt32)program, (String)name);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetFragDataLocation")]
        public static
        Int32 GetFragDataLocation(UInt32 program, String name)
        {
            return Delegates.glGetFragDataLocation((UInt32)program, (String)name);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        public static
        void GetFramebufferAttachmentParameter(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.FramebufferParameterName pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetFramebufferAttachmentParameteriv((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.FramebufferParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        public static
        void GetFramebufferAttachmentParameter(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.FramebufferParameterName pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetFramebufferAttachmentParameteriv((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.FramebufferParameterName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        public static
        unsafe void GetFramebufferAttachmentParameter(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.FramebufferParameterName pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetFramebufferAttachmentParameteriv((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.FramebufferParameterName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        public static
        void GetFramebufferAttachmentParameter(int target, int attachment, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetFramebufferAttachmentParameteriv((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.FramebufferParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        public static
        void GetFramebufferAttachmentParameter(int target, int attachment, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetFramebufferAttachmentParameteriv((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.FramebufferParameterName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        public static
        unsafe void GetFramebufferAttachmentParameter(int target, int attachment, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetFramebufferAttachmentParameteriv((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.FramebufferParameterName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogram")]
        public static
        void GetHistogram(OpenTK.Graphics.OpenGL.HistogramTarget target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr values)
        {
            Delegates.glGetHistogram((OpenTK.Graphics.OpenGL.HistogramTarget)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogram")]
        public static
        void GetHistogram<T4>(OpenTK.Graphics.OpenGL.HistogramTarget target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[] values)
            where T4 : struct
        {
            GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogram((OpenTK.Graphics.OpenGL.HistogramTarget)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
            }
            finally
            {
                values_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogram")]
        public static
        void GetHistogram<T4>(OpenTK.Graphics.OpenGL.HistogramTarget target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[,] values)
            where T4 : struct
        {
            GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogram((OpenTK.Graphics.OpenGL.HistogramTarget)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
            }
            finally
            {
                values_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogram")]
        public static
        void GetHistogram<T4>(OpenTK.Graphics.OpenGL.HistogramTarget target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[,,] values)
            where T4 : struct
        {
            GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogram((OpenTK.Graphics.OpenGL.HistogramTarget)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
            }
            finally
            {
                values_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogram")]
        public static
        void GetHistogram<T4>(OpenTK.Graphics.OpenGL.HistogramTarget target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T4 values)
            where T4 : struct
        {
            GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogram((OpenTK.Graphics.OpenGL.HistogramTarget)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                values = (T4)values_ptr.Target;
            }
            finally
            {
                values_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogram")]
        public static
        void GetHistogram(int target, bool reset, int format, int type, [OutAttribute] IntPtr values)
        {
            Delegates.glGetHistogram((OpenTK.Graphics.OpenGL.HistogramTarget)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogram")]
        public static
        void GetHistogram<T4>(int target, bool reset, int format, int type, [InAttribute, OutAttribute] T4[] values)
            where T4 : struct
        {
            GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogram((OpenTK.Graphics.OpenGL.HistogramTarget)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
            }
            finally
            {
                values_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogram")]
        public static
        void GetHistogram<T4>(int target, bool reset, int format, int type, [InAttribute, OutAttribute] T4[,] values)
            where T4 : struct
        {
            GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogram((OpenTK.Graphics.OpenGL.HistogramTarget)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
            }
            finally
            {
                values_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogram")]
        public static
        void GetHistogram<T4>(int target, bool reset, int format, int type, [InAttribute, OutAttribute] T4[,,] values)
            where T4 : struct
        {
            GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogram((OpenTK.Graphics.OpenGL.HistogramTarget)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
            }
            finally
            {
                values_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogram")]
        public static
        void GetHistogram<T4>(int target, bool reset, int format, int type, [InAttribute, OutAttribute] ref T4 values)
            where T4 : struct
        {
            GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogram((OpenTK.Graphics.OpenGL.HistogramTarget)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                values = (T4)values_ptr.Target;
            }
            finally
            {
                values_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogramParameterfv")]
        public static
        void GetHistogramParameter(OpenTK.Graphics.OpenGL.HistogramTarget target, OpenTK.Graphics.OpenGL.GetHistogramParameterPName pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetHistogramParameterfv((OpenTK.Graphics.OpenGL.HistogramTarget)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPName)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogramParameterfv")]
        public static
        void GetHistogramParameter(OpenTK.Graphics.OpenGL.HistogramTarget target, OpenTK.Graphics.OpenGL.GetHistogramParameterPName pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetHistogramParameterfv((OpenTK.Graphics.OpenGL.HistogramTarget)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPName)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogramParameterfv")]
        public static
        unsafe void GetHistogramParameter(OpenTK.Graphics.OpenGL.HistogramTarget target, OpenTK.Graphics.OpenGL.GetHistogramParameterPName pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetHistogramParameterfv((OpenTK.Graphics.OpenGL.HistogramTarget)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPName)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogramParameterfv")]
        public static
        void GetHistogramParameter(int target, int pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetHistogramParameterfv((OpenTK.Graphics.OpenGL.HistogramTarget)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPName)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogramParameterfv")]
        public static
        void GetHistogramParameter(int target, int pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetHistogramParameterfv((OpenTK.Graphics.OpenGL.HistogramTarget)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPName)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogramParameterfv")]
        public static
        unsafe void GetHistogramParameter(int target, int pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetHistogramParameterfv((OpenTK.Graphics.OpenGL.HistogramTarget)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPName)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogramParameteriv")]
        public static
        void GetHistogramParameter(OpenTK.Graphics.OpenGL.HistogramTarget target, OpenTK.Graphics.OpenGL.GetHistogramParameterPName pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetHistogramParameteriv((OpenTK.Graphics.OpenGL.HistogramTarget)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogramParameteriv")]
        public static
        void GetHistogramParameter(OpenTK.Graphics.OpenGL.HistogramTarget target, OpenTK.Graphics.OpenGL.GetHistogramParameterPName pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetHistogramParameteriv((OpenTK.Graphics.OpenGL.HistogramTarget)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogramParameteriv")]
        public static
        unsafe void GetHistogramParameter(OpenTK.Graphics.OpenGL.HistogramTarget target, OpenTK.Graphics.OpenGL.GetHistogramParameterPName pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetHistogramParameteriv((OpenTK.Graphics.OpenGL.HistogramTarget)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogramParameteriv")]
        public static
        void GetHistogramParameter(int target, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetHistogramParameteriv((OpenTK.Graphics.OpenGL.HistogramTarget)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogramParameteriv")]
        public static
        void GetHistogramParameter(int target, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetHistogramParameteriv((OpenTK.Graphics.OpenGL.HistogramTarget)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogramParameteriv")]
        public static
        unsafe void GetHistogramParameter(int target, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetHistogramParameteriv((OpenTK.Graphics.OpenGL.HistogramTarget)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        public static
        void GetInteger64(int target, Int32 index, [OutAttribute] Int64[] data)
        {
            unsafe
            {
                fixed (Int64* data_ptr = data)
                {
                    Delegates.glGetInteger64i_v((OpenTK.Graphics.OpenGL.VERSION_3_2)target, (UInt32)index, (Int64*)data_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        public static
        void GetInteger64(int target, Int32 index, [OutAttribute] out Int64 data)
        {
            unsafe
            {
                fixed (Int64* data_ptr = &data)
                {
                    Delegates.glGetInteger64i_v((OpenTK.Graphics.OpenGL.VERSION_3_2)target, (UInt32)index, (Int64*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        public static
        unsafe void GetInteger64(int target, Int32 index, [OutAttribute] Int64* data)
        {
            Delegates.glGetInteger64i_v((OpenTK.Graphics.OpenGL.VERSION_3_2)target, (UInt32)index, (Int64*)data);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        public static
        void GetInteger64(int target, UInt32 index, [OutAttribute] Int64[] data)
        {
            unsafe
            {
                fixed (Int64* data_ptr = data)
                {
                    Delegates.glGetInteger64i_v((OpenTK.Graphics.OpenGL.VERSION_3_2)target, (UInt32)index, (Int64*)data_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        public static
        void GetInteger64(int target, UInt32 index, [OutAttribute] out Int64 data)
        {
            unsafe
            {
                fixed (Int64* data_ptr = &data)
                {
                    Delegates.glGetInteger64i_v((OpenTK.Graphics.OpenGL.VERSION_3_2)target, (UInt32)index, (Int64*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        public static
        unsafe void GetInteger64(int target, UInt32 index, [OutAttribute] Int64* data)
        {
            Delegates.glGetInteger64i_v((OpenTK.Graphics.OpenGL.VERSION_3_2)target, (UInt32)index, (Int64*)data);
        }

        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        public static
        void GetInteger64(OpenTK.Graphics.OpenGL.VERSION_3_2 target, Int32 index, [OutAttribute] Int64[] data)
        {
            unsafe
            {
                fixed (Int64* data_ptr = data)
                {
                    Delegates.glGetInteger64i_v((OpenTK.Graphics.OpenGL.VERSION_3_2)target, (UInt32)index, (Int64*)data_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        public static
        void GetInteger64(OpenTK.Graphics.OpenGL.VERSION_3_2 target, Int32 index, [OutAttribute] out Int64 data)
        {
            unsafe
            {
                fixed (Int64* data_ptr = &data)
                {
                    Delegates.glGetInteger64i_v((OpenTK.Graphics.OpenGL.VERSION_3_2)target, (UInt32)index, (Int64*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        public static
        unsafe void GetInteger64(OpenTK.Graphics.OpenGL.VERSION_3_2 target, Int32 index, [OutAttribute] Int64* data)
        {
            Delegates.glGetInteger64i_v((OpenTK.Graphics.OpenGL.VERSION_3_2)target, (UInt32)index, (Int64*)data);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        public static
        void GetInteger64(OpenTK.Graphics.OpenGL.VERSION_3_2 target, UInt32 index, [OutAttribute] Int64[] data)
        {
            unsafe
            {
                fixed (Int64* data_ptr = data)
                {
                    Delegates.glGetInteger64i_v((OpenTK.Graphics.OpenGL.VERSION_3_2)target, (UInt32)index, (Int64*)data_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        public static
        void GetInteger64(OpenTK.Graphics.OpenGL.VERSION_3_2 target, UInt32 index, [OutAttribute] out Int64 data)
        {
            unsafe
            {
                fixed (Int64* data_ptr = &data)
                {
                    Delegates.glGetInteger64i_v((OpenTK.Graphics.OpenGL.VERSION_3_2)target, (UInt32)index, (Int64*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        public static
        unsafe void GetInteger64(OpenTK.Graphics.OpenGL.VERSION_3_2 target, UInt32 index, [OutAttribute] Int64* data)
        {
            Delegates.glGetInteger64i_v((OpenTK.Graphics.OpenGL.VERSION_3_2)target, (UInt32)index, (Int64*)data);
        }

        [AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glGetInteger64v")]
        public static
        void GetInteger64(OpenTK.Graphics.OpenGL.ARB_sync pname, [OutAttribute] Int64[] @params)
        {
            unsafe
            {
                fixed (Int64* @params_ptr = @params)
                {
                    Delegates.glGetInteger64v((OpenTK.Graphics.OpenGL.ARB_sync)pname, (Int64*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glGetInteger64v")]
        public static
        void GetInteger64(OpenTK.Graphics.OpenGL.ARB_sync pname, [OutAttribute] out Int64 @params)
        {
            unsafe
            {
                fixed (Int64* @params_ptr = &@params)
                {
                    Delegates.glGetInteger64v((OpenTK.Graphics.OpenGL.ARB_sync)pname, (Int64*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glGetInteger64v")]
        public static
        unsafe void GetInteger64(OpenTK.Graphics.OpenGL.ARB_sync pname, [OutAttribute] Int64* @params)
        {
            Delegates.glGetInteger64v((OpenTK.Graphics.OpenGL.ARB_sync)pname, (Int64*)@params);
        }

        [AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glGetInteger64v")]
        public static
        void GetInteger64(int pname, [OutAttribute] Int64[] @params)
        {
            unsafe
            {
                fixed (Int64* @params_ptr = @params)
                {
                    Delegates.glGetInteger64v((OpenTK.Graphics.OpenGL.ARB_sync)pname, (Int64*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glGetInteger64v")]
        public static
        void GetInteger64(int pname, [OutAttribute] out Int64 @params)
        {
            unsafe
            {
                fixed (Int64* @params_ptr = &@params)
                {
                    Delegates.glGetInteger64v((OpenTK.Graphics.OpenGL.ARB_sync)pname, (Int64*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glGetInteger64v")]
        public static
        unsafe void GetInteger64(int pname, [OutAttribute] Int64* @params)
        {
            Delegates.glGetInteger64v((OpenTK.Graphics.OpenGL.ARB_sync)pname, (Int64*)@params);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static
        void GetInteger(OpenTK.Graphics.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute] Int32[] data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = data)
                {
                    Delegates.glGetIntegeri_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static
        void GetInteger(OpenTK.Graphics.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute] out Int32 data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = &data)
                {
                    Delegates.glGetIntegeri_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static
        unsafe void GetInteger(OpenTK.Graphics.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute] Int32* data)
        {
            Delegates.glGetIntegeri_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (Int32*)data);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static
        void GetInteger(OpenTK.Graphics.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute] Int32[] data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = data)
                {
                    Delegates.glGetIntegeri_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static
        void GetInteger(OpenTK.Graphics.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute] out Int32 data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = &data)
                {
                    Delegates.glGetIntegeri_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static
        unsafe void GetInteger(OpenTK.Graphics.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute] Int32* data)
        {
            Delegates.glGetIntegeri_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (Int32*)data);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static
        void GetInteger(int target, Int32 index, [OutAttribute] Int32[] data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = data)
                {
                    Delegates.glGetIntegeri_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static
        void GetInteger(int target, Int32 index, [OutAttribute] out Int32 data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = &data)
                {
                    Delegates.glGetIntegeri_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static
        unsafe void GetInteger(int target, Int32 index, [OutAttribute] Int32* data)
        {
            Delegates.glGetIntegeri_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (Int32*)data);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static
        void GetInteger(int target, UInt32 index, [OutAttribute] Int32[] data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = data)
                {
                    Delegates.glGetIntegeri_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static
        void GetInteger(int target, UInt32 index, [OutAttribute] out Int32 data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = &data)
                {
                    Delegates.glGetIntegeri_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static
        unsafe void GetInteger(int target, UInt32 index, [OutAttribute] Int32* data)
        {
            Delegates.glGetIntegeri_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (Int32*)data);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static
        void GetInteger(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetIntegerv((OpenTK.Graphics.OpenGL.GetPName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static
        void GetInteger(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetIntegerv((OpenTK.Graphics.OpenGL.GetPName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static
        unsafe void GetInteger(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetIntegerv((OpenTK.Graphics.OpenGL.GetPName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static
        void GetInteger(int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetIntegerv((OpenTK.Graphics.OpenGL.GetPName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static
        void GetInteger(int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetIntegerv((OpenTK.Graphics.OpenGL.GetPName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static
        unsafe void GetInteger(int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetIntegerv((OpenTK.Graphics.OpenGL.GetPName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetLightfv")]
        public static
        void GetLight(int light, int pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetLightfv((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetLightfv")]
        public static
        void GetLight(int light, int pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetLightfv((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetLightfv")]
        public static
        unsafe void GetLight(int light, int pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetLightfv((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetLightfv")]
        public static
        void GetLight(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetLightfv((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetLightfv")]
        public static
        void GetLight(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetLightfv((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetLightfv")]
        public static
        unsafe void GetLight(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetLightfv((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetLightiv")]
        public static
        void GetLight(int light, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetLightiv((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetLightiv")]
        public static
        void GetLight(int light, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetLightiv((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetLightiv")]
        public static
        unsafe void GetLight(int light, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetLightiv((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetLightiv")]
        public static
        void GetLight(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetLightiv((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetLightiv")]
        public static
        void GetLight(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetLightiv((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetLightiv")]
        public static
        unsafe void GetLight(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetLightiv((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapdv")]
        public static
        void GetMap(int target, int query, [OutAttribute] Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glGetMapdv((OpenTK.Graphics.OpenGL.MapTarget)target, (OpenTK.Graphics.OpenGL.GetMapQuery)query, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapdv")]
        public static
        void GetMap(int target, int query, [OutAttribute] out Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glGetMapdv((OpenTK.Graphics.OpenGL.MapTarget)target, (OpenTK.Graphics.OpenGL.GetMapQuery)query, (Double*)v_ptr);
                    v = *v_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapdv")]
        public static
        unsafe void GetMap(int target, int query, [OutAttribute] Double* v)
        {
            Delegates.glGetMapdv((OpenTK.Graphics.OpenGL.MapTarget)target, (OpenTK.Graphics.OpenGL.GetMapQuery)query, (Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapdv")]
        public static
        void GetMap(OpenTK.Graphics.OpenGL.MapTarget target, OpenTK.Graphics.OpenGL.GetMapQuery query, [OutAttribute] Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glGetMapdv((OpenTK.Graphics.OpenGL.MapTarget)target, (OpenTK.Graphics.OpenGL.GetMapQuery)query, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapdv")]
        public static
        void GetMap(OpenTK.Graphics.OpenGL.MapTarget target, OpenTK.Graphics.OpenGL.GetMapQuery query, [OutAttribute] out Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glGetMapdv((OpenTK.Graphics.OpenGL.MapTarget)target, (OpenTK.Graphics.OpenGL.GetMapQuery)query, (Double*)v_ptr);
                    v = *v_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapdv")]
        public static
        unsafe void GetMap(OpenTK.Graphics.OpenGL.MapTarget target, OpenTK.Graphics.OpenGL.GetMapQuery query, [OutAttribute] Double* v)
        {
            Delegates.glGetMapdv((OpenTK.Graphics.OpenGL.MapTarget)target, (OpenTK.Graphics.OpenGL.GetMapQuery)query, (Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapfv")]
        public static
        void GetMap(int target, int query, [OutAttribute] Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glGetMapfv((OpenTK.Graphics.OpenGL.MapTarget)target, (OpenTK.Graphics.OpenGL.GetMapQuery)query, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapfv")]
        public static
        void GetMap(int target, int query, [OutAttribute] out Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glGetMapfv((OpenTK.Graphics.OpenGL.MapTarget)target, (OpenTK.Graphics.OpenGL.GetMapQuery)query, (Single*)v_ptr);
                    v = *v_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapfv")]
        public static
        unsafe void GetMap(int target, int query, [OutAttribute] Single* v)
        {
            Delegates.glGetMapfv((OpenTK.Graphics.OpenGL.MapTarget)target, (OpenTK.Graphics.OpenGL.GetMapQuery)query, (Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapfv")]
        public static
        void GetMap(OpenTK.Graphics.OpenGL.MapTarget target, OpenTK.Graphics.OpenGL.GetMapQuery query, [OutAttribute] Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glGetMapfv((OpenTK.Graphics.OpenGL.MapTarget)target, (OpenTK.Graphics.OpenGL.GetMapQuery)query, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapfv")]
        public static
        void GetMap(OpenTK.Graphics.OpenGL.MapTarget target, OpenTK.Graphics.OpenGL.GetMapQuery query, [OutAttribute] out Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glGetMapfv((OpenTK.Graphics.OpenGL.MapTarget)target, (OpenTK.Graphics.OpenGL.GetMapQuery)query, (Single*)v_ptr);
                    v = *v_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapfv")]
        public static
        unsafe void GetMap(OpenTK.Graphics.OpenGL.MapTarget target, OpenTK.Graphics.OpenGL.GetMapQuery query, [OutAttribute] Single* v)
        {
            Delegates.glGetMapfv((OpenTK.Graphics.OpenGL.MapTarget)target, (OpenTK.Graphics.OpenGL.GetMapQuery)query, (Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapiv")]
        public static
        void GetMap(int target, int query, [OutAttribute] Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glGetMapiv((OpenTK.Graphics.OpenGL.MapTarget)target, (OpenTK.Graphics.OpenGL.GetMapQuery)query, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapiv")]
        public static
        void GetMap(int target, int query, [OutAttribute] out Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glGetMapiv((OpenTK.Graphics.OpenGL.MapTarget)target, (OpenTK.Graphics.OpenGL.GetMapQuery)query, (Int32*)v_ptr);
                    v = *v_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapiv")]
        public static
        unsafe void GetMap(int target, int query, [OutAttribute] Int32* v)
        {
            Delegates.glGetMapiv((OpenTK.Graphics.OpenGL.MapTarget)target, (OpenTK.Graphics.OpenGL.GetMapQuery)query, (Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapiv")]
        public static
        void GetMap(OpenTK.Graphics.OpenGL.MapTarget target, OpenTK.Graphics.OpenGL.GetMapQuery query, [OutAttribute] Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glGetMapiv((OpenTK.Graphics.OpenGL.MapTarget)target, (OpenTK.Graphics.OpenGL.GetMapQuery)query, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapiv")]
        public static
        void GetMap(OpenTK.Graphics.OpenGL.MapTarget target, OpenTK.Graphics.OpenGL.GetMapQuery query, [OutAttribute] out Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glGetMapiv((OpenTK.Graphics.OpenGL.MapTarget)target, (OpenTK.Graphics.OpenGL.GetMapQuery)query, (Int32*)v_ptr);
                    v = *v_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapiv")]
        public static
        unsafe void GetMap(OpenTK.Graphics.OpenGL.MapTarget target, OpenTK.Graphics.OpenGL.GetMapQuery query, [OutAttribute] Int32* v)
        {
            Delegates.glGetMapiv((OpenTK.Graphics.OpenGL.MapTarget)target, (OpenTK.Graphics.OpenGL.GetMapQuery)query, (Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        public static
        void GetMaterial(int face, int pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetMaterialfv((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        public static
        void GetMaterial(int face, int pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetMaterialfv((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        public static
        unsafe void GetMaterial(int face, int pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetMaterialfv((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        public static
        void GetMaterial(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetMaterialfv((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        public static
        void GetMaterial(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetMaterialfv((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        public static
        unsafe void GetMaterial(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetMaterialfv((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMaterialiv")]
        public static
        void GetMaterial(int face, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetMaterialiv((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMaterialiv")]
        public static
        void GetMaterial(int face, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetMaterialiv((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMaterialiv")]
        public static
        unsafe void GetMaterial(int face, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetMaterialiv((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMaterialiv")]
        public static
        void GetMaterial(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetMaterialiv((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMaterialiv")]
        public static
        void GetMaterial(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetMaterialiv((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMaterialiv")]
        public static
        unsafe void GetMaterial(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetMaterialiv((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmax")]
        public static
        void GetMinmax(int target, bool reset, int format, int type, [OutAttribute] IntPtr values)
        {
            Delegates.glGetMinmax((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmax")]
        public static
        void GetMinmax<T4>(int target, bool reset, int format, int type, [InAttribute, OutAttribute] T4[] values)
            where T4 : struct
        {
            GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmax((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
            }
            finally
            {
                values_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmax")]
        public static
        void GetMinmax<T4>(int target, bool reset, int format, int type, [InAttribute, OutAttribute] T4[,] values)
            where T4 : struct
        {
            GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmax((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
            }
            finally
            {
                values_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmax")]
        public static
        void GetMinmax<T4>(int target, bool reset, int format, int type, [InAttribute, OutAttribute] T4[,,] values)
            where T4 : struct
        {
            GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmax((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
            }
            finally
            {
                values_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmax")]
        public static
        void GetMinmax<T4>(int target, bool reset, int format, int type, [InAttribute, OutAttribute] ref T4 values)
            where T4 : struct
        {
            GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmax((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                values = (T4)values_ptr.Target;
            }
            finally
            {
                values_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmax")]
        public static
        void GetMinmax(OpenTK.Graphics.OpenGL.MinmaxTarget target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr values)
        {
            Delegates.glGetMinmax((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmax")]
        public static
        void GetMinmax<T4>(OpenTK.Graphics.OpenGL.MinmaxTarget target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[] values)
            where T4 : struct
        {
            GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmax((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
            }
            finally
            {
                values_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmax")]
        public static
        void GetMinmax<T4>(OpenTK.Graphics.OpenGL.MinmaxTarget target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[,] values)
            where T4 : struct
        {
            GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmax((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
            }
            finally
            {
                values_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmax")]
        public static
        void GetMinmax<T4>(OpenTK.Graphics.OpenGL.MinmaxTarget target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[,,] values)
            where T4 : struct
        {
            GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmax((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
            }
            finally
            {
                values_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmax")]
        public static
        void GetMinmax<T4>(OpenTK.Graphics.OpenGL.MinmaxTarget target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T4 values)
            where T4 : struct
        {
            GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmax((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                values = (T4)values_ptr.Target;
            }
            finally
            {
                values_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmaxParameterfv")]
        public static
        void GetMinmaxParameter(int target, int pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetMinmaxParameterfv((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPName)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmaxParameterfv")]
        public static
        void GetMinmaxParameter(int target, int pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetMinmaxParameterfv((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPName)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmaxParameterfv")]
        public static
        unsafe void GetMinmaxParameter(int target, int pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetMinmaxParameterfv((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPName)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmaxParameterfv")]
        public static
        void GetMinmaxParameter(OpenTK.Graphics.OpenGL.MinmaxTarget target, OpenTK.Graphics.OpenGL.GetMinmaxParameterPName pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetMinmaxParameterfv((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPName)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmaxParameterfv")]
        public static
        void GetMinmaxParameter(OpenTK.Graphics.OpenGL.MinmaxTarget target, OpenTK.Graphics.OpenGL.GetMinmaxParameterPName pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetMinmaxParameterfv((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPName)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmaxParameterfv")]
        public static
        unsafe void GetMinmaxParameter(OpenTK.Graphics.OpenGL.MinmaxTarget target, OpenTK.Graphics.OpenGL.GetMinmaxParameterPName pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetMinmaxParameterfv((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPName)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmaxParameteriv")]
        public static
        void GetMinmaxParameter(int target, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetMinmaxParameteriv((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmaxParameteriv")]
        public static
        void GetMinmaxParameter(int target, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetMinmaxParameteriv((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmaxParameteriv")]
        public static
        unsafe void GetMinmaxParameter(int target, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetMinmaxParameteriv((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmaxParameteriv")]
        public static
        void GetMinmaxParameter(OpenTK.Graphics.OpenGL.MinmaxTarget target, OpenTK.Graphics.OpenGL.GetMinmaxParameterPName pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetMinmaxParameteriv((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmaxParameteriv")]
        public static
        void GetMinmaxParameter(OpenTK.Graphics.OpenGL.MinmaxTarget target, OpenTK.Graphics.OpenGL.GetMinmaxParameterPName pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetMinmaxParameteriv((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmaxParameteriv")]
        public static
        unsafe void GetMinmaxParameter(OpenTK.Graphics.OpenGL.MinmaxTarget target, OpenTK.Graphics.OpenGL.GetMinmaxParameterPName pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetMinmaxParameteriv((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glGetMultisamplefv")]
        public static
        void GetMultisample(OpenTK.Graphics.OpenGL.GetMultisamplePName pname, Int32 index, [OutAttribute] Single[] val)
        {
            unsafe
            {
                fixed (Single* val_ptr = val)
                {
                    Delegates.glGetMultisamplefv((OpenTK.Graphics.OpenGL.GetMultisamplePName)pname, (UInt32)index, (Single*)val_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glGetMultisamplefv")]
        public static
        void GetMultisample(OpenTK.Graphics.OpenGL.GetMultisamplePName pname, Int32 index, [OutAttribute] out Single val)
        {
            unsafe
            {
                fixed (Single* val_ptr = &val)
                {
                    Delegates.glGetMultisamplefv((OpenTK.Graphics.OpenGL.GetMultisamplePName)pname, (UInt32)index, (Single*)val_ptr);
                    val = *val_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glGetMultisamplefv")]
        public static
        unsafe void GetMultisample(OpenTK.Graphics.OpenGL.GetMultisamplePName pname, Int32 index, [OutAttribute] Single* val)
        {
            Delegates.glGetMultisamplefv((OpenTK.Graphics.OpenGL.GetMultisamplePName)pname, (UInt32)index, (Single*)val);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glGetMultisamplefv")]
        public static
        void GetMultisample(OpenTK.Graphics.OpenGL.GetMultisamplePName pname, UInt32 index, [OutAttribute] Single[] val)
        {
            unsafe
            {
                fixed (Single* val_ptr = val)
                {
                    Delegates.glGetMultisamplefv((OpenTK.Graphics.OpenGL.GetMultisamplePName)pname, (UInt32)index, (Single*)val_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glGetMultisamplefv")]
        public static
        void GetMultisample(OpenTK.Graphics.OpenGL.GetMultisamplePName pname, UInt32 index, [OutAttribute] out Single val)
        {
            unsafe
            {
                fixed (Single* val_ptr = &val)
                {
                    Delegates.glGetMultisamplefv((OpenTK.Graphics.OpenGL.GetMultisamplePName)pname, (UInt32)index, (Single*)val_ptr);
                    val = *val_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glGetMultisamplefv")]
        public static
        unsafe void GetMultisample(OpenTK.Graphics.OpenGL.GetMultisamplePName pname, UInt32 index, [OutAttribute] Single* val)
        {
            Delegates.glGetMultisamplefv((OpenTK.Graphics.OpenGL.GetMultisamplePName)pname, (UInt32)index, (Single*)val);
        }

        [AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glGetMultisamplefv")]
        public static
        void GetMultisample(int pname, Int32 index, [OutAttribute] Single[] val)
        {
            unsafe
            {
                fixed (Single* val_ptr = val)
                {
                    Delegates.glGetMultisamplefv((OpenTK.Graphics.OpenGL.GetMultisamplePName)pname, (UInt32)index, (Single*)val_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glGetMultisamplefv")]
        public static
        void GetMultisample(int pname, Int32 index, [OutAttribute] out Single val)
        {
            unsafe
            {
                fixed (Single* val_ptr = &val)
                {
                    Delegates.glGetMultisamplefv((OpenTK.Graphics.OpenGL.GetMultisamplePName)pname, (UInt32)index, (Single*)val_ptr);
                    val = *val_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glGetMultisamplefv")]
        public static
        unsafe void GetMultisample(int pname, Int32 index, [OutAttribute] Single* val)
        {
            Delegates.glGetMultisamplefv((OpenTK.Graphics.OpenGL.GetMultisamplePName)pname, (UInt32)index, (Single*)val);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glGetMultisamplefv")]
        public static
        void GetMultisample(int pname, UInt32 index, [OutAttribute] Single[] val)
        {
            unsafe
            {
                fixed (Single* val_ptr = val)
                {
                    Delegates.glGetMultisamplefv((OpenTK.Graphics.OpenGL.GetMultisamplePName)pname, (UInt32)index, (Single*)val_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glGetMultisamplefv")]
        public static
        void GetMultisample(int pname, UInt32 index, [OutAttribute] out Single val)
        {
            unsafe
            {
                fixed (Single* val_ptr = &val)
                {
                    Delegates.glGetMultisamplefv((OpenTK.Graphics.OpenGL.GetMultisamplePName)pname, (UInt32)index, (Single*)val_ptr);
                    val = *val_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glGetMultisamplefv")]
        public static
        unsafe void GetMultisample(int pname, UInt32 index, [OutAttribute] Single* val)
        {
            Delegates.glGetMultisamplefv((OpenTK.Graphics.OpenGL.GetMultisamplePName)pname, (UInt32)index, (Single*)val);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapfv")]
        public static
        void GetPixelMap(int map, [OutAttribute] Single[] values)
        {
            unsafe
            {
                fixed (Single* values_ptr = values)
                {
                    Delegates.glGetPixelMapfv((OpenTK.Graphics.OpenGL.PixelMap)map, (Single*)values_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapfv")]
        public static
        void GetPixelMap(int map, [OutAttribute] out Single values)
        {
            unsafe
            {
                fixed (Single* values_ptr = &values)
                {
                    Delegates.glGetPixelMapfv((OpenTK.Graphics.OpenGL.PixelMap)map, (Single*)values_ptr);
                    values = *values_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapfv")]
        public static
        unsafe void GetPixelMap(int map, [OutAttribute] Single* values)
        {
            Delegates.glGetPixelMapfv((OpenTK.Graphics.OpenGL.PixelMap)map, (Single*)values);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapfv")]
        public static
        void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute] Single[] values)
        {
            unsafe
            {
                fixed (Single* values_ptr = values)
                {
                    Delegates.glGetPixelMapfv((OpenTK.Graphics.OpenGL.PixelMap)map, (Single*)values_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapfv")]
        public static
        void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute] out Single values)
        {
            unsafe
            {
                fixed (Single* values_ptr = &values)
                {
                    Delegates.glGetPixelMapfv((OpenTK.Graphics.OpenGL.PixelMap)map, (Single*)values_ptr);
                    values = *values_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapfv")]
        public static
        unsafe void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute] Single* values)
        {
            Delegates.glGetPixelMapfv((OpenTK.Graphics.OpenGL.PixelMap)map, (Single*)values);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        public static
        void GetPixelMap(int map, [OutAttribute] Int32[] values)
        {
            unsafe
            {
                fixed (Int32* values_ptr = values)
                {
                    Delegates.glGetPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt32*)values_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        public static
        void GetPixelMap(int map, [OutAttribute] out Int32 values)
        {
            unsafe
            {
                fixed (Int32* values_ptr = &values)
                {
                    Delegates.glGetPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt32*)values_ptr);
                    values = *values_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        public static
        unsafe void GetPixelMap(int map, [OutAttribute] Int32* values)
        {
            Delegates.glGetPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt32*)values);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        public static
        void GetPixelMap(int map, [OutAttribute] UInt32[] values)
        {
            unsafe
            {
                fixed (UInt32* values_ptr = values)
                {
                    Delegates.glGetPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt32*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        public static
        void GetPixelMap(int map, [OutAttribute] out UInt32 values)
        {
            unsafe
            {
                fixed (UInt32* values_ptr = &values)
                {
                    Delegates.glGetPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt32*)values_ptr);
                    values = *values_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        public static
        unsafe void GetPixelMap(int map, [OutAttribute] UInt32* values)
        {
            Delegates.glGetPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt32*)values);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        public static
        void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute] Int32[] values)
        {
            unsafe
            {
                fixed (Int32* values_ptr = values)
                {
                    Delegates.glGetPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt32*)values_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        public static
        void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute] out Int32 values)
        {
            unsafe
            {
                fixed (Int32* values_ptr = &values)
                {
                    Delegates.glGetPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt32*)values_ptr);
                    values = *values_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        public static
        unsafe void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute] Int32* values)
        {
            Delegates.glGetPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt32*)values);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        public static
        void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute] UInt32[] values)
        {
            unsafe
            {
                fixed (UInt32* values_ptr = values)
                {
                    Delegates.glGetPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt32*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        public static
        void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute] out UInt32 values)
        {
            unsafe
            {
                fixed (UInt32* values_ptr = &values)
                {
                    Delegates.glGetPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt32*)values_ptr);
                    values = *values_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        public static
        unsafe void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute] UInt32* values)
        {
            Delegates.glGetPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt32*)values);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        public static
        void GetPixelMap(int map, [OutAttribute] Int16[] values)
        {
            unsafe
            {
                fixed (Int16* values_ptr = values)
                {
                    Delegates.glGetPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt16*)values_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        public static
        void GetPixelMap(int map, [OutAttribute] out Int16 values)
        {
            unsafe
            {
                fixed (Int16* values_ptr = &values)
                {
                    Delegates.glGetPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt16*)values_ptr);
                    values = *values_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        public static
        unsafe void GetPixelMap(int map, [OutAttribute] Int16* values)
        {
            Delegates.glGetPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt16*)values);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        public static
        void GetPixelMap(int map, [OutAttribute] UInt16[] values)
        {
            unsafe
            {
                fixed (UInt16* values_ptr = values)
                {
                    Delegates.glGetPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt16*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        public static
        void GetPixelMap(int map, [OutAttribute] out UInt16 values)
        {
            unsafe
            {
                fixed (UInt16* values_ptr = &values)
                {
                    Delegates.glGetPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt16*)values_ptr);
                    values = *values_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        public static
        unsafe void GetPixelMap(int map, [OutAttribute] UInt16* values)
        {
            Delegates.glGetPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt16*)values);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        public static
        void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute] Int16[] values)
        {
            unsafe
            {
                fixed (Int16* values_ptr = values)
                {
                    Delegates.glGetPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt16*)values_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        public static
        void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute] out Int16 values)
        {
            unsafe
            {
                fixed (Int16* values_ptr = &values)
                {
                    Delegates.glGetPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt16*)values_ptr);
                    values = *values_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        public static
        unsafe void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute] Int16* values)
        {
            Delegates.glGetPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt16*)values);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        public static
        void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute] UInt16[] values)
        {
            unsafe
            {
                fixed (UInt16* values_ptr = values)
                {
                    Delegates.glGetPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt16*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        public static
        void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute] out UInt16 values)
        {
            unsafe
            {
                fixed (UInt16* values_ptr = &values)
                {
                    Delegates.glGetPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt16*)values_ptr);
                    values = *values_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        public static
        unsafe void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute] UInt16* values)
        {
            Delegates.glGetPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (UInt16*)values);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGetPointerv")]
        public static
        void GetPointer(OpenTK.Graphics.OpenGL.GetPointervPName pname, [OutAttribute] IntPtr @params)
        {
            Delegates.glGetPointerv((OpenTK.Graphics.OpenGL.GetPointervPName)pname, (IntPtr)@params);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGetPointerv")]
        public static
        void GetPointer<T1>(OpenTK.Graphics.OpenGL.GetPointervPName pname, [InAttribute, OutAttribute] T1[] @params)
            where T1 : struct
        {
            GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPointerv((OpenTK.Graphics.OpenGL.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
            }
            finally
            {
                @params_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGetPointerv")]
        public static
        void GetPointer<T1>(OpenTK.Graphics.OpenGL.GetPointervPName pname, [InAttribute, OutAttribute] T1[,] @params)
            where T1 : struct
        {
            GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPointerv((OpenTK.Graphics.OpenGL.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
            }
            finally
            {
                @params_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGetPointerv")]
        public static
        void GetPointer<T1>(OpenTK.Graphics.OpenGL.GetPointervPName pname, [InAttribute, OutAttribute] T1[,,] @params)
            where T1 : struct
        {
            GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPointerv((OpenTK.Graphics.OpenGL.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
            }
            finally
            {
                @params_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGetPointerv")]
        public static
        void GetPointer<T1>(OpenTK.Graphics.OpenGL.GetPointervPName pname, [InAttribute, OutAttribute] ref T1 @params)
            where T1 : struct
        {
            GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPointerv((OpenTK.Graphics.OpenGL.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                @params = (T1)@params_ptr.Target;
            }
            finally
            {
                @params_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGetPointerv")]
        public static
        void GetPointer(int pname, [OutAttribute] IntPtr @params)
        {
            Delegates.glGetPointerv((OpenTK.Graphics.OpenGL.GetPointervPName)pname, (IntPtr)@params);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGetPointerv")]
        public static
        void GetPointer<T1>(int pname, [InAttribute, OutAttribute] T1[] @params)
            where T1 : struct
        {
            GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPointerv((OpenTK.Graphics.OpenGL.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
            }
            finally
            {
                @params_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGetPointerv")]
        public static
        void GetPointer<T1>(int pname, [InAttribute, OutAttribute] T1[,] @params)
            where T1 : struct
        {
            GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPointerv((OpenTK.Graphics.OpenGL.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
            }
            finally
            {
                @params_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGetPointerv")]
        public static
        void GetPointer<T1>(int pname, [InAttribute, OutAttribute] T1[,,] @params)
            where T1 : struct
        {
            GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPointerv((OpenTK.Graphics.OpenGL.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
            }
            finally
            {
                @params_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGetPointerv")]
        public static
        void GetPointer<T1>(int pname, [InAttribute, OutAttribute] ref T1 @params)
            where T1 : struct
        {
            GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPointerv((OpenTK.Graphics.OpenGL.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                @params = (T1)@params_ptr.Target;
            }
            finally
            {
                @params_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPolygonStipple")]
        public static
        void GetPolygonStipple([OutAttribute] Byte[] mask)
        {
            unsafe
            {
                fixed (Byte* mask_ptr = mask)
                {
                    Delegates.glGetPolygonStipple((Byte*)mask_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPolygonStipple")]
        public static
        void GetPolygonStipple([OutAttribute] out Byte mask)
        {
            unsafe
            {
                fixed (Byte* mask_ptr = &mask)
                {
                    Delegates.glGetPolygonStipple((Byte*)mask_ptr);
                    mask = *mask_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPolygonStipple")]
        public static
        unsafe void GetPolygonStipple([OutAttribute] Byte* mask)
        {
            Delegates.glGetPolygonStipple((Byte*)mask);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        public static
        void GetProgramInfoLog(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)infoLog);
                    length = *length_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        public static
        unsafe void GetProgramInfoLog(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog)
        {
            Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length, (StringBuilder)infoLog);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        public static
        void GetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)infoLog);
                    length = *length_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        public static
        unsafe void GetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog)
        {
            Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length, (StringBuilder)infoLog);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static
        void GetProgram(Int32 program, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.OpenGL.ProgramParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static
        void GetProgram(Int32 program, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.OpenGL.ProgramParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static
        unsafe void GetProgram(Int32 program, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.OpenGL.ProgramParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static
        void GetProgram(Int32 program, OpenTK.Graphics.OpenGL.ProgramParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.OpenGL.ProgramParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static
        void GetProgram(Int32 program, OpenTK.Graphics.OpenGL.ProgramParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.OpenGL.ProgramParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static
        unsafe void GetProgram(Int32 program, OpenTK.Graphics.OpenGL.ProgramParameter pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.OpenGL.ProgramParameter)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static
        void GetProgram(UInt32 program, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.OpenGL.ProgramParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static
        void GetProgram(UInt32 program, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.OpenGL.ProgramParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static
        unsafe void GetProgram(UInt32 program, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.OpenGL.ProgramParameter)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static
        void GetProgram(UInt32 program, OpenTK.Graphics.OpenGL.ProgramParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.OpenGL.ProgramParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static
        void GetProgram(UInt32 program, OpenTK.Graphics.OpenGL.ProgramParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.OpenGL.ProgramParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static
        unsafe void GetProgram(UInt32 program, OpenTK.Graphics.OpenGL.ProgramParameter pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.OpenGL.ProgramParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryiv")]
        public static
        void GetQuery(int target, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetQueryiv((OpenTK.Graphics.OpenGL.QueryTarget)target, (OpenTK.Graphics.OpenGL.GetQueryParam)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryiv")]
        public static
        void GetQuery(int target, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetQueryiv((OpenTK.Graphics.OpenGL.QueryTarget)target, (OpenTK.Graphics.OpenGL.GetQueryParam)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryiv")]
        public static
        unsafe void GetQuery(int target, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetQueryiv((OpenTK.Graphics.OpenGL.QueryTarget)target, (OpenTK.Graphics.OpenGL.GetQueryParam)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryiv")]
        public static
        void GetQuery(OpenTK.Graphics.OpenGL.QueryTarget target, OpenTK.Graphics.OpenGL.GetQueryParam pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetQueryiv((OpenTK.Graphics.OpenGL.QueryTarget)target, (OpenTK.Graphics.OpenGL.GetQueryParam)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryiv")]
        public static
        void GetQuery(OpenTK.Graphics.OpenGL.QueryTarget target, OpenTK.Graphics.OpenGL.GetQueryParam pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetQueryiv((OpenTK.Graphics.OpenGL.QueryTarget)target, (OpenTK.Graphics.OpenGL.GetQueryParam)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryiv")]
        public static
        unsafe void GetQuery(OpenTK.Graphics.OpenGL.QueryTarget target, OpenTK.Graphics.OpenGL.GetQueryParam pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetQueryiv((OpenTK.Graphics.OpenGL.QueryTarget)target, (OpenTK.Graphics.OpenGL.GetQueryParam)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static
        void GetQueryObject(Int32 id, OpenTK.Graphics.OpenGL.GetQueryObjectParam pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static
        void GetQueryObject(Int32 id, OpenTK.Graphics.OpenGL.GetQueryObjectParam pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static
        unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.OpenGL.GetQueryObjectParam pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static
        void GetQueryObject(Int32 id, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static
        void GetQueryObject(Int32 id, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static
        unsafe void GetQueryObject(Int32 id, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static
        void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL.GetQueryObjectParam pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static
        void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL.GetQueryObjectParam pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static
        unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL.GetQueryObjectParam pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static
        void GetQueryObject(UInt32 id, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static
        void GetQueryObject(UInt32 id, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static
        unsafe void GetQueryObject(UInt32 id, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        public static
        void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL.GetQueryObjectParam pname, [OutAttribute] UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Delegates.glGetQueryObjectuiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        public static
        void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL.GetQueryObjectParam pname, [OutAttribute] out UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Delegates.glGetQueryObjectuiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        public static
        unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL.GetQueryObjectParam pname, [OutAttribute] UInt32* @params)
        {
            Delegates.glGetQueryObjectuiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (UInt32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        public static
        void GetQueryObject(UInt32 id, int pname, [OutAttribute] UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Delegates.glGetQueryObjectuiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        public static
        void GetQueryObject(UInt32 id, int pname, [OutAttribute] out UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Delegates.glGetQueryObjectuiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        public static
        unsafe void GetQueryObject(UInt32 id, int pname, [OutAttribute] UInt32* @params)
        {
            Delegates.glGetQueryObjectuiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (UInt32*)@params);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
        public static
        void GetRenderbufferParameter(int target, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetRenderbufferParameteriv((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
        public static
        void GetRenderbufferParameter(int target, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetRenderbufferParameteriv((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
        public static
        unsafe void GetRenderbufferParameter(int target, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetRenderbufferParameteriv((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
        public static
        void GetRenderbufferParameter(OpenTK.Graphics.OpenGL.RenderbufferTarget target, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetRenderbufferParameteriv((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
        public static
        void GetRenderbufferParameter(OpenTK.Graphics.OpenGL.RenderbufferTarget target, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetRenderbufferParameteriv((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
        public static
        unsafe void GetRenderbufferParameter(OpenTK.Graphics.OpenGL.RenderbufferTarget target, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetRenderbufferParameteriv((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter(int target, int format, int type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [OutAttribute] IntPtr span)
        {
            Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T5>(int target, int format, int type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [InAttribute, OutAttribute] T5[] span)
            where T5 : struct
        {
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
            }
            finally
            {
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T5>(int target, int format, int type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [InAttribute, OutAttribute] T5[,] span)
            where T5 : struct
        {
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
            }
            finally
            {
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T5>(int target, int format, int type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [InAttribute, OutAttribute] T5[,,] span)
            where T5 : struct
        {
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
            }
            finally
            {
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T5>(int target, int format, int type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [InAttribute, OutAttribute] ref T5 span)
            where T5 : struct
        {
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
                span = (T5)span_ptr.Target;
            }
            finally
            {
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T4,T5>(int target, int format, int type, [OutAttribute] IntPtr row, [InAttribute, OutAttribute] T4[] column, [InAttribute, OutAttribute] T5[,,] span)
            where T4 : struct
            where T5 : struct
        {
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
            }
            finally
            {
                column_ptr.Free();
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T4,T5>(int target, int format, int type, [OutAttribute] IntPtr row, [InAttribute, OutAttribute] T4[,] column, [InAttribute, OutAttribute] T5[,,] span)
            where T4 : struct
            where T5 : struct
        {
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
            }
            finally
            {
                column_ptr.Free();
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T4,T5>(int target, int format, int type, [OutAttribute] IntPtr row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
            where T4 : struct
            where T5 : struct
        {
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
            }
            finally
            {
                column_ptr.Free();
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T4,T5>(int target, int format, int type, [OutAttribute] IntPtr row, [InAttribute, OutAttribute] ref T4 column, [InAttribute, OutAttribute] T5[,,] span)
            where T4 : struct
            where T5 : struct
        {
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                column = (T4)column_ptr.Target;
            }
            finally
            {
                column_ptr.Free();
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T3,T4,T5>(int target, int format, int type, [InAttribute, OutAttribute] T3[] row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
            }
            finally
            {
                row_ptr.Free();
                column_ptr.Free();
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T3,T4,T5>(int target, int format, int type, [InAttribute, OutAttribute] T3[,] row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
            }
            finally
            {
                row_ptr.Free();
                column_ptr.Free();
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T3,T4,T5>(int target, int format, int type, [InAttribute, OutAttribute] T3[,,] row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
            }
            finally
            {
                row_ptr.Free();
                column_ptr.Free();
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T3,T4,T5>(int target, int format, int type, [InAttribute, OutAttribute] ref T3 row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                row = (T3)row_ptr.Target;
            }
            finally
            {
                row_ptr.Free();
                column_ptr.Free();
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter(OpenTK.Graphics.OpenGL.SeparableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [OutAttribute] IntPtr span)
        {
            Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T5>(OpenTK.Graphics.OpenGL.SeparableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [InAttribute, OutAttribute] T5[] span)
            where T5 : struct
        {
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
            }
            finally
            {
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T5>(OpenTK.Graphics.OpenGL.SeparableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [InAttribute, OutAttribute] T5[,] span)
            where T5 : struct
        {
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
            }
            finally
            {
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T5>(OpenTK.Graphics.OpenGL.SeparableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [InAttribute, OutAttribute] T5[,,] span)
            where T5 : struct
        {
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
            }
            finally
            {
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T5>(OpenTK.Graphics.OpenGL.SeparableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [InAttribute, OutAttribute] ref T5 span)
            where T5 : struct
        {
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
                span = (T5)span_ptr.Target;
            }
            finally
            {
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T4,T5>(OpenTK.Graphics.OpenGL.SeparableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr row, [InAttribute, OutAttribute] T4[] column, [InAttribute, OutAttribute] T5[,,] span)
            where T4 : struct
            where T5 : struct
        {
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
            }
            finally
            {
                column_ptr.Free();
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T4,T5>(OpenTK.Graphics.OpenGL.SeparableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr row, [InAttribute, OutAttribute] T4[,] column, [InAttribute, OutAttribute] T5[,,] span)
            where T4 : struct
            where T5 : struct
        {
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
            }
            finally
            {
                column_ptr.Free();
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T4,T5>(OpenTK.Graphics.OpenGL.SeparableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
            where T4 : struct
            where T5 : struct
        {
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
            }
            finally
            {
                column_ptr.Free();
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T4,T5>(OpenTK.Graphics.OpenGL.SeparableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr row, [InAttribute, OutAttribute] ref T4 column, [InAttribute, OutAttribute] T5[,,] span)
            where T4 : struct
            where T5 : struct
        {
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                column = (T4)column_ptr.Target;
            }
            finally
            {
                column_ptr.Free();
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T3,T4,T5>(OpenTK.Graphics.OpenGL.SeparableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T3[] row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
            }
            finally
            {
                row_ptr.Free();
                column_ptr.Free();
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T3,T4,T5>(OpenTK.Graphics.OpenGL.SeparableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T3[,] row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
            }
            finally
            {
                row_ptr.Free();
                column_ptr.Free();
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T3,T4,T5>(OpenTK.Graphics.OpenGL.SeparableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T3[,,] row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
            }
            finally
            {
                row_ptr.Free();
                column_ptr.Free();
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static
        void GetSeparableFilter<T3,T4,T5>(OpenTK.Graphics.OpenGL.SeparableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T3 row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                row = (T3)row_ptr.Target;
            }
            finally
            {
                row_ptr.Free();
                column_ptr.Free();
                span_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        public static
        void GetShaderInfoLog(Int32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)infoLog);
                    length = *length_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        public static
        unsafe void GetShaderInfoLog(Int32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog)
        {
            Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length, (StringBuilder)infoLog);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        public static
        void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)infoLog);
                    length = *length_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        public static
        unsafe void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog)
        {
            Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length, (StringBuilder)infoLog);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static
        void GetShader(Int32 shader, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.OpenGL.ShaderParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static
        void GetShader(Int32 shader, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.OpenGL.ShaderParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static
        unsafe void GetShader(Int32 shader, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.OpenGL.ShaderParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static
        void GetShader(Int32 shader, OpenTK.Graphics.OpenGL.ShaderParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.OpenGL.ShaderParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static
        void GetShader(Int32 shader, OpenTK.Graphics.OpenGL.ShaderParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.OpenGL.ShaderParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static
        unsafe void GetShader(Int32 shader, OpenTK.Graphics.OpenGL.ShaderParameter pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.OpenGL.ShaderParameter)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static
        void GetShader(UInt32 shader, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.OpenGL.ShaderParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static
        void GetShader(UInt32 shader, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.OpenGL.ShaderParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static
        unsafe void GetShader(UInt32 shader, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.OpenGL.ShaderParameter)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static
        void GetShader(UInt32 shader, OpenTK.Graphics.OpenGL.ShaderParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.OpenGL.ShaderParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static
        void GetShader(UInt32 shader, OpenTK.Graphics.OpenGL.ShaderParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.OpenGL.ShaderParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static
        unsafe void GetShader(UInt32 shader, OpenTK.Graphics.OpenGL.ShaderParameter pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.OpenGL.ShaderParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        public static
        void GetShaderSource(Int32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder source)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)source);
                    length = *length_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        public static
        unsafe void GetShaderSource(Int32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder source)
        {
            Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length, (StringBuilder)source);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        public static
        void GetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder source)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)source);
                    length = *length_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        public static
        unsafe void GetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder source)
        {
            Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length, (StringBuilder)source);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetString")]
        public static
        System.String GetString(int name)
        {
            unsafe { return new string((sbyte*)Delegates.glGetString((OpenTK.Graphics.OpenGL.StringName)name)); }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetString")]
        public static
        System.String GetString(OpenTK.Graphics.OpenGL.StringName name)
        {
            unsafe { return new string((sbyte*)Delegates.glGetString((OpenTK.Graphics.OpenGL.StringName)name)); }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetStringi")]
        public static
        System.String GetString(int name, Int32 index)
        {
            unsafe { return new string((sbyte*)Delegates.glGetStringi((OpenTK.Graphics.OpenGL.StringName)name, (UInt32)index)); }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetStringi")]
        public static
        System.String GetString(int name, UInt32 index)
        {
            unsafe { return new string((sbyte*)Delegates.glGetStringi((OpenTK.Graphics.OpenGL.StringName)name, (UInt32)index)); }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetStringi")]
        public static
        System.String GetString(OpenTK.Graphics.OpenGL.StringName name, Int32 index)
        {
            unsafe { return new string((sbyte*)Delegates.glGetStringi((OpenTK.Graphics.OpenGL.StringName)name, (UInt32)index)); }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetStringi")]
        public static
        System.String GetString(OpenTK.Graphics.OpenGL.StringName name, UInt32 index)
        {
            unsafe { return new string((sbyte*)Delegates.glGetStringi((OpenTK.Graphics.OpenGL.StringName)name, (UInt32)index)); }
        }

        [AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glGetSynciv")]
        public static
        void GetSync(IntPtr sync, OpenTK.Graphics.OpenGL.ARB_sync pname, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 values)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* values_ptr = &values)
                {
                    Delegates.glGetSynciv((IntPtr)sync, (OpenTK.Graphics.OpenGL.ARB_sync)pname, (Int32)bufSize, (Int32*)length_ptr, (Int32*)values_ptr);
                    length = *length_ptr;
                    values = *values_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glGetSynciv")]
        public static
        unsafe void GetSync(IntPtr sync, OpenTK.Graphics.OpenGL.ARB_sync pname, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32[] values)
        {
            fixed (Int32* values_ptr = values)
            {
                Delegates.glGetSynciv((IntPtr)sync, (OpenTK.Graphics.OpenGL.ARB_sync)pname, (Int32)bufSize, (Int32*)length, (Int32*)values_ptr);
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glGetSynciv")]
        public static
        unsafe void GetSync(IntPtr sync, OpenTK.Graphics.OpenGL.ARB_sync pname, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* values)
        {
            Delegates.glGetSynciv((IntPtr)sync, (OpenTK.Graphics.OpenGL.ARB_sync)pname, (Int32)bufSize, (Int32*)length, (Int32*)values);
        }

        [AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glGetSynciv")]
        public static
        void GetSync(IntPtr sync, int pname, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 values)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* values_ptr = &values)
                {
                    Delegates.glGetSynciv((IntPtr)sync, (OpenTK.Graphics.OpenGL.ARB_sync)pname, (Int32)bufSize, (Int32*)length_ptr, (Int32*)values_ptr);
                    length = *length_ptr;
                    values = *values_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glGetSynciv")]
        public static
        unsafe void GetSync(IntPtr sync, int pname, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32[] values)
        {
            fixed (Int32* values_ptr = values)
            {
                Delegates.glGetSynciv((IntPtr)sync, (OpenTK.Graphics.OpenGL.ARB_sync)pname, (Int32)bufSize, (Int32*)length, (Int32*)values_ptr);
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glGetSynciv")]
        public static
        unsafe void GetSync(IntPtr sync, int pname, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* values)
        {
            Delegates.glGetSynciv((IntPtr)sync, (OpenTK.Graphics.OpenGL.ARB_sync)pname, (Int32)bufSize, (Int32*)length, (Int32*)values);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        public static
        void GetTexEnv(int target, int pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetTexEnvfv((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        public static
        void GetTexEnv(int target, int pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetTexEnvfv((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        public static
        unsafe void GetTexEnv(int target, int pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetTexEnvfv((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        public static
        void GetTexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetTexEnvfv((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        public static
        void GetTexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetTexEnvfv((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        public static
        unsafe void GetTexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetTexEnvfv((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        public static
        void GetTexEnv(int target, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetTexEnviv((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        public static
        void GetTexEnv(int target, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetTexEnviv((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        public static
        unsafe void GetTexEnv(int target, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetTexEnviv((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        public static
        void GetTexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetTexEnviv((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        public static
        void GetTexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetTexEnviv((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        public static
        unsafe void GetTexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetTexEnviv((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGendv")]
        public static
        void GetTexGen(int coord, int pname, [OutAttribute] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Delegates.glGetTexGendv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGendv")]
        public static
        void GetTexGen(int coord, int pname, [OutAttribute] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Delegates.glGetTexGendv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGendv")]
        public static
        unsafe void GetTexGen(int coord, int pname, [OutAttribute] Double* @params)
        {
            Delegates.glGetTexGendv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGendv")]
        public static
        void GetTexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Delegates.glGetTexGendv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGendv")]
        public static
        void GetTexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Delegates.glGetTexGendv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGendv")]
        public static
        unsafe void GetTexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute] Double* @params)
        {
            Delegates.glGetTexGendv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGenfv")]
        public static
        void GetTexGen(int coord, int pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetTexGenfv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGenfv")]
        public static
        void GetTexGen(int coord, int pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetTexGenfv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGenfv")]
        public static
        unsafe void GetTexGen(int coord, int pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetTexGenfv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGenfv")]
        public static
        void GetTexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetTexGenfv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGenfv")]
        public static
        void GetTexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetTexGenfv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGenfv")]
        public static
        unsafe void GetTexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetTexGenfv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGeniv")]
        public static
        void GetTexGen(int coord, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetTexGeniv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGeniv")]
        public static
        void GetTexGen(int coord, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetTexGeniv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGeniv")]
        public static
        unsafe void GetTexGen(int coord, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetTexGeniv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGeniv")]
        public static
        void GetTexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetTexGeniv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGeniv")]
        public static
        void GetTexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetTexGeniv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGeniv")]
        public static
        unsafe void GetTexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetTexGeniv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static
        void GetTexImage(int target, Int32 level, int format, int type, [OutAttribute] IntPtr pixels)
        {
            Delegates.glGetTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static
        void GetTexImage<T4>(int target, Int32 level, int format, int type, [InAttribute, OutAttribute] T4[] pixels)
            where T4 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static
        void GetTexImage<T4>(int target, Int32 level, int format, int type, [InAttribute, OutAttribute] T4[,] pixels)
            where T4 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static
        void GetTexImage<T4>(int target, Int32 level, int format, int type, [InAttribute, OutAttribute] T4[,,] pixels)
            where T4 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static
        void GetTexImage<T4>(int target, Int32 level, int format, int type, [InAttribute, OutAttribute] ref T4 pixels)
            where T4 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T4)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static
        void GetTexImage(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr pixels)
        {
            Delegates.glGetTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static
        void GetTexImage<T4>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[] pixels)
            where T4 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static
        void GetTexImage<T4>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[,] pixels)
            where T4 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static
        void GetTexImage<T4>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[,,] pixels)
            where T4 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static
        void GetTexImage<T4>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T4 pixels)
            where T4 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T4)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
        public static
        void GetTexLevelParameter(int target, Int32 level, int pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetTexLevelParameterfv((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
        public static
        void GetTexLevelParameter(int target, Int32 level, int pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetTexLevelParameterfv((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
        public static
        unsafe void GetTexLevelParameter(int target, Int32 level, int pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetTexLevelParameterfv((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
        public static
        void GetTexLevelParameter(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetTexLevelParameterfv((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
        public static
        void GetTexLevelParameter(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetTexLevelParameterfv((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
        public static
        unsafe void GetTexLevelParameter(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetTexLevelParameterfv((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
        public static
        void GetTexLevelParameter(int target, Int32 level, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetTexLevelParameteriv((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
        public static
        void GetTexLevelParameter(int target, Int32 level, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetTexLevelParameteriv((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
        public static
        unsafe void GetTexLevelParameter(int target, Int32 level, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetTexLevelParameteriv((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
        public static
        void GetTexLevelParameter(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetTexLevelParameteriv((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
        public static
        void GetTexLevelParameter(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetTexLevelParameteriv((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
        public static
        unsafe void GetTexLevelParameter(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetTexLevelParameteriv((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static
        void GetTexParameter(int target, int pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetTexParameterfv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static
        void GetTexParameter(int target, int pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetTexParameterfv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static
        unsafe void GetTexParameter(int target, int pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetTexParameterfv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static
        void GetTexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetTexParameterfv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static
        void GetTexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetTexParameterfv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static
        unsafe void GetTexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetTexParameterfv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        public static
        void GetTexParameterI(int target, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetTexParameterIiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        public static
        void GetTexParameterI(int target, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetTexParameterIiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        public static
        unsafe void GetTexParameterI(int target, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetTexParameterIiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        public static
        void GetTexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetTexParameterIiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        public static
        void GetTexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetTexParameterIiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        public static
        unsafe void GetTexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetTexParameterIiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        public static
        void GetTexParameterI(int target, int pname, [OutAttribute] UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Delegates.glGetTexParameterIuiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        public static
        void GetTexParameterI(int target, int pname, [OutAttribute] out UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Delegates.glGetTexParameterIuiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        public static
        unsafe void GetTexParameterI(int target, int pname, [OutAttribute] UInt32* @params)
        {
            Delegates.glGetTexParameterIuiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        public static
        void GetTexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Delegates.glGetTexParameterIuiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        public static
        void GetTexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Delegates.glGetTexParameterIuiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        public static
        unsafe void GetTexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] UInt32* @params)
        {
            Delegates.glGetTexParameterIuiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static
        void GetTexParameter(int target, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetTexParameteriv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static
        void GetTexParameter(int target, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetTexParameteriv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static
        unsafe void GetTexParameter(int target, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetTexParameteriv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static
        void GetTexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetTexParameteriv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static
        void GetTexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetTexParameteriv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static
        unsafe void GetTexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetTexParameteriv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static
        void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL.ActiveAttribType type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (OpenTK.Graphics.OpenGL.ActiveAttribType* type_ptr = &type)
                {
                    Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type_ptr, (StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static
        void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out int type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (int* type_ptr = &type)
                {
                    Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type_ptr, (StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static
        unsafe void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL.ActiveAttribType* type, [OutAttribute] StringBuilder name)
        {
            Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type, (StringBuilder)name);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static
        unsafe void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] int* type, [OutAttribute] StringBuilder name)
        {
            Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type, (StringBuilder)name);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static
        void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL.ActiveAttribType type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (OpenTK.Graphics.OpenGL.ActiveAttribType* type_ptr = &type)
                {
                    Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type_ptr, (StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static
        void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out int type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (int* type_ptr = &type)
                {
                    Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type_ptr, (StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static
        unsafe void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL.ActiveAttribType* type, [OutAttribute] StringBuilder name)
        {
            Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type, (StringBuilder)name);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static
        unsafe void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] int* type, [OutAttribute] StringBuilder name)
        {
            Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type, (StringBuilder)name);
        }

        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetUniformBlockIndex")]
        public static
        Int32 GetUniformBlockIndex(Int32 program, String uniformBlockName)
        {
            return Delegates.glGetUniformBlockIndex((UInt32)program, (String)uniformBlockName);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetUniformBlockIndex")]
        public static
        Int32 GetUniformBlockIndex(UInt32 program, String uniformBlockName)
        {
            return Delegates.glGetUniformBlockIndex((UInt32)program, (String)uniformBlockName);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static
        void GetUniform(Int32 program, Int32 location, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static
        void GetUniform(Int32 program, Int32 location, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static
        unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute] Single* @params)
        {
            Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static
        void GetUniform(UInt32 program, Int32 location, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static
        void GetUniform(UInt32 program, Int32 location, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static
        unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute] Single* @params)
        {
            Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params);
        }

        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetUniformIndices")]
        public static
        void GetUniformIndices(Int32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] Int32[] uniformIndices)
        {
            unsafe
            {
                fixed (Int32* uniformIndices_ptr = uniformIndices)
                {
                    Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, (String[])uniformNames, (UInt32*)uniformIndices_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetUniformIndices")]
        public static
        void GetUniformIndices(Int32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] out Int32 uniformIndices)
        {
            unsafe
            {
                fixed (Int32* uniformIndices_ptr = &uniformIndices)
                {
                    Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, (String[])uniformNames, (UInt32*)uniformIndices_ptr);
                    uniformIndices = *uniformIndices_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetUniformIndices")]
        public static
        unsafe void GetUniformIndices(Int32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] Int32* uniformIndices)
        {
            Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, (String[])uniformNames, (UInt32*)uniformIndices);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetUniformIndices")]
        public static
        void GetUniformIndices(UInt32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] UInt32[] uniformIndices)
        {
            unsafe
            {
                fixed (UInt32* uniformIndices_ptr = uniformIndices)
                {
                    Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, (String[])uniformNames, (UInt32*)uniformIndices_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetUniformIndices")]
        public static
        void GetUniformIndices(UInt32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] out UInt32 uniformIndices)
        {
            unsafe
            {
                fixed (UInt32* uniformIndices_ptr = &uniformIndices)
                {
                    Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, (String[])uniformNames, (UInt32*)uniformIndices_ptr);
                    uniformIndices = *uniformIndices_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetUniformIndices")]
        public static
        unsafe void GetUniformIndices(UInt32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] UInt32* uniformIndices)
        {
            Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, (String[])uniformNames, (UInt32*)uniformIndices);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static
        void GetUniform(Int32 program, Int32 location, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static
        void GetUniform(Int32 program, Int32 location, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static
        unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute] Int32* @params)
        {
            Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static
        void GetUniform(UInt32 program, Int32 location, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static
        void GetUniform(UInt32 program, Int32 location, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static
        unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute] Int32* @params)
        {
            Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformLocation")]
        public static
        Int32 GetUniformLocation(Int32 program, String name)
        {
            return Delegates.glGetUniformLocation((UInt32)program, (String)name);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformLocation")]
        public static
        Int32 GetUniformLocation(UInt32 program, String name)
        {
            return Delegates.glGetUniformLocation((UInt32)program, (String)name);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        public static
        void GetUniform(UInt32 program, Int32 location, [OutAttribute] UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Delegates.glGetUniformuiv((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        public static
        void GetUniform(UInt32 program, Int32 location, [OutAttribute] out UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Delegates.glGetUniformuiv((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        public static
        unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute] UInt32* @params)
        {
            Delegates.glGetUniformuiv((UInt32)program, (Int32)location, (UInt32*)@params);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static
        void GetVertexAttrib(Int32 index, int pname, [OutAttribute] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Double*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static
        void GetVertexAttrib(Int32 index, int pname, [OutAttribute] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static
        unsafe void GetVertexAttrib(Int32 index, int pname, [OutAttribute] Double* @params)
        {
            Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Double*)@params);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static
        void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Double*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static
        void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static
        unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Double* @params)
        {
            Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Double*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static
        void GetVertexAttrib(UInt32 index, int pname, [OutAttribute] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Double*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static
        void GetVertexAttrib(UInt32 index, int pname, [OutAttribute] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static
        unsafe void GetVertexAttrib(UInt32 index, int pname, [OutAttribute] Double* @params)
        {
            Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Double*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static
        void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Double*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static
        void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static
        unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Double* @params)
        {
            Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Double*)@params);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static
        void GetVertexAttrib(Int32 index, int pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static
        void GetVertexAttrib(Int32 index, int pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static
        unsafe void GetVertexAttrib(Int32 index, int pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static
        void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static
        void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static
        unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Single*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static
        void GetVertexAttrib(UInt32 index, int pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static
        void GetVertexAttrib(UInt32 index, int pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static
        unsafe void GetVertexAttrib(UInt32 index, int pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Single*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static
        void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static
        void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static
        unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Single* @params)
        {
            Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static
        void GetVertexAttribI(Int32 index, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static
        unsafe void GetVertexAttribI(Int32 index, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static
        void GetVertexAttribI(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static
        unsafe void GetVertexAttribI(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static
        void GetVertexAttribI(UInt32 index, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static
        unsafe void GetVertexAttribI(UInt32 index, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static
        void GetVertexAttribI(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static
        unsafe void GetVertexAttribI(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        public static
        void GetVertexAttribI(UInt32 index, int pname, [OutAttribute] out UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribIuiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        public static
        unsafe void GetVertexAttribI(UInt32 index, int pname, [OutAttribute] UInt32* @params)
        {
            Delegates.glGetVertexAttribIuiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (UInt32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        public static
        void GetVertexAttribI(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] out UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribIuiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        public static
        unsafe void GetVertexAttribI(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] UInt32* @params)
        {
            Delegates.glGetVertexAttribIuiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (UInt32*)@params);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static
        void GetVertexAttrib(Int32 index, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static
        void GetVertexAttrib(Int32 index, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static
        unsafe void GetVertexAttrib(Int32 index, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static
        void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static
        void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static
        unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static
        void GetVertexAttrib(UInt32 index, int pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static
        void GetVertexAttrib(UInt32 index, int pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static
        unsafe void GetVertexAttrib(UInt32 index, int pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static
        void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static
        void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static
        unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Int32* @params)
        {
            Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer(Int32 index, int pname, [OutAttribute] IntPtr pointer)
        {
            Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(Int32 index, int pname, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(Int32 index, int pname, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(Int32 index, int pname, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(Int32 index, int pname, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T2)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameter pname, [OutAttribute] IntPtr pointer)
        {
            Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T2)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer(UInt32 index, int pname, [OutAttribute] IntPtr pointer)
        {
            Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(UInt32 index, int pname, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(UInt32 index, int pname, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(UInt32 index, int pname, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(UInt32 index, int pname, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T2)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameter pname, [OutAttribute] IntPtr pointer)
        {
            Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T2)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glHint")]
        public static
        void Hint(OpenTK.Graphics.OpenGL.HintTarget target, OpenTK.Graphics.OpenGL.HintMode mode)
        {
            Delegates.glHint((OpenTK.Graphics.OpenGL.HintTarget)target, (OpenTK.Graphics.OpenGL.HintMode)mode);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glHint")]
        public static
        void Hint(int target, int mode)
        {
            Delegates.glHint((OpenTK.Graphics.OpenGL.HintTarget)target, (OpenTK.Graphics.OpenGL.HintMode)mode);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glHistogram")]
        public static
        void Histogram(OpenTK.Graphics.OpenGL.HistogramTarget target, Int32 width, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, bool sink)
        {
            Delegates.glHistogram((OpenTK.Graphics.OpenGL.HistogramTarget)target, (Int32)width, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (bool)sink);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glHistogram")]
        public static
        void Histogram(int target, Int32 width, int internalformat, bool sink)
        {
            Delegates.glHistogram((OpenTK.Graphics.OpenGL.HistogramTarget)target, (Int32)width, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (bool)sink);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIndexd")]
        public static
        void Index(Double c)
        {
            Delegates.glIndexd((Double)c);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIndexdv")]
        public static
        unsafe void Index(Double* c)
        {
            Delegates.glIndexdv((Double*)c);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIndexf")]
        public static
        void Index(Single c)
        {
            Delegates.glIndexf((Single)c);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIndexfv")]
        public static
        unsafe void Index(Single* c)
        {
            Delegates.glIndexfv((Single*)c);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIndexi")]
        public static
        void Index(Int32 c)
        {
            Delegates.glIndexi((Int32)c);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIndexiv")]
        public static
        unsafe void Index(Int32* c)
        {
            Delegates.glIndexiv((Int32*)c);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIndexMask")]
        public static
        void IndexMask(Int32 mask)
        {
            Delegates.glIndexMask((UInt32)mask);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIndexMask")]
        public static
        void IndexMask(UInt32 mask)
        {
            Delegates.glIndexMask((UInt32)mask);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glIndexPointer")]
        public static
        void IndexPointer(OpenTK.Graphics.OpenGL.IndexPointerType type, Int32 stride, IntPtr pointer)
        {
            Delegates.glIndexPointer((OpenTK.Graphics.OpenGL.IndexPointerType)type, (Int32)stride, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glIndexPointer")]
        public static
        void IndexPointer<T2>(OpenTK.Graphics.OpenGL.IndexPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexPointer((OpenTK.Graphics.OpenGL.IndexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glIndexPointer")]
        public static
        void IndexPointer<T2>(OpenTK.Graphics.OpenGL.IndexPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexPointer((OpenTK.Graphics.OpenGL.IndexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glIndexPointer")]
        public static
        void IndexPointer<T2>(OpenTK.Graphics.OpenGL.IndexPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexPointer((OpenTK.Graphics.OpenGL.IndexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glIndexPointer")]
        public static
        void IndexPointer<T2>(OpenTK.Graphics.OpenGL.IndexPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexPointer((OpenTK.Graphics.OpenGL.IndexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T2)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glIndexPointer")]
        public static
        void IndexPointer(int type, Int32 stride, IntPtr pointer)
        {
            Delegates.glIndexPointer((OpenTK.Graphics.OpenGL.IndexPointerType)type, (Int32)stride, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glIndexPointer")]
        public static
        void IndexPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexPointer((OpenTK.Graphics.OpenGL.IndexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glIndexPointer")]
        public static
        void IndexPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexPointer((OpenTK.Graphics.OpenGL.IndexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glIndexPointer")]
        public static
        void IndexPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexPointer((OpenTK.Graphics.OpenGL.IndexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glIndexPointer")]
        public static
        void IndexPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexPointer((OpenTK.Graphics.OpenGL.IndexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T2)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIndexs")]
        public static
        void Index(Int16 c)
        {
            Delegates.glIndexs((Int16)c);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIndexsv")]
        public static
        unsafe void Index(Int16* c)
        {
            Delegates.glIndexsv((Int16*)c);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glIndexub")]
        public static
        void Index(Byte c)
        {
            Delegates.glIndexub((Byte)c);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glIndexubv")]
        public static
        unsafe void Index(Byte* c)
        {
            Delegates.glIndexubv((Byte*)c);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glInitNames")]
        public static
        void InitNames()
        {
            Delegates.glInitNames();
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glInterleavedArrays")]
        public static
        void InterleavedArrays(int format, Int32 stride, IntPtr pointer)
        {
            Delegates.glInterleavedArrays((OpenTK.Graphics.OpenGL.InterleavedArrayFormat)format, (Int32)stride, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glInterleavedArrays")]
        public static
        void InterleavedArrays<T2>(int format, Int32 stride, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glInterleavedArrays((OpenTK.Graphics.OpenGL.InterleavedArrayFormat)format, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glInterleavedArrays")]
        public static
        void InterleavedArrays<T2>(int format, Int32 stride, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glInterleavedArrays((OpenTK.Graphics.OpenGL.InterleavedArrayFormat)format, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glInterleavedArrays")]
        public static
        void InterleavedArrays<T2>(int format, Int32 stride, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glInterleavedArrays((OpenTK.Graphics.OpenGL.InterleavedArrayFormat)format, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glInterleavedArrays")]
        public static
        void InterleavedArrays<T2>(int format, Int32 stride, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glInterleavedArrays((OpenTK.Graphics.OpenGL.InterleavedArrayFormat)format, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T2)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glInterleavedArrays")]
        public static
        void InterleavedArrays(OpenTK.Graphics.OpenGL.InterleavedArrayFormat format, Int32 stride, IntPtr pointer)
        {
            Delegates.glInterleavedArrays((OpenTK.Graphics.OpenGL.InterleavedArrayFormat)format, (Int32)stride, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glInterleavedArrays")]
        public static
        void InterleavedArrays<T2>(OpenTK.Graphics.OpenGL.InterleavedArrayFormat format, Int32 stride, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glInterleavedArrays((OpenTK.Graphics.OpenGL.InterleavedArrayFormat)format, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glInterleavedArrays")]
        public static
        void InterleavedArrays<T2>(OpenTK.Graphics.OpenGL.InterleavedArrayFormat format, Int32 stride, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glInterleavedArrays((OpenTK.Graphics.OpenGL.InterleavedArrayFormat)format, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glInterleavedArrays")]
        public static
        void InterleavedArrays<T2>(OpenTK.Graphics.OpenGL.InterleavedArrayFormat format, Int32 stride, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glInterleavedArrays((OpenTK.Graphics.OpenGL.InterleavedArrayFormat)format, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glInterleavedArrays")]
        public static
        void InterleavedArrays<T2>(OpenTK.Graphics.OpenGL.InterleavedArrayFormat format, Int32 stride, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glInterleavedArrays((OpenTK.Graphics.OpenGL.InterleavedArrayFormat)format, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T2)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glIsBuffer")]
        public static
        bool IsBuffer(Int32 buffer)
        {
            return Delegates.glIsBuffer((UInt32)buffer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glIsBuffer")]
        public static
        bool IsBuffer(UInt32 buffer)
        {
            return Delegates.glIsBuffer((UInt32)buffer);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIsEnabled")]
        public static
        bool IsEnabled(OpenTK.Graphics.OpenGL.EnableCap cap)
        {
            return Delegates.glIsEnabled((OpenTK.Graphics.OpenGL.EnableCap)cap);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIsEnabled")]
        public static
        bool IsEnabled(int cap)
        {
            return Delegates.glIsEnabled((OpenTK.Graphics.OpenGL.EnableCap)cap);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glIsEnabledi")]
        public static
        bool IsEnabled(OpenTK.Graphics.OpenGL.IndexedEnableCap target, Int32 index)
        {
            return Delegates.glIsEnabledi((OpenTK.Graphics.OpenGL.IndexedEnableCap)target, (UInt32)index);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glIsEnabledi")]
        public static
        bool IsEnabled(OpenTK.Graphics.OpenGL.IndexedEnableCap target, UInt32 index)
        {
            return Delegates.glIsEnabledi((OpenTK.Graphics.OpenGL.IndexedEnableCap)target, (UInt32)index);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glIsEnabledi")]
        public static
        bool IsEnabled(int target, Int32 index)
        {
            return Delegates.glIsEnabledi((OpenTK.Graphics.OpenGL.IndexedEnableCap)target, (UInt32)index);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glIsEnabledi")]
        public static
        bool IsEnabled(int target, UInt32 index)
        {
            return Delegates.glIsEnabledi((OpenTK.Graphics.OpenGL.IndexedEnableCap)target, (UInt32)index);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glIsFramebuffer")]
        public static
        bool IsFramebuffer(Int32 framebuffer)
        {
            return Delegates.glIsFramebuffer((UInt32)framebuffer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glIsFramebuffer")]
        public static
        bool IsFramebuffer(UInt32 framebuffer)
        {
            return Delegates.glIsFramebuffer((UInt32)framebuffer);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIsList")]
        public static
        bool IsList(Int32 list)
        {
            return Delegates.glIsList((UInt32)list);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIsList")]
        public static
        bool IsList(UInt32 list)
        {
            return Delegates.glIsList((UInt32)list);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glIsProgram")]
        public static
        bool IsProgram(Int32 program)
        {
            return Delegates.glIsProgram((UInt32)program);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glIsProgram")]
        public static
        bool IsProgram(UInt32 program)
        {
            return Delegates.glIsProgram((UInt32)program);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glIsQuery")]
        public static
        bool IsQuery(Int32 id)
        {
            return Delegates.glIsQuery((UInt32)id);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glIsQuery")]
        public static
        bool IsQuery(UInt32 id)
        {
            return Delegates.glIsQuery((UInt32)id);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glIsRenderbuffer")]
        public static
        bool IsRenderbuffer(Int32 renderbuffer)
        {
            return Delegates.glIsRenderbuffer((UInt32)renderbuffer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glIsRenderbuffer")]
        public static
        bool IsRenderbuffer(UInt32 renderbuffer)
        {
            return Delegates.glIsRenderbuffer((UInt32)renderbuffer);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glIsShader")]
        public static
        bool IsShader(Int32 shader)
        {
            return Delegates.glIsShader((UInt32)shader);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glIsShader")]
        public static
        bool IsShader(UInt32 shader)
        {
            return Delegates.glIsShader((UInt32)shader);
        }

        [AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glIsSync")]
        public static
        bool IsSync(IntPtr sync)
        {
            return Delegates.glIsSync((IntPtr)sync);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glIsTexture")]
        public static
        bool IsTexture(Int32 texture)
        {
            return Delegates.glIsTexture((UInt32)texture);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glIsTexture")]
        public static
        bool IsTexture(UInt32 texture)
        {
            return Delegates.glIsTexture((UInt32)texture);
        }

        [AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glIsVertexArray")]
        public static
        bool IsVertexArray(Int32 array)
        {
            return Delegates.glIsVertexArray((UInt32)array);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glIsVertexArray")]
        public static
        bool IsVertexArray(UInt32 array)
        {
            return Delegates.glIsVertexArray((UInt32)array);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightf")]
        public static
        void Light(int light, int pname, Single param)
        {
            Delegates.glLightf((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightf")]
        public static
        void Light(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, Single param)
        {
            Delegates.glLightf((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightfv")]
        public static
        void Light(int light, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glLightfv((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightfv")]
        public static
        unsafe void Light(int light, int pname, Single* @params)
        {
            Delegates.glLightfv((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightfv")]
        public static
        void Light(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glLightfv((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightfv")]
        public static
        unsafe void Light(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, Single* @params)
        {
            Delegates.glLightfv((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLighti")]
        public static
        void Light(int light, int pname, Int32 param)
        {
            Delegates.glLighti((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLighti")]
        public static
        void Light(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, Int32 param)
        {
            Delegates.glLighti((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightiv")]
        public static
        void Light(int light, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glLightiv((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightiv")]
        public static
        unsafe void Light(int light, int pname, Int32* @params)
        {
            Delegates.glLightiv((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightiv")]
        public static
        void Light(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glLightiv((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightiv")]
        public static
        unsafe void Light(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, Int32* @params)
        {
            Delegates.glLightiv((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightModelf")]
        public static
        void LightModel(int pname, Single param)
        {
            Delegates.glLightModelf((OpenTK.Graphics.OpenGL.LightModelParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightModelf")]
        public static
        void LightModel(OpenTK.Graphics.OpenGL.LightModelParameter pname, Single param)
        {
            Delegates.glLightModelf((OpenTK.Graphics.OpenGL.LightModelParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightModelfv")]
        public static
        void LightModel(int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glLightModelfv((OpenTK.Graphics.OpenGL.LightModelParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightModelfv")]
        public static
        unsafe void LightModel(int pname, Single* @params)
        {
            Delegates.glLightModelfv((OpenTK.Graphics.OpenGL.LightModelParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightModelfv")]
        public static
        void LightModel(OpenTK.Graphics.OpenGL.LightModelParameter pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glLightModelfv((OpenTK.Graphics.OpenGL.LightModelParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightModelfv")]
        public static
        unsafe void LightModel(OpenTK.Graphics.OpenGL.LightModelParameter pname, Single* @params)
        {
            Delegates.glLightModelfv((OpenTK.Graphics.OpenGL.LightModelParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightModeli")]
        public static
        void LightModel(int pname, Int32 param)
        {
            Delegates.glLightModeli((OpenTK.Graphics.OpenGL.LightModelParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightModeli")]
        public static
        void LightModel(OpenTK.Graphics.OpenGL.LightModelParameter pname, Int32 param)
        {
            Delegates.glLightModeli((OpenTK.Graphics.OpenGL.LightModelParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightModeliv")]
        public static
        void LightModel(int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glLightModeliv((OpenTK.Graphics.OpenGL.LightModelParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightModeliv")]
        public static
        unsafe void LightModel(int pname, Int32* @params)
        {
            Delegates.glLightModeliv((OpenTK.Graphics.OpenGL.LightModelParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightModeliv")]
        public static
        void LightModel(OpenTK.Graphics.OpenGL.LightModelParameter pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glLightModeliv((OpenTK.Graphics.OpenGL.LightModelParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightModeliv")]
        public static
        unsafe void LightModel(OpenTK.Graphics.OpenGL.LightModelParameter pname, Int32* @params)
        {
            Delegates.glLightModeliv((OpenTK.Graphics.OpenGL.LightModelParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLineStipple")]
        public static
        void LineStipple(Int32 factor, Int16 pattern)
        {
            Delegates.glLineStipple((Int32)factor, (UInt16)pattern);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLineStipple")]
        public static
        void LineStipple(Int32 factor, UInt16 pattern)
        {
            Delegates.glLineStipple((Int32)factor, (UInt16)pattern);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLineWidth")]
        public static
        void LineWidth(Single width)
        {
            Delegates.glLineWidth((Single)width);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glLinkProgram")]
        public static
        void LinkProgram(Int32 program)
        {
            Delegates.glLinkProgram((UInt32)program);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glLinkProgram")]
        public static
        void LinkProgram(UInt32 program)
        {
            Delegates.glLinkProgram((UInt32)program);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glListBase")]
        public static
        void ListBase(Int32 @base)
        {
            Delegates.glListBase((UInt32)@base);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glListBase")]
        public static
        void ListBase(UInt32 @base)
        {
            Delegates.glListBase((UInt32)@base);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLoadIdentity")]
        public static
        void LoadIdentity()
        {
            Delegates.glLoadIdentity();
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLoadMatrixd")]
        public static
        void LoadMatrix(Double[] m)
        {
            unsafe
            {
                fixed (Double* m_ptr = m)
                {
                    Delegates.glLoadMatrixd((Double*)m_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLoadMatrixd")]
        public static
        void LoadMatrix(ref Double m)
        {
            unsafe
            {
                fixed (Double* m_ptr = &m)
                {
                    Delegates.glLoadMatrixd((Double*)m_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLoadMatrixd")]
        public static
        unsafe void LoadMatrix(Double* m)
        {
            Delegates.glLoadMatrixd((Double*)m);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLoadMatrixf")]
        public static
        void LoadMatrix(Single[] m)
        {
            unsafe
            {
                fixed (Single* m_ptr = m)
                {
                    Delegates.glLoadMatrixf((Single*)m_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLoadMatrixf")]
        public static
        void LoadMatrix(ref Single m)
        {
            unsafe
            {
                fixed (Single* m_ptr = &m)
                {
                    Delegates.glLoadMatrixf((Single*)m_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLoadMatrixf")]
        public static
        unsafe void LoadMatrix(Single* m)
        {
            Delegates.glLoadMatrixf((Single*)m);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLoadName")]
        public static
        void LoadName(Int32 name)
        {
            Delegates.glLoadName((UInt32)name);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLoadName")]
        public static
        void LoadName(UInt32 name)
        {
            Delegates.glLoadName((UInt32)name);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glLoadTransposeMatrixd")]
        public static
        void LoadTransposeMatrix(Double[] m)
        {
            unsafe
            {
                fixed (Double* m_ptr = m)
                {
                    Delegates.glLoadTransposeMatrixd((Double*)m_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glLoadTransposeMatrixd")]
        public static
        void LoadTransposeMatrix(ref Double m)
        {
            unsafe
            {
                fixed (Double* m_ptr = &m)
                {
                    Delegates.glLoadTransposeMatrixd((Double*)m_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glLoadTransposeMatrixd")]
        public static
        unsafe void LoadTransposeMatrix(Double* m)
        {
            Delegates.glLoadTransposeMatrixd((Double*)m);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glLoadTransposeMatrixf")]
        public static
        void LoadTransposeMatrix(Single[] m)
        {
            unsafe
            {
                fixed (Single* m_ptr = m)
                {
                    Delegates.glLoadTransposeMatrixf((Single*)m_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glLoadTransposeMatrixf")]
        public static
        void LoadTransposeMatrix(ref Single m)
        {
            unsafe
            {
                fixed (Single* m_ptr = &m)
                {
                    Delegates.glLoadTransposeMatrixf((Single*)m_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glLoadTransposeMatrixf")]
        public static
        unsafe void LoadTransposeMatrix(Single* m)
        {
            Delegates.glLoadTransposeMatrixf((Single*)m);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLogicOp")]
        public static
        void LogicOp(int opcode)
        {
            Delegates.glLogicOp((OpenTK.Graphics.OpenGL.LogicOp)opcode);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLogicOp")]
        public static
        void LogicOp(OpenTK.Graphics.OpenGL.LogicOp opcode)
        {
            Delegates.glLogicOp((OpenTK.Graphics.OpenGL.LogicOp)opcode);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap1d")]
        public static
        void Map1(int target, Double u1, Double u2, Int32 stride, Int32 order, Double[] points)
        {
            unsafe
            {
                fixed (Double* points_ptr = points)
                {
                    Delegates.glMap1d((OpenTK.Graphics.OpenGL.MapTarget)target, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap1d")]
        public static
        void Map1(int target, Double u1, Double u2, Int32 stride, Int32 order, ref Double points)
        {
            unsafe
            {
                fixed (Double* points_ptr = &points)
                {
                    Delegates.glMap1d((OpenTK.Graphics.OpenGL.MapTarget)target, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap1d")]
        public static
        unsafe void Map1(int target, Double u1, Double u2, Int32 stride, Int32 order, Double* points)
        {
            Delegates.glMap1d((OpenTK.Graphics.OpenGL.MapTarget)target, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap1d")]
        public static
        void Map1(OpenTK.Graphics.OpenGL.MapTarget target, Double u1, Double u2, Int32 stride, Int32 order, Double[] points)
        {
            unsafe
            {
                fixed (Double* points_ptr = points)
                {
                    Delegates.glMap1d((OpenTK.Graphics.OpenGL.MapTarget)target, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap1d")]
        public static
        void Map1(OpenTK.Graphics.OpenGL.MapTarget target, Double u1, Double u2, Int32 stride, Int32 order, ref Double points)
        {
            unsafe
            {
                fixed (Double* points_ptr = &points)
                {
                    Delegates.glMap1d((OpenTK.Graphics.OpenGL.MapTarget)target, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap1d")]
        public static
        unsafe void Map1(OpenTK.Graphics.OpenGL.MapTarget target, Double u1, Double u2, Int32 stride, Int32 order, Double* points)
        {
            Delegates.glMap1d((OpenTK.Graphics.OpenGL.MapTarget)target, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap1f")]
        public static
        void Map1(int target, Single u1, Single u2, Int32 stride, Int32 order, Single[] points)
        {
            unsafe
            {
                fixed (Single* points_ptr = points)
                {
                    Delegates.glMap1f((OpenTK.Graphics.OpenGL.MapTarget)target, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap1f")]
        public static
        void Map1(int target, Single u1, Single u2, Int32 stride, Int32 order, ref Single points)
        {
            unsafe
            {
                fixed (Single* points_ptr = &points)
                {
                    Delegates.glMap1f((OpenTK.Graphics.OpenGL.MapTarget)target, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap1f")]
        public static
        unsafe void Map1(int target, Single u1, Single u2, Int32 stride, Int32 order, Single* points)
        {
            Delegates.glMap1f((OpenTK.Graphics.OpenGL.MapTarget)target, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap1f")]
        public static
        void Map1(OpenTK.Graphics.OpenGL.MapTarget target, Single u1, Single u2, Int32 stride, Int32 order, Single[] points)
        {
            unsafe
            {
                fixed (Single* points_ptr = points)
                {
                    Delegates.glMap1f((OpenTK.Graphics.OpenGL.MapTarget)target, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap1f")]
        public static
        void Map1(OpenTK.Graphics.OpenGL.MapTarget target, Single u1, Single u2, Int32 stride, Int32 order, ref Single points)
        {
            unsafe
            {
                fixed (Single* points_ptr = &points)
                {
                    Delegates.glMap1f((OpenTK.Graphics.OpenGL.MapTarget)target, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap1f")]
        public static
        unsafe void Map1(OpenTK.Graphics.OpenGL.MapTarget target, Single u1, Single u2, Int32 stride, Int32 order, Single* points)
        {
            Delegates.glMap1f((OpenTK.Graphics.OpenGL.MapTarget)target, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap2d")]
        public static
        void Map2(int target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double[] points)
        {
            unsafe
            {
                fixed (Double* points_ptr = points)
                {
                    Delegates.glMap2d((OpenTK.Graphics.OpenGL.MapTarget)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap2d")]
        public static
        void Map2(int target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, ref Double points)
        {
            unsafe
            {
                fixed (Double* points_ptr = &points)
                {
                    Delegates.glMap2d((OpenTK.Graphics.OpenGL.MapTarget)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap2d")]
        public static
        unsafe void Map2(int target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double* points)
        {
            Delegates.glMap2d((OpenTK.Graphics.OpenGL.MapTarget)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap2d")]
        public static
        void Map2(OpenTK.Graphics.OpenGL.MapTarget target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double[] points)
        {
            unsafe
            {
                fixed (Double* points_ptr = points)
                {
                    Delegates.glMap2d((OpenTK.Graphics.OpenGL.MapTarget)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap2d")]
        public static
        void Map2(OpenTK.Graphics.OpenGL.MapTarget target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, ref Double points)
        {
            unsafe
            {
                fixed (Double* points_ptr = &points)
                {
                    Delegates.glMap2d((OpenTK.Graphics.OpenGL.MapTarget)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap2d")]
        public static
        unsafe void Map2(OpenTK.Graphics.OpenGL.MapTarget target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double* points)
        {
            Delegates.glMap2d((OpenTK.Graphics.OpenGL.MapTarget)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap2f")]
        public static
        void Map2(int target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single[] points)
        {
            unsafe
            {
                fixed (Single* points_ptr = points)
                {
                    Delegates.glMap2f((OpenTK.Graphics.OpenGL.MapTarget)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap2f")]
        public static
        void Map2(int target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, ref Single points)
        {
            unsafe
            {
                fixed (Single* points_ptr = &points)
                {
                    Delegates.glMap2f((OpenTK.Graphics.OpenGL.MapTarget)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap2f")]
        public static
        unsafe void Map2(int target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single* points)
        {
            Delegates.glMap2f((OpenTK.Graphics.OpenGL.MapTarget)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap2f")]
        public static
        void Map2(OpenTK.Graphics.OpenGL.MapTarget target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single[] points)
        {
            unsafe
            {
                fixed (Single* points_ptr = points)
                {
                    Delegates.glMap2f((OpenTK.Graphics.OpenGL.MapTarget)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap2f")]
        public static
        void Map2(OpenTK.Graphics.OpenGL.MapTarget target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, ref Single points)
        {
            unsafe
            {
                fixed (Single* points_ptr = &points)
                {
                    Delegates.glMap2f((OpenTK.Graphics.OpenGL.MapTarget)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap2f")]
        public static
        unsafe void Map2(OpenTK.Graphics.OpenGL.MapTarget target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single* points)
        {
            Delegates.glMap2f((OpenTK.Graphics.OpenGL.MapTarget)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glMapBuffer")]
        public static
        unsafe System.IntPtr MapBuffer(OpenTK.Graphics.OpenGL.BufferTarget target, OpenTK.Graphics.OpenGL.BufferAccess access)
        {
            return Delegates.glMapBuffer((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferAccess)access);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glMapBuffer")]
        public static
        unsafe System.IntPtr MapBuffer(int target, int access)
        {
            return Delegates.glMapBuffer((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferAccess)access);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_map_buffer_range", Version = "3.0", EntryPoint = "glMapBufferRange")]
        public static
        unsafe System.IntPtr MapBufferRange(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr length, OpenTK.Graphics.OpenGL.BufferAccessMask access)
        {
            return Delegates.glMapBufferRange((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)length, (OpenTK.Graphics.OpenGL.BufferAccessMask)access);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_map_buffer_range", Version = "3.0", EntryPoint = "glMapBufferRange")]
        public static
        unsafe System.IntPtr MapBufferRange(int target, IntPtr offset, IntPtr length, int access)
        {
            return Delegates.glMapBufferRange((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)length, (OpenTK.Graphics.OpenGL.BufferAccessMask)access);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMapGrid1d")]
        public static
        void MapGrid1(Int32 un, Double u1, Double u2)
        {
            Delegates.glMapGrid1d((Int32)un, (Double)u1, (Double)u2);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMapGrid1f")]
        public static
        void MapGrid1(Int32 un, Single u1, Single u2)
        {
            Delegates.glMapGrid1f((Int32)un, (Single)u1, (Single)u2);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMapGrid2d")]
        public static
        void MapGrid2(Int32 un, Double u1, Double u2, Int32 vn, Double v1, Double v2)
        {
            Delegates.glMapGrid2d((Int32)un, (Double)u1, (Double)u2, (Int32)vn, (Double)v1, (Double)v2);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMapGrid2f")]
        public static
        void MapGrid2(Int32 un, Single u1, Single u2, Int32 vn, Single v1, Single v2)
        {
            Delegates.glMapGrid2f((Int32)un, (Single)u1, (Single)u2, (Int32)vn, (Single)v1, (Single)v2);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMaterialf")]
        public static
        void Material(int face, int pname, Single param)
        {
            Delegates.glMaterialf((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMaterialf")]
        public static
        void Material(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, Single param)
        {
            Delegates.glMaterialf((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMaterialfv")]
        public static
        void Material(int face, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glMaterialfv((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMaterialfv")]
        public static
        unsafe void Material(int face, int pname, Single* @params)
        {
            Delegates.glMaterialfv((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMaterialfv")]
        public static
        void Material(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glMaterialfv((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMaterialfv")]
        public static
        unsafe void Material(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, Single* @params)
        {
            Delegates.glMaterialfv((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMateriali")]
        public static
        void Material(int face, int pname, Int32 param)
        {
            Delegates.glMateriali((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMateriali")]
        public static
        void Material(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, Int32 param)
        {
            Delegates.glMateriali((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMaterialiv")]
        public static
        void Material(int face, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glMaterialiv((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMaterialiv")]
        public static
        unsafe void Material(int face, int pname, Int32* @params)
        {
            Delegates.glMaterialiv((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMaterialiv")]
        public static
        void Material(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glMaterialiv((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMaterialiv")]
        public static
        unsafe void Material(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, Int32* @params)
        {
            Delegates.glMaterialiv((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMatrixMode")]
        public static
        void MatrixMode(int mode)
        {
            Delegates.glMatrixMode((OpenTK.Graphics.OpenGL.MatrixMode)mode);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMatrixMode")]
        public static
        void MatrixMode(OpenTK.Graphics.OpenGL.MatrixMode mode)
        {
            Delegates.glMatrixMode((OpenTK.Graphics.OpenGL.MatrixMode)mode);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glMinmax")]
        public static
        void Minmax(int target, int internalformat, bool sink)
        {
            Delegates.glMinmax((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (bool)sink);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glMinmax")]
        public static
        void Minmax(OpenTK.Graphics.OpenGL.MinmaxTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, bool sink)
        {
            Delegates.glMinmax((OpenTK.Graphics.OpenGL.MinmaxTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (bool)sink);
        }

        [AutoGenerated(Category = "ARB_sample_shading", Version = "1.2", EntryPoint = "glMinSampleShading")]
        public static
        void MinSampleShading(Single value)
        {
            Delegates.glMinSampleShading((Single)value);
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static
        void MultiDrawArrays(OpenTK.Graphics.OpenGL.BeginMode mode, [OutAttribute] Int32[] first, [OutAttribute] Int32[] count, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* first_ptr = first)
                fixed (Int32* count_ptr = count)
                {
                    Delegates.glMultiDrawArrays((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static
        void MultiDrawArrays(OpenTK.Graphics.OpenGL.BeginMode mode, [OutAttribute] out Int32 first, [OutAttribute] out Int32 count, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* first_ptr = &first)
                fixed (Int32* count_ptr = &count)
                {
                    Delegates.glMultiDrawArrays((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    first = *first_ptr;
                    count = *count_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static
        unsafe void MultiDrawArrays(OpenTK.Graphics.OpenGL.BeginMode mode, [OutAttribute] Int32* first, [OutAttribute] Int32* count, Int32 primcount)
        {
            Delegates.glMultiDrawArrays((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)first, (Int32*)count, (Int32)primcount);
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static
        void MultiDrawArrays(int mode, [OutAttribute] Int32[] first, [OutAttribute] Int32[] count, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* first_ptr = first)
                fixed (Int32* count_ptr = count)
                {
                    Delegates.glMultiDrawArrays((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static
        void MultiDrawArrays(int mode, [OutAttribute] out Int32 first, [OutAttribute] out Int32 count, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* first_ptr = &first)
                fixed (Int32* count_ptr = &count)
                {
                    Delegates.glMultiDrawArrays((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    first = *first_ptr;
                    count = *count_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static
        unsafe void MultiDrawArrays(int mode, [OutAttribute] Int32* first, [OutAttribute] Int32* count, Int32 primcount)
        {
            Delegates.glMultiDrawArrays((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)first, (Int32*)count, (Int32)primcount);
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements(OpenTK.Graphics.OpenGL.BeginMode mode, Int32[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                {
                    Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        indices = (T3)indices_ptr.Target;
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements(OpenTK.Graphics.OpenGL.BeginMode mode, ref Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                {
                    Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, ref Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, ref Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, ref Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, ref Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        indices = (T3)indices_ptr.Target;
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        unsafe void MultiDrawElements(OpenTK.Graphics.OpenGL.BeginMode mode, Int32* count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices, Int32 primcount)
        {
            Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32* count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32* count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32* count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32* count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                indices = (T3)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements(int mode, Int32[] count, int type, IntPtr indices, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                {
                    Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(int mode, Int32[] count, int type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(int mode, Int32[] count, int type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(int mode, Int32[] count, int type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(int mode, Int32[] count, int type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        indices = (T3)indices_ptr.Target;
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements(int mode, ref Int32 count, int type, IntPtr indices, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                {
                    Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(int mode, ref Int32 count, int type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(int mode, ref Int32 count, int type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(int mode, ref Int32 count, int type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(int mode, ref Int32 count, int type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        indices = (T3)indices_ptr.Target;
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        unsafe void MultiDrawElements(int mode, Int32* count, int type, IntPtr indices, Int32 primcount)
        {
            Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        unsafe void MultiDrawElements<T3>(int mode, Int32* count, int type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        unsafe void MultiDrawElements<T3>(int mode, Int32* count, int type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        unsafe void MultiDrawElements<T3>(int mode, Int32* count, int type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        unsafe void MultiDrawElements<T3>(int mode, Int32* count, int type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                indices = (T3)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        void MultiDrawElementsBaseVertex(OpenTK.Graphics.OpenGL.BeginMode mode, Int32[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices, Int32 primcount, Int32[] basevertex)
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (Int32* basevertex_ptr = basevertex)
                {
                    Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount, (Int32*)basevertex_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount, Int32[] basevertex)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (Int32* basevertex_ptr = basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount, Int32[] basevertex)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (Int32* basevertex_ptr = basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount, Int32[] basevertex)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (Int32* basevertex_ptr = basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount, Int32[] basevertex)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (Int32* basevertex_ptr = basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                        indices = (T3)indices_ptr.Target;
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        void MultiDrawElementsBaseVertex(OpenTK.Graphics.OpenGL.BeginMode mode, ref Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices, Int32 primcount, ref Int32 basevertex)
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (Int32* basevertex_ptr = &basevertex)
                {
                    Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount, (Int32*)basevertex_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, ref Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount, ref Int32 basevertex)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (Int32* basevertex_ptr = &basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, ref Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount, ref Int32 basevertex)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (Int32* basevertex_ptr = &basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, ref Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount, ref Int32 basevertex)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (Int32* basevertex_ptr = &basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, ref Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount, ref Int32 basevertex)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (Int32* basevertex_ptr = &basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                        indices = (T3)indices_ptr.Target;
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        unsafe void MultiDrawElementsBaseVertex(OpenTK.Graphics.OpenGL.BeginMode mode, Int32* count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices, Int32 primcount, Int32* basevertex)
        {
            Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount, (Int32*)basevertex);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        unsafe void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32* count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount, Int32* basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        unsafe void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32* count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount, Int32* basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        unsafe void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32* count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount, Int32* basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        unsafe void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32* count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount, Int32* basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex);
                indices = (T3)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        void MultiDrawElementsBaseVertex(int mode, Int32[] count, int type, IntPtr indices, Int32 primcount, Int32[] basevertex)
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (Int32* basevertex_ptr = basevertex)
                {
                    Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount, (Int32*)basevertex_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        void MultiDrawElementsBaseVertex<T3>(int mode, Int32[] count, int type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount, Int32[] basevertex)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (Int32* basevertex_ptr = basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        void MultiDrawElementsBaseVertex<T3>(int mode, Int32[] count, int type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount, Int32[] basevertex)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (Int32* basevertex_ptr = basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        void MultiDrawElementsBaseVertex<T3>(int mode, Int32[] count, int type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount, Int32[] basevertex)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (Int32* basevertex_ptr = basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        void MultiDrawElementsBaseVertex<T3>(int mode, Int32[] count, int type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount, Int32[] basevertex)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (Int32* basevertex_ptr = basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                        indices = (T3)indices_ptr.Target;
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        void MultiDrawElementsBaseVertex(int mode, ref Int32 count, int type, IntPtr indices, Int32 primcount, ref Int32 basevertex)
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (Int32* basevertex_ptr = &basevertex)
                {
                    Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount, (Int32*)basevertex_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        void MultiDrawElementsBaseVertex<T3>(int mode, ref Int32 count, int type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount, ref Int32 basevertex)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (Int32* basevertex_ptr = &basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        void MultiDrawElementsBaseVertex<T3>(int mode, ref Int32 count, int type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount, ref Int32 basevertex)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (Int32* basevertex_ptr = &basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        void MultiDrawElementsBaseVertex<T3>(int mode, ref Int32 count, int type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount, ref Int32 basevertex)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (Int32* basevertex_ptr = &basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        void MultiDrawElementsBaseVertex<T3>(int mode, ref Int32 count, int type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount, ref Int32 basevertex)
            where T3 : struct
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (Int32* basevertex_ptr = &basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                        indices = (T3)indices_ptr.Target;
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        unsafe void MultiDrawElementsBaseVertex(int mode, Int32* count, int type, IntPtr indices, Int32 primcount, Int32* basevertex)
        {
            Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount, (Int32*)basevertex);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        unsafe void MultiDrawElementsBaseVertex<T3>(int mode, Int32* count, int type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount, Int32* basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        unsafe void MultiDrawElementsBaseVertex<T3>(int mode, Int32* count, int type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount, Int32* basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        unsafe void MultiDrawElementsBaseVertex<T3>(int mode, Int32* count, int type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount, Int32* basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static
        unsafe void MultiDrawElementsBaseVertex<T3>(int mode, Int32* count, int type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount, Int32* basevertex)
            where T3 : struct
        {
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsBaseVertex((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex);
                indices = (T3)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1d")]
        public static
        void MultiTexCoord1(int target, Double s)
        {
            Delegates.glMultiTexCoord1d((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double)s);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1d")]
        public static
        void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Double s)
        {
            Delegates.glMultiTexCoord1d((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double)s);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1dv")]
        public static
        unsafe void MultiTexCoord1(int target, Double* v)
        {
            Delegates.glMultiTexCoord1dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1dv")]
        public static
        unsafe void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Double* v)
        {
            Delegates.glMultiTexCoord1dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1f")]
        public static
        void MultiTexCoord1(int target, Single s)
        {
            Delegates.glMultiTexCoord1f((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single)s);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1f")]
        public static
        void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Single s)
        {
            Delegates.glMultiTexCoord1f((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single)s);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1fv")]
        public static
        unsafe void MultiTexCoord1(int target, Single* v)
        {
            Delegates.glMultiTexCoord1fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1fv")]
        public static
        unsafe void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Single* v)
        {
            Delegates.glMultiTexCoord1fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1i")]
        public static
        void MultiTexCoord1(int target, Int32 s)
        {
            Delegates.glMultiTexCoord1i((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32)s);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1i")]
        public static
        void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Int32 s)
        {
            Delegates.glMultiTexCoord1i((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32)s);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1iv")]
        public static
        unsafe void MultiTexCoord1(int target, Int32* v)
        {
            Delegates.glMultiTexCoord1iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1iv")]
        public static
        unsafe void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Int32* v)
        {
            Delegates.glMultiTexCoord1iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1s")]
        public static
        void MultiTexCoord1(int target, Int16 s)
        {
            Delegates.glMultiTexCoord1s((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16)s);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1s")]
        public static
        void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Int16 s)
        {
            Delegates.glMultiTexCoord1s((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16)s);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1sv")]
        public static
        unsafe void MultiTexCoord1(int target, Int16* v)
        {
            Delegates.glMultiTexCoord1sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1sv")]
        public static
        unsafe void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Int16* v)
        {
            Delegates.glMultiTexCoord1sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2d")]
        public static
        void MultiTexCoord2(int target, Double s, Double t)
        {
            Delegates.glMultiTexCoord2d((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double)s, (Double)t);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2d")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Double s, Double t)
        {
            Delegates.glMultiTexCoord2d((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double)s, (Double)t);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2dv")]
        public static
        void MultiTexCoord2(int target, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glMultiTexCoord2dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2dv")]
        public static
        void MultiTexCoord2(int target, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord2dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2dv")]
        public static
        unsafe void MultiTexCoord2(int target, Double* v)
        {
            Delegates.glMultiTexCoord2dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2dv")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glMultiTexCoord2dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2dv")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord2dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2dv")]
        public static
        unsafe void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Double* v)
        {
            Delegates.glMultiTexCoord2dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2f")]
        public static
        void MultiTexCoord2(int target, Single s, Single t)
        {
            Delegates.glMultiTexCoord2f((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single)s, (Single)t);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2f")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Single s, Single t)
        {
            Delegates.glMultiTexCoord2f((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single)s, (Single)t);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2fv")]
        public static
        void MultiTexCoord2(int target, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glMultiTexCoord2fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2fv")]
        public static
        void MultiTexCoord2(int target, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord2fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2fv")]
        public static
        unsafe void MultiTexCoord2(int target, Single* v)
        {
            Delegates.glMultiTexCoord2fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2fv")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glMultiTexCoord2fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2fv")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord2fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2fv")]
        public static
        unsafe void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Single* v)
        {
            Delegates.glMultiTexCoord2fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2i")]
        public static
        void MultiTexCoord2(int target, Int32 s, Int32 t)
        {
            Delegates.glMultiTexCoord2i((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32)s, (Int32)t);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2i")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Int32 s, Int32 t)
        {
            Delegates.glMultiTexCoord2i((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32)s, (Int32)t);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2iv")]
        public static
        void MultiTexCoord2(int target, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glMultiTexCoord2iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2iv")]
        public static
        void MultiTexCoord2(int target, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord2iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2iv")]
        public static
        unsafe void MultiTexCoord2(int target, Int32* v)
        {
            Delegates.glMultiTexCoord2iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2iv")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glMultiTexCoord2iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2iv")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord2iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2iv")]
        public static
        unsafe void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Int32* v)
        {
            Delegates.glMultiTexCoord2iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2s")]
        public static
        void MultiTexCoord2(int target, Int16 s, Int16 t)
        {
            Delegates.glMultiTexCoord2s((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16)s, (Int16)t);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2s")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Int16 s, Int16 t)
        {
            Delegates.glMultiTexCoord2s((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16)s, (Int16)t);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2sv")]
        public static
        void MultiTexCoord2(int target, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glMultiTexCoord2sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2sv")]
        public static
        void MultiTexCoord2(int target, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord2sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2sv")]
        public static
        unsafe void MultiTexCoord2(int target, Int16* v)
        {
            Delegates.glMultiTexCoord2sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2sv")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glMultiTexCoord2sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2sv")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord2sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2sv")]
        public static
        unsafe void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Int16* v)
        {
            Delegates.glMultiTexCoord2sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3d")]
        public static
        void MultiTexCoord3(int target, Double s, Double t, Double r)
        {
            Delegates.glMultiTexCoord3d((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double)s, (Double)t, (Double)r);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3d")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Double s, Double t, Double r)
        {
            Delegates.glMultiTexCoord3d((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double)s, (Double)t, (Double)r);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3dv")]
        public static
        void MultiTexCoord3(int target, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glMultiTexCoord3dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3dv")]
        public static
        void MultiTexCoord3(int target, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord3dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3dv")]
        public static
        unsafe void MultiTexCoord3(int target, Double* v)
        {
            Delegates.glMultiTexCoord3dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3dv")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glMultiTexCoord3dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3dv")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord3dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3dv")]
        public static
        unsafe void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Double* v)
        {
            Delegates.glMultiTexCoord3dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3f")]
        public static
        void MultiTexCoord3(int target, Single s, Single t, Single r)
        {
            Delegates.glMultiTexCoord3f((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single)s, (Single)t, (Single)r);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3f")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Single s, Single t, Single r)
        {
            Delegates.glMultiTexCoord3f((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single)s, (Single)t, (Single)r);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3fv")]
        public static
        void MultiTexCoord3(int target, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glMultiTexCoord3fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3fv")]
        public static
        void MultiTexCoord3(int target, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord3fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3fv")]
        public static
        unsafe void MultiTexCoord3(int target, Single* v)
        {
            Delegates.glMultiTexCoord3fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3fv")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glMultiTexCoord3fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3fv")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord3fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3fv")]
        public static
        unsafe void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Single* v)
        {
            Delegates.glMultiTexCoord3fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3i")]
        public static
        void MultiTexCoord3(int target, Int32 s, Int32 t, Int32 r)
        {
            Delegates.glMultiTexCoord3i((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32)s, (Int32)t, (Int32)r);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3i")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Int32 s, Int32 t, Int32 r)
        {
            Delegates.glMultiTexCoord3i((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32)s, (Int32)t, (Int32)r);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3iv")]
        public static
        void MultiTexCoord3(int target, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glMultiTexCoord3iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3iv")]
        public static
        void MultiTexCoord3(int target, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord3iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3iv")]
        public static
        unsafe void MultiTexCoord3(int target, Int32* v)
        {
            Delegates.glMultiTexCoord3iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3iv")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glMultiTexCoord3iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3iv")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord3iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3iv")]
        public static
        unsafe void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Int32* v)
        {
            Delegates.glMultiTexCoord3iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3s")]
        public static
        void MultiTexCoord3(int target, Int16 s, Int16 t, Int16 r)
        {
            Delegates.glMultiTexCoord3s((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16)s, (Int16)t, (Int16)r);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3s")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Int16 s, Int16 t, Int16 r)
        {
            Delegates.glMultiTexCoord3s((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16)s, (Int16)t, (Int16)r);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3sv")]
        public static
        void MultiTexCoord3(int target, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glMultiTexCoord3sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3sv")]
        public static
        void MultiTexCoord3(int target, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord3sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3sv")]
        public static
        unsafe void MultiTexCoord3(int target, Int16* v)
        {
            Delegates.glMultiTexCoord3sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3sv")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glMultiTexCoord3sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3sv")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord3sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3sv")]
        public static
        unsafe void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Int16* v)
        {
            Delegates.glMultiTexCoord3sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4d")]
        public static
        void MultiTexCoord4(int target, Double s, Double t, Double r, Double q)
        {
            Delegates.glMultiTexCoord4d((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double)s, (Double)t, (Double)r, (Double)q);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4d")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Double s, Double t, Double r, Double q)
        {
            Delegates.glMultiTexCoord4d((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double)s, (Double)t, (Double)r, (Double)q);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4dv")]
        public static
        void MultiTexCoord4(int target, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glMultiTexCoord4dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4dv")]
        public static
        void MultiTexCoord4(int target, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord4dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4dv")]
        public static
        unsafe void MultiTexCoord4(int target, Double* v)
        {
            Delegates.glMultiTexCoord4dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4dv")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glMultiTexCoord4dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4dv")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord4dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4dv")]
        public static
        unsafe void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Double* v)
        {
            Delegates.glMultiTexCoord4dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4f")]
        public static
        void MultiTexCoord4(int target, Single s, Single t, Single r, Single q)
        {
            Delegates.glMultiTexCoord4f((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single)s, (Single)t, (Single)r, (Single)q);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4f")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Single s, Single t, Single r, Single q)
        {
            Delegates.glMultiTexCoord4f((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single)s, (Single)t, (Single)r, (Single)q);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4fv")]
        public static
        void MultiTexCoord4(int target, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glMultiTexCoord4fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4fv")]
        public static
        void MultiTexCoord4(int target, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord4fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4fv")]
        public static
        unsafe void MultiTexCoord4(int target, Single* v)
        {
            Delegates.glMultiTexCoord4fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4fv")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glMultiTexCoord4fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4fv")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord4fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4fv")]
        public static
        unsafe void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Single* v)
        {
            Delegates.glMultiTexCoord4fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4i")]
        public static
        void MultiTexCoord4(int target, Int32 s, Int32 t, Int32 r, Int32 q)
        {
            Delegates.glMultiTexCoord4i((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32)s, (Int32)t, (Int32)r, (Int32)q);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4i")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Int32 s, Int32 t, Int32 r, Int32 q)
        {
            Delegates.glMultiTexCoord4i((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32)s, (Int32)t, (Int32)r, (Int32)q);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4iv")]
        public static
        void MultiTexCoord4(int target, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glMultiTexCoord4iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4iv")]
        public static
        void MultiTexCoord4(int target, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord4iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4iv")]
        public static
        unsafe void MultiTexCoord4(int target, Int32* v)
        {
            Delegates.glMultiTexCoord4iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4iv")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glMultiTexCoord4iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4iv")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord4iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4iv")]
        public static
        unsafe void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Int32* v)
        {
            Delegates.glMultiTexCoord4iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4s")]
        public static
        void MultiTexCoord4(int target, Int16 s, Int16 t, Int16 r, Int16 q)
        {
            Delegates.glMultiTexCoord4s((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16)s, (Int16)t, (Int16)r, (Int16)q);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4s")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Int16 s, Int16 t, Int16 r, Int16 q)
        {
            Delegates.glMultiTexCoord4s((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16)s, (Int16)t, (Int16)r, (Int16)q);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4sv")]
        public static
        void MultiTexCoord4(int target, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glMultiTexCoord4sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4sv")]
        public static
        void MultiTexCoord4(int target, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord4sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4sv")]
        public static
        unsafe void MultiTexCoord4(int target, Int16* v)
        {
            Delegates.glMultiTexCoord4sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4sv")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glMultiTexCoord4sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4sv")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord4sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4sv")]
        public static
        unsafe void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Int16* v)
        {
            Delegates.glMultiTexCoord4sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMultMatrixd")]
        public static
        void MultMatrix(Double[] m)
        {
            unsafe
            {
                fixed (Double* m_ptr = m)
                {
                    Delegates.glMultMatrixd((Double*)m_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMultMatrixd")]
        public static
        void MultMatrix(ref Double m)
        {
            unsafe
            {
                fixed (Double* m_ptr = &m)
                {
                    Delegates.glMultMatrixd((Double*)m_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMultMatrixd")]
        public static
        unsafe void MultMatrix(Double* m)
        {
            Delegates.glMultMatrixd((Double*)m);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMultMatrixf")]
        public static
        void MultMatrix(Single[] m)
        {
            unsafe
            {
                fixed (Single* m_ptr = m)
                {
                    Delegates.glMultMatrixf((Single*)m_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMultMatrixf")]
        public static
        void MultMatrix(ref Single m)
        {
            unsafe
            {
                fixed (Single* m_ptr = &m)
                {
                    Delegates.glMultMatrixf((Single*)m_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMultMatrixf")]
        public static
        unsafe void MultMatrix(Single* m)
        {
            Delegates.glMultMatrixf((Single*)m);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultTransposeMatrixd")]
        public static
        void MultTransposeMatrix(Double[] m)
        {
            unsafe
            {
                fixed (Double* m_ptr = m)
                {
                    Delegates.glMultTransposeMatrixd((Double*)m_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultTransposeMatrixd")]
        public static
        void MultTransposeMatrix(ref Double m)
        {
            unsafe
            {
                fixed (Double* m_ptr = &m)
                {
                    Delegates.glMultTransposeMatrixd((Double*)m_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultTransposeMatrixd")]
        public static
        unsafe void MultTransposeMatrix(Double* m)
        {
            Delegates.glMultTransposeMatrixd((Double*)m);
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultTransposeMatrixf")]
        public static
        void MultTransposeMatrix(Single[] m)
        {
            unsafe
            {
                fixed (Single* m_ptr = m)
                {
                    Delegates.glMultTransposeMatrixf((Single*)m_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultTransposeMatrixf")]
        public static
        void MultTransposeMatrix(ref Single m)
        {
            unsafe
            {
                fixed (Single* m_ptr = &m)
                {
                    Delegates.glMultTransposeMatrixf((Single*)m_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultTransposeMatrixf")]
        public static
        unsafe void MultTransposeMatrix(Single* m)
        {
            Delegates.glMultTransposeMatrixf((Single*)m);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNewList")]
        public static
        void NewList(Int32 list, int mode)
        {
            Delegates.glNewList((UInt32)list, (OpenTK.Graphics.OpenGL.ListMode)mode);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNewList")]
        public static
        void NewList(Int32 list, OpenTK.Graphics.OpenGL.ListMode mode)
        {
            Delegates.glNewList((UInt32)list, (OpenTK.Graphics.OpenGL.ListMode)mode);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNewList")]
        public static
        void NewList(UInt32 list, int mode)
        {
            Delegates.glNewList((UInt32)list, (OpenTK.Graphics.OpenGL.ListMode)mode);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNewList")]
        public static
        void NewList(UInt32 list, OpenTK.Graphics.OpenGL.ListMode mode)
        {
            Delegates.glNewList((UInt32)list, (OpenTK.Graphics.OpenGL.ListMode)mode);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3b")]
        public static
        void Normal3(Byte nx, Byte ny, Byte nz)
        {
            Delegates.glNormal3b((SByte)nx, (SByte)ny, (SByte)nz);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3b")]
        public static
        void Normal3(SByte nx, SByte ny, SByte nz)
        {
            Delegates.glNormal3b((SByte)nx, (SByte)ny, (SByte)nz);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3bv")]
        public static
        void Normal3(Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glNormal3bv((SByte*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3bv")]
        public static
        void Normal3(ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glNormal3bv((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3bv")]
        public static
        unsafe void Normal3(Byte* v)
        {
            Delegates.glNormal3bv((SByte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3bv")]
        public static
        void Normal3(SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Delegates.glNormal3bv((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3bv")]
        public static
        void Normal3(ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Delegates.glNormal3bv((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3bv")]
        public static
        unsafe void Normal3(SByte* v)
        {
            Delegates.glNormal3bv((SByte*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3d")]
        public static
        void Normal3(Double nx, Double ny, Double nz)
        {
            Delegates.glNormal3d((Double)nx, (Double)ny, (Double)nz);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3dv")]
        public static
        void Normal3(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glNormal3dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3dv")]
        public static
        void Normal3(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glNormal3dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3dv")]
        public static
        unsafe void Normal3(Double* v)
        {
            Delegates.glNormal3dv((Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3f")]
        public static
        void Normal3(Single nx, Single ny, Single nz)
        {
            Delegates.glNormal3f((Single)nx, (Single)ny, (Single)nz);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3fv")]
        public static
        void Normal3(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glNormal3fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3fv")]
        public static
        void Normal3(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glNormal3fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3fv")]
        public static
        unsafe void Normal3(Single* v)
        {
            Delegates.glNormal3fv((Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3i")]
        public static
        void Normal3(Int32 nx, Int32 ny, Int32 nz)
        {
            Delegates.glNormal3i((Int32)nx, (Int32)ny, (Int32)nz);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3iv")]
        public static
        void Normal3(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glNormal3iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3iv")]
        public static
        void Normal3(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glNormal3iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3iv")]
        public static
        unsafe void Normal3(Int32* v)
        {
            Delegates.glNormal3iv((Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3s")]
        public static
        void Normal3(Int16 nx, Int16 ny, Int16 nz)
        {
            Delegates.glNormal3s((Int16)nx, (Int16)ny, (Int16)nz);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3sv")]
        public static
        void Normal3(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glNormal3sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3sv")]
        public static
        void Normal3(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glNormal3sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3sv")]
        public static
        unsafe void Normal3(Int16* v)
        {
            Delegates.glNormal3sv((Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glNormalPointer")]
        public static
        void NormalPointer(int type, Int32 stride, IntPtr pointer)
        {
            Delegates.glNormalPointer((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glNormalPointer")]
        public static
        void NormalPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalPointer((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glNormalPointer")]
        public static
        void NormalPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalPointer((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glNormalPointer")]
        public static
        void NormalPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalPointer((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glNormalPointer")]
        public static
        void NormalPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalPointer((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T2)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glNormalPointer")]
        public static
        void NormalPointer(OpenTK.Graphics.OpenGL.NormalPointerType type, Int32 stride, IntPtr pointer)
        {
            Delegates.glNormalPointer((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glNormalPointer")]
        public static
        void NormalPointer<T2>(OpenTK.Graphics.OpenGL.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalPointer((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glNormalPointer")]
        public static
        void NormalPointer<T2>(OpenTK.Graphics.OpenGL.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalPointer((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glNormalPointer")]
        public static
        void NormalPointer<T2>(OpenTK.Graphics.OpenGL.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalPointer((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glNormalPointer")]
        public static
        void NormalPointer<T2>(OpenTK.Graphics.OpenGL.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalPointer((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T2)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glOrtho")]
        public static
        void Ortho(Double left, Double right, Double bottom, Double top, Double zNear, Double zFar)
        {
            Delegates.glOrtho((Double)left, (Double)right, (Double)bottom, (Double)top, (Double)zNear, (Double)zFar);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPassThrough")]
        public static
        void PassThrough(Single token)
        {
            Delegates.glPassThrough((Single)token);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapfv")]
        public static
        void PixelMap(int map, Int32 mapsize, Single[] values)
        {
            unsafe
            {
                fixed (Single* values_ptr = values)
                {
                    Delegates.glPixelMapfv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (Single*)values_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapfv")]
        public static
        void PixelMap(int map, Int32 mapsize, ref Single values)
        {
            unsafe
            {
                fixed (Single* values_ptr = &values)
                {
                    Delegates.glPixelMapfv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (Single*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapfv")]
        public static
        unsafe void PixelMap(int map, Int32 mapsize, Single* values)
        {
            Delegates.glPixelMapfv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (Single*)values);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapfv")]
        public static
        void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, Int32 mapsize, Single[] values)
        {
            unsafe
            {
                fixed (Single* values_ptr = values)
                {
                    Delegates.glPixelMapfv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (Single*)values_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapfv")]
        public static
        void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, Int32 mapsize, ref Single values)
        {
            unsafe
            {
                fixed (Single* values_ptr = &values)
                {
                    Delegates.glPixelMapfv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (Single*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapfv")]
        public static
        unsafe void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, Int32 mapsize, Single* values)
        {
            Delegates.glPixelMapfv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (Single*)values);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        public static
        void PixelMap(int map, Int32 mapsize, Int32[] values)
        {
            unsafe
            {
                fixed (Int32* values_ptr = values)
                {
                    Delegates.glPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt32*)values_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        public static
        void PixelMap(int map, Int32 mapsize, ref Int32 values)
        {
            unsafe
            {
                fixed (Int32* values_ptr = &values)
                {
                    Delegates.glPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt32*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        public static
        unsafe void PixelMap(int map, Int32 mapsize, Int32* values)
        {
            Delegates.glPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt32*)values);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        public static
        void PixelMap(int map, Int32 mapsize, UInt32[] values)
        {
            unsafe
            {
                fixed (UInt32* values_ptr = values)
                {
                    Delegates.glPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt32*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        public static
        void PixelMap(int map, Int32 mapsize, ref UInt32 values)
        {
            unsafe
            {
                fixed (UInt32* values_ptr = &values)
                {
                    Delegates.glPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt32*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        public static
        unsafe void PixelMap(int map, Int32 mapsize, UInt32* values)
        {
            Delegates.glPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt32*)values);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        public static
        void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, Int32 mapsize, Int32[] values)
        {
            unsafe
            {
                fixed (Int32* values_ptr = values)
                {
                    Delegates.glPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt32*)values_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        public static
        void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, Int32 mapsize, ref Int32 values)
        {
            unsafe
            {
                fixed (Int32* values_ptr = &values)
                {
                    Delegates.glPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt32*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        public static
        unsafe void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, Int32 mapsize, Int32* values)
        {
            Delegates.glPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt32*)values);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        public static
        void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, Int32 mapsize, UInt32[] values)
        {
            unsafe
            {
                fixed (UInt32* values_ptr = values)
                {
                    Delegates.glPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt32*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        public static
        void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, Int32 mapsize, ref UInt32 values)
        {
            unsafe
            {
                fixed (UInt32* values_ptr = &values)
                {
                    Delegates.glPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt32*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        public static
        unsafe void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, Int32 mapsize, UInt32* values)
        {
            Delegates.glPixelMapuiv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt32*)values);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapusv")]
        public static
        void PixelMap(int map, Int32 mapsize, Int16[] values)
        {
            unsafe
            {
                fixed (Int16* values_ptr = values)
                {
                    Delegates.glPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt16*)values_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapusv")]
        public static
        void PixelMap(int map, Int32 mapsize, ref Int16 values)
        {
            unsafe
            {
                fixed (Int16* values_ptr = &values)
                {
                    Delegates.glPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt16*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapusv")]
        public static
        unsafe void PixelMap(int map, Int32 mapsize, Int16* values)
        {
            Delegates.glPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt16*)values);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapusv")]
        public static
        void PixelMap(int map, Int32 mapsize, UInt16[] values)
        {
            unsafe
            {
                fixed (UInt16* values_ptr = values)
                {
                    Delegates.glPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt16*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapusv")]
        public static
        void PixelMap(int map, Int32 mapsize, ref UInt16 values)
        {
            unsafe
            {
                fixed (UInt16* values_ptr = &values)
                {
                    Delegates.glPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt16*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapusv")]
        public static
        unsafe void PixelMap(int map, Int32 mapsize, UInt16* values)
        {
            Delegates.glPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt16*)values);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapusv")]
        public static
        void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, Int32 mapsize, Int16[] values)
        {
            unsafe
            {
                fixed (Int16* values_ptr = values)
                {
                    Delegates.glPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt16*)values_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapusv")]
        public static
        void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, Int32 mapsize, ref Int16 values)
        {
            unsafe
            {
                fixed (Int16* values_ptr = &values)
                {
                    Delegates.glPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt16*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapusv")]
        public static
        unsafe void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, Int32 mapsize, Int16* values)
        {
            Delegates.glPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt16*)values);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapusv")]
        public static
        void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, Int32 mapsize, UInt16[] values)
        {
            unsafe
            {
                fixed (UInt16* values_ptr = values)
                {
                    Delegates.glPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt16*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapusv")]
        public static
        void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, Int32 mapsize, ref UInt16 values)
        {
            unsafe
            {
                fixed (UInt16* values_ptr = &values)
                {
                    Delegates.glPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt16*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapusv")]
        public static
        unsafe void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, Int32 mapsize, UInt16* values)
        {
            Delegates.glPixelMapusv((OpenTK.Graphics.OpenGL.PixelMap)map, (Int32)mapsize, (UInt16*)values);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelStoref")]
        public static
        void PixelStore(int pname, Single param)
        {
            Delegates.glPixelStoref((OpenTK.Graphics.OpenGL.PixelStoreParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelStoref")]
        public static
        void PixelStore(OpenTK.Graphics.OpenGL.PixelStoreParameter pname, Single param)
        {
            Delegates.glPixelStoref((OpenTK.Graphics.OpenGL.PixelStoreParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelStorei")]
        public static
        void PixelStore(int pname, Int32 param)
        {
            Delegates.glPixelStorei((OpenTK.Graphics.OpenGL.PixelStoreParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelStorei")]
        public static
        void PixelStore(OpenTK.Graphics.OpenGL.PixelStoreParameter pname, Int32 param)
        {
            Delegates.glPixelStorei((OpenTK.Graphics.OpenGL.PixelStoreParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelTransferf")]
        public static
        void PixelTransfer(int pname, Single param)
        {
            Delegates.glPixelTransferf((OpenTK.Graphics.OpenGL.PixelTransferParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelTransferf")]
        public static
        void PixelTransfer(OpenTK.Graphics.OpenGL.PixelTransferParameter pname, Single param)
        {
            Delegates.glPixelTransferf((OpenTK.Graphics.OpenGL.PixelTransferParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelTransferi")]
        public static
        void PixelTransfer(int pname, Int32 param)
        {
            Delegates.glPixelTransferi((OpenTK.Graphics.OpenGL.PixelTransferParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelTransferi")]
        public static
        void PixelTransfer(OpenTK.Graphics.OpenGL.PixelTransferParameter pname, Int32 param)
        {
            Delegates.glPixelTransferi((OpenTK.Graphics.OpenGL.PixelTransferParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelZoom")]
        public static
        void PixelZoom(Single xfactor, Single yfactor)
        {
            Delegates.glPixelZoom((Single)xfactor, (Single)yfactor);
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterf")]
        public static
        void PointParameter(int pname, Single param)
        {
            Delegates.glPointParameterf((OpenTK.Graphics.OpenGL.PointParameterName)pname, (Single)param);
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterf")]
        public static
        void PointParameter(OpenTK.Graphics.OpenGL.PointParameterName pname, Single param)
        {
            Delegates.glPointParameterf((OpenTK.Graphics.OpenGL.PointParameterName)pname, (Single)param);
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterfv")]
        public static
        void PointParameter(int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glPointParameterfv((OpenTK.Graphics.OpenGL.PointParameterName)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterfv")]
        public static
        unsafe void PointParameter(int pname, Single* @params)
        {
            Delegates.glPointParameterfv((OpenTK.Graphics.OpenGL.PointParameterName)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterfv")]
        public static
        void PointParameter(OpenTK.Graphics.OpenGL.PointParameterName pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glPointParameterfv((OpenTK.Graphics.OpenGL.PointParameterName)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterfv")]
        public static
        unsafe void PointParameter(OpenTK.Graphics.OpenGL.PointParameterName pname, Single* @params)
        {
            Delegates.glPointParameterfv((OpenTK.Graphics.OpenGL.PointParameterName)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteri")]
        public static
        void PointParameter(int pname, Int32 param)
        {
            Delegates.glPointParameteri((OpenTK.Graphics.OpenGL.PointParameterName)pname, (Int32)param);
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteri")]
        public static
        void PointParameter(OpenTK.Graphics.OpenGL.PointParameterName pname, Int32 param)
        {
            Delegates.glPointParameteri((OpenTK.Graphics.OpenGL.PointParameterName)pname, (Int32)param);
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteriv")]
        public static
        void PointParameter(int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glPointParameteriv((OpenTK.Graphics.OpenGL.PointParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteriv")]
        public static
        unsafe void PointParameter(int pname, Int32* @params)
        {
            Delegates.glPointParameteriv((OpenTK.Graphics.OpenGL.PointParameterName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteriv")]
        public static
        void PointParameter(OpenTK.Graphics.OpenGL.PointParameterName pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glPointParameteriv((OpenTK.Graphics.OpenGL.PointParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteriv")]
        public static
        unsafe void PointParameter(OpenTK.Graphics.OpenGL.PointParameterName pname, Int32* @params)
        {
            Delegates.glPointParameteriv((OpenTK.Graphics.OpenGL.PointParameterName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPointSize")]
        public static
        void PointSize(Single size)
        {
            Delegates.glPointSize((Single)size);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPolygonMode")]
        public static
        void PolygonMode(int face, int mode)
        {
            Delegates.glPolygonMode((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.PolygonMode)mode);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPolygonMode")]
        public static
        void PolygonMode(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.PolygonMode mode)
        {
            Delegates.glPolygonMode((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.PolygonMode)mode);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glPolygonOffset")]
        public static
        void PolygonOffset(Single factor, Single units)
        {
            Delegates.glPolygonOffset((Single)factor, (Single)units);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPolygonStipple")]
        public static
        void PolygonStipple(Byte[] mask)
        {
            unsafe
            {
                fixed (Byte* mask_ptr = mask)
                {
                    Delegates.glPolygonStipple((Byte*)mask_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPolygonStipple")]
        public static
        void PolygonStipple(ref Byte mask)
        {
            unsafe
            {
                fixed (Byte* mask_ptr = &mask)
                {
                    Delegates.glPolygonStipple((Byte*)mask_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPolygonStipple")]
        public static
        unsafe void PolygonStipple(Byte* mask)
        {
            Delegates.glPolygonStipple((Byte*)mask);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPopAttrib")]
        public static
        void PopAttrib()
        {
            Delegates.glPopAttrib();
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glPopClientAttrib")]
        public static
        void PopClientAttrib()
        {
            Delegates.glPopClientAttrib();
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPopMatrix")]
        public static
        void PopMatrix()
        {
            Delegates.glPopMatrix();
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPopName")]
        public static
        void PopName()
        {
            Delegates.glPopName();
        }

        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glPrimitiveRestartIndex")]
        public static
        void PrimitiveRestartIndex(Int32 index)
        {
            Delegates.glPrimitiveRestartIndex((UInt32)index);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glPrimitiveRestartIndex")]
        public static
        void PrimitiveRestartIndex(UInt32 index)
        {
            Delegates.glPrimitiveRestartIndex((UInt32)index);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
        public static
        void PrioritizeTextures(Int32 n, Int32[] textures, Single[] priorities)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = textures)
                fixed (Single* priorities_ptr = priorities)
                {
                    Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
        public static
        void PrioritizeTextures(Int32 n, ref Int32 textures, ref Single priorities)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = &textures)
                fixed (Single* priorities_ptr = &priorities)
                {
                    Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
        public static
        unsafe void PrioritizeTextures(Int32 n, Int32* textures, Single* priorities)
        {
            Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures, (Single*)priorities);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
        public static
        void PrioritizeTextures(Int32 n, UInt32[] textures, Single[] priorities)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = textures)
                fixed (Single* priorities_ptr = priorities)
                {
                    Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
        public static
        void PrioritizeTextures(Int32 n, ref UInt32 textures, ref Single priorities)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = &textures)
                fixed (Single* priorities_ptr = &priorities)
                {
                    Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
        public static
        unsafe void PrioritizeTextures(Int32 n, UInt32* textures, Single* priorities)
        {
            Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures, (Single*)priorities);
        }

        [AutoGenerated(Category = "VERSION_3_2", Version = "1.2", EntryPoint = "glProgramParameteri")]
        public static
        void ProgramParameter(Int32 program, int pname, Int32 value)
        {
            Delegates.glProgramParameteri((UInt32)program, (OpenTK.Graphics.OpenGL.VERSION_3_2)pname, (Int32)value);
        }

        [AutoGenerated(Category = "VERSION_3_2", Version = "1.2", EntryPoint = "glProgramParameteri")]
        public static
        void ProgramParameter(Int32 program, OpenTK.Graphics.OpenGL.VERSION_3_2 pname, Int32 value)
        {
            Delegates.glProgramParameteri((UInt32)program, (OpenTK.Graphics.OpenGL.VERSION_3_2)pname, (Int32)value);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_2", Version = "1.2", EntryPoint = "glProgramParameteri")]
        public static
        void ProgramParameter(UInt32 program, int pname, Int32 value)
        {
            Delegates.glProgramParameteri((UInt32)program, (OpenTK.Graphics.OpenGL.VERSION_3_2)pname, (Int32)value);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_2", Version = "1.2", EntryPoint = "glProgramParameteri")]
        public static
        void ProgramParameter(UInt32 program, OpenTK.Graphics.OpenGL.VERSION_3_2 pname, Int32 value)
        {
            Delegates.glProgramParameteri((UInt32)program, (OpenTK.Graphics.OpenGL.VERSION_3_2)pname, (Int32)value);
        }

        [AutoGenerated(Category = "ARB_provoking_vertex", Version = "1.2", EntryPoint = "glProvokingVertex")]
        public static
        void ProvokingVertex(int mode)
        {
            Delegates.glProvokingVertex((OpenTK.Graphics.OpenGL.ProvokingVertexMode)mode);
        }

        [AutoGenerated(Category = "ARB_provoking_vertex", Version = "1.2", EntryPoint = "glProvokingVertex")]
        public static
        void ProvokingVertex(OpenTK.Graphics.OpenGL.ProvokingVertexMode mode)
        {
            Delegates.glProvokingVertex((OpenTK.Graphics.OpenGL.ProvokingVertexMode)mode);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPushAttrib")]
        public static
        void PushAttrib(OpenTK.Graphics.OpenGL.AttribMask mask)
        {
            Delegates.glPushAttrib((OpenTK.Graphics.OpenGL.AttribMask)mask);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPushAttrib")]
        public static
        void PushAttrib(int mask)
        {
            Delegates.glPushAttrib((OpenTK.Graphics.OpenGL.AttribMask)mask);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glPushClientAttrib")]
        public static
        void PushClientAttrib(OpenTK.Graphics.OpenGL.ClientAttribMask mask)
        {
            Delegates.glPushClientAttrib((OpenTK.Graphics.OpenGL.ClientAttribMask)mask);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glPushClientAttrib")]
        public static
        void PushClientAttrib(int mask)
        {
            Delegates.glPushClientAttrib((OpenTK.Graphics.OpenGL.ClientAttribMask)mask);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPushMatrix")]
        public static
        void PushMatrix()
        {
            Delegates.glPushMatrix();
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPushName")]
        public static
        void PushName(Int32 name)
        {
            Delegates.glPushName((UInt32)name);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPushName")]
        public static
        void PushName(UInt32 name)
        {
            Delegates.glPushName((UInt32)name);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2d")]
        public static
        void RasterPos2(Double x, Double y)
        {
            Delegates.glRasterPos2d((Double)x, (Double)y);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2dv")]
        public static
        void RasterPos2(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glRasterPos2dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2dv")]
        public static
        void RasterPos2(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glRasterPos2dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2dv")]
        public static
        unsafe void RasterPos2(Double* v)
        {
            Delegates.glRasterPos2dv((Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2f")]
        public static
        void RasterPos2(Single x, Single y)
        {
            Delegates.glRasterPos2f((Single)x, (Single)y);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2fv")]
        public static
        void RasterPos2(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glRasterPos2fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2fv")]
        public static
        void RasterPos2(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glRasterPos2fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2fv")]
        public static
        unsafe void RasterPos2(Single* v)
        {
            Delegates.glRasterPos2fv((Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2i")]
        public static
        void RasterPos2(Int32 x, Int32 y)
        {
            Delegates.glRasterPos2i((Int32)x, (Int32)y);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2iv")]
        public static
        void RasterPos2(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glRasterPos2iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2iv")]
        public static
        void RasterPos2(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glRasterPos2iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2iv")]
        public static
        unsafe void RasterPos2(Int32* v)
        {
            Delegates.glRasterPos2iv((Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2s")]
        public static
        void RasterPos2(Int16 x, Int16 y)
        {
            Delegates.glRasterPos2s((Int16)x, (Int16)y);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2sv")]
        public static
        void RasterPos2(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glRasterPos2sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2sv")]
        public static
        void RasterPos2(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glRasterPos2sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2sv")]
        public static
        unsafe void RasterPos2(Int16* v)
        {
            Delegates.glRasterPos2sv((Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3d")]
        public static
        void RasterPos3(Double x, Double y, Double z)
        {
            Delegates.glRasterPos3d((Double)x, (Double)y, (Double)z);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3dv")]
        public static
        void RasterPos3(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glRasterPos3dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3dv")]
        public static
        void RasterPos3(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glRasterPos3dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3dv")]
        public static
        unsafe void RasterPos3(Double* v)
        {
            Delegates.glRasterPos3dv((Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3f")]
        public static
        void RasterPos3(Single x, Single y, Single z)
        {
            Delegates.glRasterPos3f((Single)x, (Single)y, (Single)z);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3fv")]
        public static
        void RasterPos3(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glRasterPos3fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3fv")]
        public static
        void RasterPos3(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glRasterPos3fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3fv")]
        public static
        unsafe void RasterPos3(Single* v)
        {
            Delegates.glRasterPos3fv((Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3i")]
        public static
        void RasterPos3(Int32 x, Int32 y, Int32 z)
        {
            Delegates.glRasterPos3i((Int32)x, (Int32)y, (Int32)z);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3iv")]
        public static
        void RasterPos3(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glRasterPos3iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3iv")]
        public static
        void RasterPos3(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glRasterPos3iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3iv")]
        public static
        unsafe void RasterPos3(Int32* v)
        {
            Delegates.glRasterPos3iv((Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3s")]
        public static
        void RasterPos3(Int16 x, Int16 y, Int16 z)
        {
            Delegates.glRasterPos3s((Int16)x, (Int16)y, (Int16)z);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3sv")]
        public static
        void RasterPos3(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glRasterPos3sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3sv")]
        public static
        void RasterPos3(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glRasterPos3sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3sv")]
        public static
        unsafe void RasterPos3(Int16* v)
        {
            Delegates.glRasterPos3sv((Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4d")]
        public static
        void RasterPos4(Double x, Double y, Double z, Double w)
        {
            Delegates.glRasterPos4d((Double)x, (Double)y, (Double)z, (Double)w);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4dv")]
        public static
        void RasterPos4(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glRasterPos4dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4dv")]
        public static
        void RasterPos4(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glRasterPos4dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4dv")]
        public static
        unsafe void RasterPos4(Double* v)
        {
            Delegates.glRasterPos4dv((Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4f")]
        public static
        void RasterPos4(Single x, Single y, Single z, Single w)
        {
            Delegates.glRasterPos4f((Single)x, (Single)y, (Single)z, (Single)w);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4fv")]
        public static
        void RasterPos4(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glRasterPos4fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4fv")]
        public static
        void RasterPos4(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glRasterPos4fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4fv")]
        public static
        unsafe void RasterPos4(Single* v)
        {
            Delegates.glRasterPos4fv((Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4i")]
        public static
        void RasterPos4(Int32 x, Int32 y, Int32 z, Int32 w)
        {
            Delegates.glRasterPos4i((Int32)x, (Int32)y, (Int32)z, (Int32)w);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4iv")]
        public static
        void RasterPos4(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glRasterPos4iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4iv")]
        public static
        void RasterPos4(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glRasterPos4iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4iv")]
        public static
        unsafe void RasterPos4(Int32* v)
        {
            Delegates.glRasterPos4iv((Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4s")]
        public static
        void RasterPos4(Int16 x, Int16 y, Int16 z, Int16 w)
        {
            Delegates.glRasterPos4s((Int16)x, (Int16)y, (Int16)z, (Int16)w);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4sv")]
        public static
        void RasterPos4(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glRasterPos4sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4sv")]
        public static
        void RasterPos4(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glRasterPos4sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4sv")]
        public static
        unsafe void RasterPos4(Int16* v)
        {
            Delegates.glRasterPos4sv((Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadBuffer")]
        public static
        void ReadBuffer(int mode)
        {
            Delegates.glReadBuffer((OpenTK.Graphics.OpenGL.ReadBufferMode)mode);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadBuffer")]
        public static
        void ReadBuffer(OpenTK.Graphics.OpenGL.ReadBufferMode mode)
        {
            Delegates.glReadBuffer((OpenTK.Graphics.OpenGL.ReadBufferMode)mode);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static
        void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, int format, int type, [OutAttribute] IntPtr pixels)
        {
            Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static
        void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T6[] pixels)
            where T6 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static
        void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T6[,] pixels)
            where T6 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static
        void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T6[,,] pixels)
            where T6 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static
        void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] ref T6 pixels)
            where T6 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T6)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static
        void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr pixels)
        {
            Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static
        void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[] pixels)
            where T6 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static
        void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,] pixels)
            where T6 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static
        void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,,] pixels)
            where T6 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static
        void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T6 pixels)
            where T6 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T6)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectd")]
        public static
        void Rect(Double x1, Double y1, Double x2, Double y2)
        {
            Delegates.glRectd((Double)x1, (Double)y1, (Double)x2, (Double)y2);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectdv")]
        public static
        void Rect(Double[] v1, Double[] v2)
        {
            unsafe
            {
                fixed (Double* v1_ptr = v1)
                fixed (Double* v2_ptr = v2)
                {
                    Delegates.glRectdv((Double*)v1_ptr, (Double*)v2_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectdv")]
        public static
        void Rect(ref Double v1, ref Double v2)
        {
            unsafe
            {
                fixed (Double* v1_ptr = &v1)
                fixed (Double* v2_ptr = &v2)
                {
                    Delegates.glRectdv((Double*)v1_ptr, (Double*)v2_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectdv")]
        public static
        unsafe void Rect(Double* v1, Double* v2)
        {
            Delegates.glRectdv((Double*)v1, (Double*)v2);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectf")]
        public static
        void Rect(Single x1, Single y1, Single x2, Single y2)
        {
            Delegates.glRectf((Single)x1, (Single)y1, (Single)x2, (Single)y2);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectfv")]
        public static
        void Rect(Single[] v1, Single[] v2)
        {
            unsafe
            {
                fixed (Single* v1_ptr = v1)
                fixed (Single* v2_ptr = v2)
                {
                    Delegates.glRectfv((Single*)v1_ptr, (Single*)v2_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectfv")]
        public static
        void Rect(ref Single v1, ref Single v2)
        {
            unsafe
            {
                fixed (Single* v1_ptr = &v1)
                fixed (Single* v2_ptr = &v2)
                {
                    Delegates.glRectfv((Single*)v1_ptr, (Single*)v2_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectfv")]
        public static
        unsafe void Rect(Single* v1, Single* v2)
        {
            Delegates.glRectfv((Single*)v1, (Single*)v2);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRecti")]
        public static
        void Rect(Int32 x1, Int32 y1, Int32 x2, Int32 y2)
        {
            Delegates.glRecti((Int32)x1, (Int32)y1, (Int32)x2, (Int32)y2);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectiv")]
        public static
        void Rect(Int32[] v1, Int32[] v2)
        {
            unsafe
            {
                fixed (Int32* v1_ptr = v1)
                fixed (Int32* v2_ptr = v2)
                {
                    Delegates.glRectiv((Int32*)v1_ptr, (Int32*)v2_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectiv")]
        public static
        void Rect(ref Int32 v1, ref Int32 v2)
        {
            unsafe
            {
                fixed (Int32* v1_ptr = &v1)
                fixed (Int32* v2_ptr = &v2)
                {
                    Delegates.glRectiv((Int32*)v1_ptr, (Int32*)v2_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectiv")]
        public static
        unsafe void Rect(Int32* v1, Int32* v2)
        {
            Delegates.glRectiv((Int32*)v1, (Int32*)v2);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRects")]
        public static
        void Rects(Int16 x1, Int16 y1, Int16 x2, Int16 y2)
        {
            Delegates.glRects((Int16)x1, (Int16)y1, (Int16)x2, (Int16)y2);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectsv")]
        public static
        void Rect(Int16[] v1, Int16[] v2)
        {
            unsafe
            {
                fixed (Int16* v1_ptr = v1)
                fixed (Int16* v2_ptr = v2)
                {
                    Delegates.glRectsv((Int16*)v1_ptr, (Int16*)v2_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectsv")]
        public static
        void Rect(ref Int16 v1, ref Int16 v2)
        {
            unsafe
            {
                fixed (Int16* v1_ptr = &v1)
                fixed (Int16* v2_ptr = &v2)
                {
                    Delegates.glRectsv((Int16*)v1_ptr, (Int16*)v2_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectsv")]
        public static
        unsafe void Rect(Int16* v1, Int16* v2)
        {
            Delegates.glRectsv((Int16*)v1, (Int16*)v2);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glRenderbufferStorage")]
        public static
        void RenderbufferStorage(int target, int internalformat, Int32 width, Int32 height)
        {
            Delegates.glRenderbufferStorage((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (OpenTK.Graphics.OpenGL.RenderbufferStorage)internalformat, (Int32)width, (Int32)height);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glRenderbufferStorage")]
        public static
        void RenderbufferStorage(OpenTK.Graphics.OpenGL.RenderbufferTarget target, OpenTK.Graphics.OpenGL.RenderbufferStorage internalformat, Int32 width, Int32 height)
        {
            Delegates.glRenderbufferStorage((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (OpenTK.Graphics.OpenGL.RenderbufferStorage)internalformat, (Int32)width, (Int32)height);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glRenderbufferStorageMultisample")]
        public static
        void RenderbufferStorageMultisample(int target, Int32 samples, int internalformat, Int32 width, Int32 height)
        {
            Delegates.glRenderbufferStorageMultisample((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (Int32)samples, (OpenTK.Graphics.OpenGL.RenderbufferStorage)internalformat, (Int32)width, (Int32)height);
        }

        [AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glRenderbufferStorageMultisample")]
        public static
        void RenderbufferStorageMultisample(OpenTK.Graphics.OpenGL.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.OpenGL.RenderbufferStorage internalformat, Int32 width, Int32 height)
        {
            Delegates.glRenderbufferStorageMultisample((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (Int32)samples, (OpenTK.Graphics.OpenGL.RenderbufferStorage)internalformat, (Int32)width, (Int32)height);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRenderMode")]
        public static
        Int32 RenderMode(int mode)
        {
            return Delegates.glRenderMode((OpenTK.Graphics.OpenGL.RenderingMode)mode);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRenderMode")]
        public static
        Int32 RenderMode(OpenTK.Graphics.OpenGL.RenderingMode mode)
        {
            return Delegates.glRenderMode((OpenTK.Graphics.OpenGL.RenderingMode)mode);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glResetHistogram")]
        public static
        void ResetHistogram(OpenTK.Graphics.OpenGL.HistogramTarget target)
        {
            Delegates.glResetHistogram((OpenTK.Graphics.OpenGL.HistogramTarget)target);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glResetHistogram")]
        public static
        void ResetHistogram(int target)
        {
            Delegates.glResetHistogram((OpenTK.Graphics.OpenGL.HistogramTarget)target);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glResetMinmax")]
        public static
        void ResetMinmax(int target)
        {
            Delegates.glResetMinmax((OpenTK.Graphics.OpenGL.MinmaxTarget)target);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glResetMinmax")]
        public static
        void ResetMinmax(OpenTK.Graphics.OpenGL.MinmaxTarget target)
        {
            Delegates.glResetMinmax((OpenTK.Graphics.OpenGL.MinmaxTarget)target);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRotated")]
        public static
        void Rotate(Double angle, Double x, Double y, Double z)
        {
            Delegates.glRotated((Double)angle, (Double)x, (Double)y, (Double)z);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRotatef")]
        public static
        void Rotate(Single angle, Single x, Single y, Single z)
        {
            Delegates.glRotatef((Single)angle, (Single)x, (Single)y, (Single)z);
        }

        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glSampleCoverage")]
        public static
        void SampleCoverage(Single value, bool invert)
        {
            Delegates.glSampleCoverage((Single)value, (bool)invert);
        }

        [AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glSampleMaski")]
        public static
        void SampleMask(Int32 index, Int32 mask)
        {
            Delegates.glSampleMaski((UInt32)index, (UInt32)mask);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glSampleMaski")]
        public static
        void SampleMask(UInt32 index, UInt32 mask)
        {
            Delegates.glSampleMaski((UInt32)index, (UInt32)mask);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glScaled")]
        public static
        void Scale(Double x, Double y, Double z)
        {
            Delegates.glScaled((Double)x, (Double)y, (Double)z);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glScalef")]
        public static
        void Scale(Single x, Single y, Single z)
        {
            Delegates.glScalef((Single)x, (Single)y, (Single)z);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glScissor")]
        public static
        void Scissor(Int32 x, Int32 y, Int32 width, Int32 height)
        {
            Delegates.glScissor((Int32)x, (Int32)y, (Int32)width, (Int32)height);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3b")]
        public static
        void SecondaryColor3(SByte red, SByte green, SByte blue)
        {
            Delegates.glSecondaryColor3b((SByte)red, (SByte)green, (SByte)blue);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3bv")]
        public static
        void SecondaryColor3(SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Delegates.glSecondaryColor3bv((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3bv")]
        public static
        void SecondaryColor3(ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3bv((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3bv")]
        public static
        unsafe void SecondaryColor3(SByte* v)
        {
            Delegates.glSecondaryColor3bv((SByte*)v);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3d")]
        public static
        void SecondaryColor3(Double red, Double green, Double blue)
        {
            Delegates.glSecondaryColor3d((Double)red, (Double)green, (Double)blue);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3dv")]
        public static
        void SecondaryColor3(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glSecondaryColor3dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3dv")]
        public static
        void SecondaryColor3(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3dv")]
        public static
        unsafe void SecondaryColor3(Double* v)
        {
            Delegates.glSecondaryColor3dv((Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3f")]
        public static
        void SecondaryColor3(Single red, Single green, Single blue)
        {
            Delegates.glSecondaryColor3f((Single)red, (Single)green, (Single)blue);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3fv")]
        public static
        void SecondaryColor3(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glSecondaryColor3fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3fv")]
        public static
        void SecondaryColor3(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3fv")]
        public static
        unsafe void SecondaryColor3(Single* v)
        {
            Delegates.glSecondaryColor3fv((Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3i")]
        public static
        void SecondaryColor3(Int32 red, Int32 green, Int32 blue)
        {
            Delegates.glSecondaryColor3i((Int32)red, (Int32)green, (Int32)blue);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3iv")]
        public static
        void SecondaryColor3(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glSecondaryColor3iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3iv")]
        public static
        void SecondaryColor3(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3iv")]
        public static
        unsafe void SecondaryColor3(Int32* v)
        {
            Delegates.glSecondaryColor3iv((Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3s")]
        public static
        void SecondaryColor3(Int16 red, Int16 green, Int16 blue)
        {
            Delegates.glSecondaryColor3s((Int16)red, (Int16)green, (Int16)blue);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3sv")]
        public static
        void SecondaryColor3(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glSecondaryColor3sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3sv")]
        public static
        void SecondaryColor3(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3sv")]
        public static
        unsafe void SecondaryColor3(Int16* v)
        {
            Delegates.glSecondaryColor3sv((Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3ub")]
        public static
        void SecondaryColor3(Byte red, Byte green, Byte blue)
        {
            Delegates.glSecondaryColor3ub((Byte)red, (Byte)green, (Byte)blue);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3ubv")]
        public static
        void SecondaryColor3(Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glSecondaryColor3ubv((Byte*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3ubv")]
        public static
        void SecondaryColor3(ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3ubv((Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3ubv")]
        public static
        unsafe void SecondaryColor3(Byte* v)
        {
            Delegates.glSecondaryColor3ubv((Byte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3ui")]
        public static
        void SecondaryColor3(UInt32 red, UInt32 green, UInt32 blue)
        {
            Delegates.glSecondaryColor3ui((UInt32)red, (UInt32)green, (UInt32)blue);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3uiv")]
        public static
        void SecondaryColor3(UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glSecondaryColor3uiv((UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3uiv")]
        public static
        void SecondaryColor3(ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3uiv((UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3uiv")]
        public static
        unsafe void SecondaryColor3(UInt32* v)
        {
            Delegates.glSecondaryColor3uiv((UInt32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3us")]
        public static
        void SecondaryColor3(UInt16 red, UInt16 green, UInt16 blue)
        {
            Delegates.glSecondaryColor3us((UInt16)red, (UInt16)green, (UInt16)blue);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3usv")]
        public static
        void SecondaryColor3(UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Delegates.glSecondaryColor3usv((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3usv")]
        public static
        void SecondaryColor3(ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3usv((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3usv")]
        public static
        unsafe void SecondaryColor3(UInt16* v)
        {
            Delegates.glSecondaryColor3usv((UInt16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static
        void SecondaryColorPointer(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, IntPtr pointer)
        {
            Delegates.glSecondaryColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static
        void SecondaryColorPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static
        void SecondaryColorPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static
        void SecondaryColorPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static
        void SecondaryColorPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T3)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static
        void SecondaryColorPointer(Int32 size, int type, Int32 stride, IntPtr pointer)
        {
            Delegates.glSecondaryColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static
        void SecondaryColorPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static
        void SecondaryColorPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static
        void SecondaryColorPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static
        void SecondaryColorPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T3)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glSelectBuffer")]
        public static
        void SelectBuffer(Int32 size, [OutAttribute] Int32[] buffer)
        {
            unsafe
            {
                fixed (Int32* buffer_ptr = buffer)
                {
                    Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glSelectBuffer")]
        public static
        void SelectBuffer(Int32 size, [OutAttribute] out Int32 buffer)
        {
            unsafe
            {
                fixed (Int32* buffer_ptr = &buffer)
                {
                    Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
                    buffer = *buffer_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glSelectBuffer")]
        public static
        unsafe void SelectBuffer(Int32 size, [OutAttribute] Int32* buffer)
        {
            Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glSelectBuffer")]
        public static
        void SelectBuffer(Int32 size, [OutAttribute] UInt32[] buffer)
        {
            unsafe
            {
                fixed (UInt32* buffer_ptr = buffer)
                {
                    Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glSelectBuffer")]
        public static
        void SelectBuffer(Int32 size, [OutAttribute] out UInt32 buffer)
        {
            unsafe
            {
                fixed (UInt32* buffer_ptr = &buffer)
                {
                    Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
                    buffer = *buffer_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glSelectBuffer")]
        public static
        unsafe void SelectBuffer(Int32 size, [OutAttribute] UInt32* buffer)
        {
            Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        public static
        void SeparableFilter2D(int target, int internalformat, Int32 width, Int32 height, int format, int type, IntPtr row, IntPtr column)
        {
            Delegates.glSeparableFilter2D((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        public static
        void SeparableFilter2D<T7>(int target, int internalformat, Int32 width, Int32 height, int format, int type, IntPtr row, [InAttribute, OutAttribute] T7[] column)
            where T7 : struct
        {
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
            }
            finally
            {
                column_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        public static
        void SeparableFilter2D<T7>(int target, int internalformat, Int32 width, Int32 height, int format, int type, IntPtr row, [InAttribute, OutAttribute] T7[,] column)
            where T7 : struct
        {
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
            }
            finally
            {
                column_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        public static
        void SeparableFilter2D<T7>(int target, int internalformat, Int32 width, Int32 height, int format, int type, IntPtr row, [InAttribute, OutAttribute] T7[,,] column)
            where T7 : struct
        {
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
            }
            finally
            {
                column_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        public static
        void SeparableFilter2D<T7>(int target, int internalformat, Int32 width, Int32 height, int format, int type, IntPtr row, [InAttribute, OutAttribute] ref T7 column)
            where T7 : struct
        {
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
                column = (T7)column_ptr.Target;
            }
            finally
            {
                column_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        public static
        void SeparableFilter2D<T6,T7>(int target, int internalformat, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T6[] row, [InAttribute, OutAttribute] T7[,,] column)
            where T6 : struct
            where T7 : struct
        {
            GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
            }
            finally
            {
                row_ptr.Free();
                column_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        public static
        void SeparableFilter2D<T6,T7>(int target, int internalformat, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T6[,] row, [InAttribute, OutAttribute] T7[,,] column)
            where T6 : struct
            where T7 : struct
        {
            GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
            }
            finally
            {
                row_ptr.Free();
                column_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        public static
        void SeparableFilter2D<T6,T7>(int target, int internalformat, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T6[,,] row, [InAttribute, OutAttribute] T7[,,] column)
            where T6 : struct
            where T7 : struct
        {
            GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
            }
            finally
            {
                row_ptr.Free();
                column_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        public static
        void SeparableFilter2D<T6,T7>(int target, int internalformat, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] ref T6 row, [InAttribute, OutAttribute] T7[,,] column)
            where T6 : struct
            where T7 : struct
        {
            GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
                row = (T6)row_ptr.Target;
            }
            finally
            {
                row_ptr.Free();
                column_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        public static
        void SeparableFilter2D(OpenTK.Graphics.OpenGL.SeparableTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr row, IntPtr column)
        {
            Delegates.glSeparableFilter2D((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column);
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        public static
        void SeparableFilter2D<T7>(OpenTK.Graphics.OpenGL.SeparableTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr row, [InAttribute, OutAttribute] T7[] column)
            where T7 : struct
        {
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
            }
            finally
            {
                column_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        public static
        void SeparableFilter2D<T7>(OpenTK.Graphics.OpenGL.SeparableTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr row, [InAttribute, OutAttribute] T7[,] column)
            where T7 : struct
        {
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
            }
            finally
            {
                column_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        public static
        void SeparableFilter2D<T7>(OpenTK.Graphics.OpenGL.SeparableTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr row, [InAttribute, OutAttribute] T7[,,] column)
            where T7 : struct
        {
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
            }
            finally
            {
                column_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        public static
        void SeparableFilter2D<T7>(OpenTK.Graphics.OpenGL.SeparableTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr row, [InAttribute, OutAttribute] ref T7 column)
            where T7 : struct
        {
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
                column = (T7)column_ptr.Target;
            }
            finally
            {
                column_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        public static
        void SeparableFilter2D<T6,T7>(OpenTK.Graphics.OpenGL.SeparableTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[] row, [InAttribute, OutAttribute] T7[,,] column)
            where T6 : struct
            where T7 : struct
        {
            GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
            }
            finally
            {
                row_ptr.Free();
                column_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        public static
        void SeparableFilter2D<T6,T7>(OpenTK.Graphics.OpenGL.SeparableTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,] row, [InAttribute, OutAttribute] T7[,,] column)
            where T6 : struct
            where T7 : struct
        {
            GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
            }
            finally
            {
                row_ptr.Free();
                column_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        public static
        void SeparableFilter2D<T6,T7>(OpenTK.Graphics.OpenGL.SeparableTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,,] row, [InAttribute, OutAttribute] T7[,,] column)
            where T6 : struct
            where T7 : struct
        {
            GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
            }
            finally
            {
                row_ptr.Free();
                column_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        public static
        void SeparableFilter2D<T6,T7>(OpenTK.Graphics.OpenGL.SeparableTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T6 row, [InAttribute, OutAttribute] T7[,,] column)
            where T6 : struct
            where T7 : struct
        {
            GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D((OpenTK.Graphics.OpenGL.SeparableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
                row = (T6)row_ptr.Target;
            }
            finally
            {
                row_ptr.Free();
                column_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glShadeModel")]
        public static
        void ShadeModel(int mode)
        {
            Delegates.glShadeModel((OpenTK.Graphics.OpenGL.ShadingModel)mode);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glShadeModel")]
        public static
        void ShadeModel(OpenTK.Graphics.OpenGL.ShadingModel mode)
        {
            Delegates.glShadeModel((OpenTK.Graphics.OpenGL.ShadingModel)mode);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        public static
        void ShaderSource(Int32 shader, Int32 count, String[] @string, ref Int32 length)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Delegates.glShaderSource((UInt32)shader, (Int32)count, (String[])@string, (Int32*)length_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        public static
        unsafe void ShaderSource(Int32 shader, Int32 count, String[] @string, Int32* length)
        {
            Delegates.glShaderSource((UInt32)shader, (Int32)count, (String[])@string, (Int32*)length);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        public static
        void ShaderSource(UInt32 shader, Int32 count, String[] @string, ref Int32 length)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Delegates.glShaderSource((UInt32)shader, (Int32)count, (String[])@string, (Int32*)length_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        public static
        unsafe void ShaderSource(UInt32 shader, Int32 count, String[] @string, Int32* length)
        {
            Delegates.glShaderSource((UInt32)shader, (Int32)count, (String[])@string, (Int32*)length);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilFunc")]
        public static
        void StencilFunc(int func, Int32 @ref, Int32 mask)
        {
            Delegates.glStencilFunc((OpenTK.Graphics.OpenGL.StencilFunction)func, (Int32)@ref, (UInt32)mask);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilFunc")]
        public static
        void StencilFunc(int func, Int32 @ref, UInt32 mask)
        {
            Delegates.glStencilFunc((OpenTK.Graphics.OpenGL.StencilFunction)func, (Int32)@ref, (UInt32)mask);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilFunc")]
        public static
        void StencilFunc(OpenTK.Graphics.OpenGL.StencilFunction func, Int32 @ref, Int32 mask)
        {
            Delegates.glStencilFunc((OpenTK.Graphics.OpenGL.StencilFunction)func, (Int32)@ref, (UInt32)mask);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilFunc")]
        public static
        void StencilFunc(OpenTK.Graphics.OpenGL.StencilFunction func, Int32 @ref, UInt32 mask)
        {
            Delegates.glStencilFunc((OpenTK.Graphics.OpenGL.StencilFunction)func, (Int32)@ref, (UInt32)mask);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        public static
        void StencilFuncSeparate(int face, int func, Int32 @ref, Int32 mask)
        {
            Delegates.glStencilFuncSeparate((OpenTK.Graphics.OpenGL.StencilFace)face, (OpenTK.Graphics.OpenGL.StencilFunction)func, (Int32)@ref, (UInt32)mask);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        public static
        void StencilFuncSeparate(int face, int func, Int32 @ref, UInt32 mask)
        {
            Delegates.glStencilFuncSeparate((OpenTK.Graphics.OpenGL.StencilFace)face, (OpenTK.Graphics.OpenGL.StencilFunction)func, (Int32)@ref, (UInt32)mask);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        public static
        void StencilFuncSeparate(OpenTK.Graphics.OpenGL.StencilFace face, OpenTK.Graphics.OpenGL.StencilFunction func, Int32 @ref, Int32 mask)
        {
            Delegates.glStencilFuncSeparate((OpenTK.Graphics.OpenGL.StencilFace)face, (OpenTK.Graphics.OpenGL.StencilFunction)func, (Int32)@ref, (UInt32)mask);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        public static
        void StencilFuncSeparate(OpenTK.Graphics.OpenGL.StencilFace face, OpenTK.Graphics.OpenGL.StencilFunction func, Int32 @ref, UInt32 mask)
        {
            Delegates.glStencilFuncSeparate((OpenTK.Graphics.OpenGL.StencilFace)face, (OpenTK.Graphics.OpenGL.StencilFunction)func, (Int32)@ref, (UInt32)mask);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilMask")]
        public static
        void StencilMask(Int32 mask)
        {
            Delegates.glStencilMask((UInt32)mask);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilMask")]
        public static
        void StencilMask(UInt32 mask)
        {
            Delegates.glStencilMask((UInt32)mask);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        public static
        void StencilMaskSeparate(int face, Int32 mask)
        {
            Delegates.glStencilMaskSeparate((OpenTK.Graphics.OpenGL.StencilFace)face, (UInt32)mask);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        public static
        void StencilMaskSeparate(int face, UInt32 mask)
        {
            Delegates.glStencilMaskSeparate((OpenTK.Graphics.OpenGL.StencilFace)face, (UInt32)mask);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        public static
        void StencilMaskSeparate(OpenTK.Graphics.OpenGL.StencilFace face, Int32 mask)
        {
            Delegates.glStencilMaskSeparate((OpenTK.Graphics.OpenGL.StencilFace)face, (UInt32)mask);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        public static
        void StencilMaskSeparate(OpenTK.Graphics.OpenGL.StencilFace face, UInt32 mask)
        {
            Delegates.glStencilMaskSeparate((OpenTK.Graphics.OpenGL.StencilFace)face, (UInt32)mask);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilOp")]
        public static
        void StencilOp(int fail, int zfail, int zpass)
        {
            Delegates.glStencilOp((OpenTK.Graphics.OpenGL.StencilOp)fail, (OpenTK.Graphics.OpenGL.StencilOp)zfail, (OpenTK.Graphics.OpenGL.StencilOp)zpass);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilOp")]
        public static
        void StencilOp(OpenTK.Graphics.OpenGL.StencilOp fail, OpenTK.Graphics.OpenGL.StencilOp zfail, OpenTK.Graphics.OpenGL.StencilOp zpass)
        {
            Delegates.glStencilOp((OpenTK.Graphics.OpenGL.StencilOp)fail, (OpenTK.Graphics.OpenGL.StencilOp)zfail, (OpenTK.Graphics.OpenGL.StencilOp)zpass);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilOpSeparate")]
        public static
        void StencilOpSeparate(int face, int sfail, int dpfail, int dppass)
        {
            Delegates.glStencilOpSeparate((OpenTK.Graphics.OpenGL.StencilFace)face, (OpenTK.Graphics.OpenGL.StencilOp)sfail, (OpenTK.Graphics.OpenGL.StencilOp)dpfail, (OpenTK.Graphics.OpenGL.StencilOp)dppass);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilOpSeparate")]
        public static
        void StencilOpSeparate(OpenTK.Graphics.OpenGL.StencilFace face, OpenTK.Graphics.OpenGL.StencilOp sfail, OpenTK.Graphics.OpenGL.StencilOp dpfail, OpenTK.Graphics.OpenGL.StencilOp dppass)
        {
            Delegates.glStencilOpSeparate((OpenTK.Graphics.OpenGL.StencilFace)face, (OpenTK.Graphics.OpenGL.StencilOp)sfail, (OpenTK.Graphics.OpenGL.StencilOp)dpfail, (OpenTK.Graphics.OpenGL.StencilOp)dppass);
        }

        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glTexBuffer")]
        public static
        void TexBuffer(int target, int internalformat, Int32 buffer)
        {
            Delegates.glTexBuffer((OpenTK.Graphics.OpenGL.TextureBufferTarget)target, (OpenTK.Graphics.OpenGL.SizedInternalFormat)internalformat, (UInt32)buffer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glTexBuffer")]
        public static
        void TexBuffer(int target, int internalformat, UInt32 buffer)
        {
            Delegates.glTexBuffer((OpenTK.Graphics.OpenGL.TextureBufferTarget)target, (OpenTK.Graphics.OpenGL.SizedInternalFormat)internalformat, (UInt32)buffer);
        }

        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glTexBuffer")]
        public static
        void TexBuffer(OpenTK.Graphics.OpenGL.TextureBufferTarget target, OpenTK.Graphics.OpenGL.SizedInternalFormat internalformat, Int32 buffer)
        {
            Delegates.glTexBuffer((OpenTK.Graphics.OpenGL.TextureBufferTarget)target, (OpenTK.Graphics.OpenGL.SizedInternalFormat)internalformat, (UInt32)buffer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glTexBuffer")]
        public static
        void TexBuffer(OpenTK.Graphics.OpenGL.TextureBufferTarget target, OpenTK.Graphics.OpenGL.SizedInternalFormat internalformat, UInt32 buffer)
        {
            Delegates.glTexBuffer((OpenTK.Graphics.OpenGL.TextureBufferTarget)target, (OpenTK.Graphics.OpenGL.SizedInternalFormat)internalformat, (UInt32)buffer);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord1d")]
        public static
        void TexCoord1(Double s)
        {
            Delegates.glTexCoord1d((Double)s);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord1dv")]
        public static
        unsafe void TexCoord1(Double* v)
        {
            Delegates.glTexCoord1dv((Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord1f")]
        public static
        void TexCoord1(Single s)
        {
            Delegates.glTexCoord1f((Single)s);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord1fv")]
        public static
        unsafe void TexCoord1(Single* v)
        {
            Delegates.glTexCoord1fv((Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord1i")]
        public static
        void TexCoord1(Int32 s)
        {
            Delegates.glTexCoord1i((Int32)s);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord1iv")]
        public static
        unsafe void TexCoord1(Int32* v)
        {
            Delegates.glTexCoord1iv((Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord1s")]
        public static
        void TexCoord1(Int16 s)
        {
            Delegates.glTexCoord1s((Int16)s);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord1sv")]
        public static
        unsafe void TexCoord1(Int16* v)
        {
            Delegates.glTexCoord1sv((Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2d")]
        public static
        void TexCoord2(Double s, Double t)
        {
            Delegates.glTexCoord2d((Double)s, (Double)t);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2dv")]
        public static
        void TexCoord2(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glTexCoord2dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2dv")]
        public static
        void TexCoord2(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glTexCoord2dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2dv")]
        public static
        unsafe void TexCoord2(Double* v)
        {
            Delegates.glTexCoord2dv((Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2f")]
        public static
        void TexCoord2(Single s, Single t)
        {
            Delegates.glTexCoord2f((Single)s, (Single)t);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2fv")]
        public static
        void TexCoord2(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glTexCoord2fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2fv")]
        public static
        void TexCoord2(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glTexCoord2fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2fv")]
        public static
        unsafe void TexCoord2(Single* v)
        {
            Delegates.glTexCoord2fv((Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2i")]
        public static
        void TexCoord2(Int32 s, Int32 t)
        {
            Delegates.glTexCoord2i((Int32)s, (Int32)t);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2iv")]
        public static
        void TexCoord2(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glTexCoord2iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2iv")]
        public static
        void TexCoord2(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glTexCoord2iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2iv")]
        public static
        unsafe void TexCoord2(Int32* v)
        {
            Delegates.glTexCoord2iv((Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2s")]
        public static
        void TexCoord2(Int16 s, Int16 t)
        {
            Delegates.glTexCoord2s((Int16)s, (Int16)t);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2sv")]
        public static
        void TexCoord2(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glTexCoord2sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2sv")]
        public static
        void TexCoord2(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glTexCoord2sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2sv")]
        public static
        unsafe void TexCoord2(Int16* v)
        {
            Delegates.glTexCoord2sv((Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3d")]
        public static
        void TexCoord3(Double s, Double t, Double r)
        {
            Delegates.glTexCoord3d((Double)s, (Double)t, (Double)r);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3dv")]
        public static
        void TexCoord3(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glTexCoord3dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3dv")]
        public static
        void TexCoord3(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glTexCoord3dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3dv")]
        public static
        unsafe void TexCoord3(Double* v)
        {
            Delegates.glTexCoord3dv((Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3f")]
        public static
        void TexCoord3(Single s, Single t, Single r)
        {
            Delegates.glTexCoord3f((Single)s, (Single)t, (Single)r);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3fv")]
        public static
        void TexCoord3(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glTexCoord3fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3fv")]
        public static
        void TexCoord3(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glTexCoord3fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3fv")]
        public static
        unsafe void TexCoord3(Single* v)
        {
            Delegates.glTexCoord3fv((Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3i")]
        public static
        void TexCoord3(Int32 s, Int32 t, Int32 r)
        {
            Delegates.glTexCoord3i((Int32)s, (Int32)t, (Int32)r);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3iv")]
        public static
        void TexCoord3(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glTexCoord3iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3iv")]
        public static
        void TexCoord3(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glTexCoord3iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3iv")]
        public static
        unsafe void TexCoord3(Int32* v)
        {
            Delegates.glTexCoord3iv((Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3s")]
        public static
        void TexCoord3(Int16 s, Int16 t, Int16 r)
        {
            Delegates.glTexCoord3s((Int16)s, (Int16)t, (Int16)r);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3sv")]
        public static
        void TexCoord3(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glTexCoord3sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3sv")]
        public static
        void TexCoord3(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glTexCoord3sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3sv")]
        public static
        unsafe void TexCoord3(Int16* v)
        {
            Delegates.glTexCoord3sv((Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4d")]
        public static
        void TexCoord4(Double s, Double t, Double r, Double q)
        {
            Delegates.glTexCoord4d((Double)s, (Double)t, (Double)r, (Double)q);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4dv")]
        public static
        void TexCoord4(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glTexCoord4dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4dv")]
        public static
        void TexCoord4(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glTexCoord4dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4dv")]
        public static
        unsafe void TexCoord4(Double* v)
        {
            Delegates.glTexCoord4dv((Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4f")]
        public static
        void TexCoord4(Single s, Single t, Single r, Single q)
        {
            Delegates.glTexCoord4f((Single)s, (Single)t, (Single)r, (Single)q);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4fv")]
        public static
        void TexCoord4(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glTexCoord4fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4fv")]
        public static
        void TexCoord4(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glTexCoord4fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4fv")]
        public static
        unsafe void TexCoord4(Single* v)
        {
            Delegates.glTexCoord4fv((Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4i")]
        public static
        void TexCoord4(Int32 s, Int32 t, Int32 r, Int32 q)
        {
            Delegates.glTexCoord4i((Int32)s, (Int32)t, (Int32)r, (Int32)q);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4iv")]
        public static
        void TexCoord4(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glTexCoord4iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4iv")]
        public static
        void TexCoord4(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glTexCoord4iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4iv")]
        public static
        unsafe void TexCoord4(Int32* v)
        {
            Delegates.glTexCoord4iv((Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4s")]
        public static
        void TexCoord4(Int16 s, Int16 t, Int16 r, Int16 q)
        {
            Delegates.glTexCoord4s((Int16)s, (Int16)t, (Int16)r, (Int16)q);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4sv")]
        public static
        void TexCoord4(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glTexCoord4sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4sv")]
        public static
        void TexCoord4(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glTexCoord4sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4sv")]
        public static
        unsafe void TexCoord4(Int16* v)
        {
            Delegates.glTexCoord4sv((Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glTexCoordPointer")]
        public static
        void TexCoordPointer(Int32 size, int type, Int32 stride, IntPtr pointer)
        {
            Delegates.glTexCoordPointer((Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glTexCoordPointer")]
        public static
        void TexCoordPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoordPointer((Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glTexCoordPointer")]
        public static
        void TexCoordPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoordPointer((Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glTexCoordPointer")]
        public static
        void TexCoordPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoordPointer((Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glTexCoordPointer")]
        public static
        void TexCoordPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoordPointer((Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T3)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glTexCoordPointer")]
        public static
        void TexCoordPointer(Int32 size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, Int32 stride, IntPtr pointer)
        {
            Delegates.glTexCoordPointer((Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glTexCoordPointer")]
        public static
        void TexCoordPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoordPointer((Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glTexCoordPointer")]
        public static
        void TexCoordPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoordPointer((Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glTexCoordPointer")]
        public static
        void TexCoordPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoordPointer((Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glTexCoordPointer")]
        public static
        void TexCoordPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoordPointer((Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T3)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexEnvf")]
        public static
        void TexEnv(int target, int pname, Single param)
        {
            Delegates.glTexEnvf((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexEnvf")]
        public static
        void TexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, Single param)
        {
            Delegates.glTexEnvf((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexEnvfv")]
        public static
        void TexEnv(int target, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glTexEnvfv((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexEnvfv")]
        public static
        unsafe void TexEnv(int target, int pname, Single* @params)
        {
            Delegates.glTexEnvfv((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexEnvfv")]
        public static
        void TexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glTexEnvfv((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexEnvfv")]
        public static
        unsafe void TexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, Single* @params)
        {
            Delegates.glTexEnvfv((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexEnvi")]
        public static
        void TexEnv(int target, int pname, Int32 param)
        {
            Delegates.glTexEnvi((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexEnvi")]
        public static
        void TexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, Int32 param)
        {
            Delegates.glTexEnvi((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexEnviv")]
        public static
        void TexEnv(int target, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glTexEnviv((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexEnviv")]
        public static
        unsafe void TexEnv(int target, int pname, Int32* @params)
        {
            Delegates.glTexEnviv((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexEnviv")]
        public static
        void TexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glTexEnviv((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexEnviv")]
        public static
        unsafe void TexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, Int32* @params)
        {
            Delegates.glTexEnviv((OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGend")]
        public static
        void TexGend(int coord, int pname, Double param)
        {
            Delegates.glTexGend((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGend")]
        public static
        void TexGend(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, Double param)
        {
            Delegates.glTexGend((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGendv")]
        public static
        void TexGen(int coord, int pname, Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Delegates.glTexGendv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGendv")]
        public static
        void TexGen(int coord, int pname, ref Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Delegates.glTexGendv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGendv")]
        public static
        unsafe void TexGen(int coord, int pname, Double* @params)
        {
            Delegates.glTexGendv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGendv")]
        public static
        void TexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Delegates.glTexGendv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGendv")]
        public static
        void TexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, ref Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Delegates.glTexGendv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGendv")]
        public static
        unsafe void TexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, Double* @params)
        {
            Delegates.glTexGendv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGenf")]
        public static
        void TexGen(int coord, int pname, Single param)
        {
            Delegates.glTexGenf((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGenf")]
        public static
        void TexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, Single param)
        {
            Delegates.glTexGenf((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGenfv")]
        public static
        void TexGen(int coord, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glTexGenfv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGenfv")]
        public static
        unsafe void TexGen(int coord, int pname, Single* @params)
        {
            Delegates.glTexGenfv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGenfv")]
        public static
        void TexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glTexGenfv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGenfv")]
        public static
        unsafe void TexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, Single* @params)
        {
            Delegates.glTexGenfv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGeni")]
        public static
        void TexGen(int coord, int pname, Int32 param)
        {
            Delegates.glTexGeni((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGeni")]
        public static
        void TexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, Int32 param)
        {
            Delegates.glTexGeni((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGeniv")]
        public static
        void TexGen(int coord, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glTexGeniv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGeniv")]
        public static
        unsafe void TexGen(int coord, int pname, Int32* @params)
        {
            Delegates.glTexGeniv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGeniv")]
        public static
        void TexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glTexGeniv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGeniv")]
        public static
        unsafe void TexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, Int32* @params)
        {
            Delegates.glTexGeniv((OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static
        void TexImage1D(int target, Int32 level, int internalformat, Int32 width, Int32 border, int format, int type, IntPtr pixels)
        {
            Delegates.glTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static
        void TexImage1D<T7>(int target, Int32 level, int internalformat, Int32 width, Int32 border, int format, int type, [InAttribute, OutAttribute] T7[] pixels)
            where T7 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static
        void TexImage1D<T7>(int target, Int32 level, int internalformat, Int32 width, Int32 border, int format, int type, [InAttribute, OutAttribute] T7[,] pixels)
            where T7 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static
        void TexImage1D<T7>(int target, Int32 level, int internalformat, Int32 width, Int32 border, int format, int type, [InAttribute, OutAttribute] T7[,,] pixels)
            where T7 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static
        void TexImage1D<T7>(int target, Int32 level, int internalformat, Int32 width, Int32 border, int format, int type, [InAttribute, OutAttribute] ref T7 pixels)
            where T7 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T7)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static
        void TexImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
        {
            Delegates.glTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static
        void TexImage1D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T7[] pixels)
            where T7 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static
        void TexImage1D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T7[,] pixels)
            where T7 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static
        void TexImage1D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T7[,,] pixels)
            where T7 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static
        void TexImage1D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T7 pixels)
            where T7 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T7)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static
        void TexImage2D(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, int format, int type, IntPtr pixels)
        {
            Delegates.glTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static
        void TexImage2D<T8>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, int format, int type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static
        void TexImage2D<T8>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, int format, int type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static
        void TexImage2D<T8>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, int format, int type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static
        void TexImage2D<T8>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, int format, int type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T8)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static
        void TexImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
        {
            Delegates.glTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static
        void TexImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static
        void TexImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static
        void TexImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static
        void TexImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T8)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glTexImage2DMultisample")]
        public static
        void TexImage2DMultisample(int target, Int32 samples, int internalformat, Int32 width, Int32 height, bool fixedsamplelocations)
        {
            Delegates.glTexImage2DMultisample((OpenTK.Graphics.OpenGL.TextureTargetMultisample)target, (Int32)samples, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (bool)fixedsamplelocations);
        }

        [AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glTexImage2DMultisample")]
        public static
        void TexImage2DMultisample(OpenTK.Graphics.OpenGL.TextureTargetMultisample target, Int32 samples, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, bool fixedsamplelocations)
        {
            Delegates.glTexImage2DMultisample((OpenTK.Graphics.OpenGL.TextureTargetMultisample)target, (Int32)samples, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (bool)fixedsamplelocations);
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static
        void TexImage3D(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, IntPtr pixels)
        {
            Delegates.glTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static
        void TexImage3D<T9>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, [InAttribute, OutAttribute] T9[] pixels)
            where T9 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static
        void TexImage3D<T9>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, [InAttribute, OutAttribute] T9[,] pixels)
            where T9 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static
        void TexImage3D<T9>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, [InAttribute, OutAttribute] T9[,,] pixels)
            where T9 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static
        void TexImage3D<T9>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, [InAttribute, OutAttribute] ref T9 pixels)
            where T9 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T9)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static
        void TexImage3D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
        {
            Delegates.glTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static
        void TexImage3D<T9>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[] pixels)
            where T9 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static
        void TexImage3D<T9>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[,] pixels)
            where T9 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static
        void TexImage3D<T9>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[,,] pixels)
            where T9 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static
        void TexImage3D<T9>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T9 pixels)
            where T9 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T9)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glTexImage3DMultisample")]
        public static
        void TexImage3DMultisample(int target, Int32 samples, int internalformat, Int32 width, Int32 height, Int32 depth, bool fixedsamplelocations)
        {
            Delegates.glTexImage3DMultisample((OpenTK.Graphics.OpenGL.TextureTargetMultisample)target, (Int32)samples, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (bool)fixedsamplelocations);
        }

        [AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glTexImage3DMultisample")]
        public static
        void TexImage3DMultisample(OpenTK.Graphics.OpenGL.TextureTargetMultisample target, Int32 samples, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, bool fixedsamplelocations)
        {
            Delegates.glTexImage3DMultisample((OpenTK.Graphics.OpenGL.TextureTargetMultisample)target, (Int32)samples, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (bool)fixedsamplelocations);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterf")]
        public static
        void TexParameter(int target, int pname, Single param)
        {
            Delegates.glTexParameterf((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single)param);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterf")]
        public static
        void TexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Single param)
        {
            Delegates.glTexParameterf((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single)param);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
        public static
        void TexParameter(int target, int pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glTexParameterfv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
        public static
        unsafe void TexParameter(int target, int pname, Single* @params)
        {
            Delegates.glTexParameterfv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
        public static
        void TexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glTexParameterfv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
        public static
        unsafe void TexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Single* @params)
        {
            Delegates.glTexParameterfv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteri")]
        public static
        void TexParameter(int target, int pname, Int32 param)
        {
            Delegates.glTexParameteri((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32)param);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteri")]
        public static
        void TexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32 param)
        {
            Delegates.glTexParameteri((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32)param);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        public static
        void TexParameterI(int target, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glTexParameterIiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        public static
        void TexParameterI(int target, int pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glTexParameterIiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        public static
        unsafe void TexParameterI(int target, int pname, Int32* @params)
        {
            Delegates.glTexParameterIiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        public static
        void TexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glTexParameterIiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        public static
        void TexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glTexParameterIiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        public static
        unsafe void TexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32* @params)
        {
            Delegates.glTexParameterIiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        public static
        void TexParameterI(int target, int pname, UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Delegates.glTexParameterIuiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        public static
        void TexParameterI(int target, int pname, ref UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Delegates.glTexParameterIuiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        public static
        unsafe void TexParameterI(int target, int pname, UInt32* @params)
        {
            Delegates.glTexParameterIuiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        public static
        void TexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Delegates.glTexParameterIuiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        public static
        void TexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, ref UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Delegates.glTexParameterIuiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        public static
        unsafe void TexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, UInt32* @params)
        {
            Delegates.glTexParameterIuiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
        public static
        void TexParameter(int target, int pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glTexParameteriv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
        public static
        unsafe void TexParameter(int target, int pname, Int32* @params)
        {
            Delegates.glTexParameteriv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
        public static
        void TexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glTexParameteriv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
        public static
        unsafe void TexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32* @params)
        {
            Delegates.glTexParameteriv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static
        void TexSubImage1D(int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, IntPtr pixels)
        {
            Delegates.glTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static
        void TexSubImage1D<T6>(int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, [InAttribute, OutAttribute] T6[] pixels)
            where T6 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static
        void TexSubImage1D<T6>(int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, [InAttribute, OutAttribute] T6[,] pixels)
            where T6 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static
        void TexSubImage1D<T6>(int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, [InAttribute, OutAttribute] T6[,,] pixels)
            where T6 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static
        void TexSubImage1D<T6>(int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, [InAttribute, OutAttribute] ref T6 pixels)
            where T6 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T6)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static
        void TexSubImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
        {
            Delegates.glTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static
        void TexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[] pixels)
            where T6 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static
        void TexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,] pixels)
            where T6 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static
        void TexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,,] pixels)
            where T6 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static
        void TexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T6 pixels)
            where T6 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T6)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static
        void TexSubImage2D(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, IntPtr pixels)
        {
            Delegates.glTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static
        void TexSubImage2D<T8>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static
        void TexSubImage2D<T8>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static
        void TexSubImage2D<T8>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static
        void TexSubImage2D<T8>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T8)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static
        void TexSubImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
        {
            Delegates.glTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static
        void TexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static
        void TexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static
        void TexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static
        void TexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T8)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static
        void TexSubImage3D(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, IntPtr pixels)
        {
            Delegates.glTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static
        void TexSubImage3D<T10>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, [InAttribute, OutAttribute] T10[] pixels)
            where T10 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static
        void TexSubImage3D<T10>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, [InAttribute, OutAttribute] T10[,] pixels)
            where T10 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static
        void TexSubImage3D<T10>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, [InAttribute, OutAttribute] T10[,,] pixels)
            where T10 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static
        void TexSubImage3D<T10>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, [InAttribute, OutAttribute] ref T10 pixels)
            where T10 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T10)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static
        void TexSubImage3D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
        {
            Delegates.glTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static
        void TexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T10[] pixels)
            where T10 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static
        void TexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T10[,] pixels)
            where T10 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static
        void TexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T10[,,] pixels)
            where T10 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static
        void TexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T10 pixels)
            where T10 : struct
        {
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T10)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        public static
        void TransformFeedbackVaryings(Int32 program, Int32 count, String[] varyings, int bufferMode)
        {
            Delegates.glTransformFeedbackVaryings((UInt32)program, (Int32)count, (String[])varyings, (OpenTK.Graphics.OpenGL.TransformFeedbackMode)bufferMode);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        public static
        void TransformFeedbackVaryings(Int32 program, Int32 count, String[] varyings, OpenTK.Graphics.OpenGL.TransformFeedbackMode bufferMode)
        {
            Delegates.glTransformFeedbackVaryings((UInt32)program, (Int32)count, (String[])varyings, (OpenTK.Graphics.OpenGL.TransformFeedbackMode)bufferMode);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        public static
        void TransformFeedbackVaryings(UInt32 program, Int32 count, String[] varyings, int bufferMode)
        {
            Delegates.glTransformFeedbackVaryings((UInt32)program, (Int32)count, (String[])varyings, (OpenTK.Graphics.OpenGL.TransformFeedbackMode)bufferMode);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        public static
        void TransformFeedbackVaryings(UInt32 program, Int32 count, String[] varyings, OpenTK.Graphics.OpenGL.TransformFeedbackMode bufferMode)
        {
            Delegates.glTransformFeedbackVaryings((UInt32)program, (Int32)count, (String[])varyings, (OpenTK.Graphics.OpenGL.TransformFeedbackMode)bufferMode);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTranslated")]
        public static
        void Translate(Double x, Double y, Double z)
        {
            Delegates.glTranslated((Double)x, (Double)y, (Double)z);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTranslatef")]
        public static
        void Translate(Single x, Single y, Single z)
        {
            Delegates.glTranslatef((Single)x, (Single)y, (Single)z);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1f")]
        public static
        void Uniform1(Int32 location, Single v0)
        {
            Delegates.glUniform1f((Int32)location, (Single)v0);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        public static
        void Uniform1(Int32 location, Int32 count, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        public static
        void Uniform1(Int32 location, Int32 count, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        public static
        unsafe void Uniform1(Int32 location, Int32 count, Single* value)
        {
            Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)value);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1i")]
        public static
        void Uniform1(Int32 location, Int32 v0)
        {
            Delegates.glUniform1i((Int32)location, (Int32)v0);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        public static
        void Uniform1(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        public static
        void Uniform1(Int32 location, Int32 count, ref Int32 value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        public static
        unsafe void Uniform1(Int32 location, Int32 count, Int32* value)
        {
            Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)value);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1ui")]
        public static
        void Uniform1(Int32 location, UInt32 v0)
        {
            Delegates.glUniform1ui((Int32)location, (UInt32)v0);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
        public static
        void Uniform1(Int32 location, Int32 count, UInt32[] value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = value)
                {
                    Delegates.glUniform1uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
        public static
        void Uniform1(Int32 location, Int32 count, ref UInt32 value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = &value)
                {
                    Delegates.glUniform1uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
        public static
        unsafe void Uniform1(Int32 location, Int32 count, UInt32* value)
        {
            Delegates.glUniform1uiv((Int32)location, (Int32)count, (UInt32*)value);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2f")]
        public static
        void Uniform2(Int32 location, Single v0, Single v1)
        {
            Delegates.glUniform2f((Int32)location, (Single)v0, (Single)v1);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        public static
        void Uniform2(Int32 location, Int32 count, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        public static
        void Uniform2(Int32 location, Int32 count, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        public static
        unsafe void Uniform2(Int32 location, Int32 count, Single* value)
        {
            Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)value);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2i")]
        public static
        void Uniform2(Int32 location, Int32 v0, Int32 v1)
        {
            Delegates.glUniform2i((Int32)location, (Int32)v0, (Int32)v1);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2iv")]
        public static
        void Uniform2(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Delegates.glUniform2iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2iv")]
        public static
        unsafe void Uniform2(Int32 location, Int32 count, Int32* value)
        {
            Delegates.glUniform2iv((Int32)location, (Int32)count, (Int32*)value);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2ui")]
        public static
        void Uniform2(Int32 location, UInt32 v0, UInt32 v1)
        {
            Delegates.glUniform2ui((Int32)location, (UInt32)v0, (UInt32)v1);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
        public static
        void Uniform2(Int32 location, Int32 count, UInt32[] value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = value)
                {
                    Delegates.glUniform2uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
        public static
        void Uniform2(Int32 location, Int32 count, ref UInt32 value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = &value)
                {
                    Delegates.glUniform2uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
        public static
        unsafe void Uniform2(Int32 location, Int32 count, UInt32* value)
        {
            Delegates.glUniform2uiv((Int32)location, (Int32)count, (UInt32*)value);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3f")]
        public static
        void Uniform3(Int32 location, Single v0, Single v1, Single v2)
        {
            Delegates.glUniform3f((Int32)location, (Single)v0, (Single)v1, (Single)v2);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        public static
        void Uniform3(Int32 location, Int32 count, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        public static
        void Uniform3(Int32 location, Int32 count, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        public static
        unsafe void Uniform3(Int32 location, Int32 count, Single* value)
        {
            Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)value);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3i")]
        public static
        void Uniform3(Int32 location, Int32 v0, Int32 v1, Int32 v2)
        {
            Delegates.glUniform3i((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        public static
        void Uniform3(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        public static
        void Uniform3(Int32 location, Int32 count, ref Int32 value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        public static
        unsafe void Uniform3(Int32 location, Int32 count, Int32* value)
        {
            Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)value);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3ui")]
        public static
        void Uniform3(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2)
        {
            Delegates.glUniform3ui((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
        public static
        void Uniform3(Int32 location, Int32 count, UInt32[] value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = value)
                {
                    Delegates.glUniform3uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
        public static
        void Uniform3(Int32 location, Int32 count, ref UInt32 value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = &value)
                {
                    Delegates.glUniform3uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
        public static
        unsafe void Uniform3(Int32 location, Int32 count, UInt32* value)
        {
            Delegates.glUniform3uiv((Int32)location, (Int32)count, (UInt32*)value);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4f")]
        public static
        void Uniform4(Int32 location, Single v0, Single v1, Single v2, Single v3)
        {
            Delegates.glUniform4f((Int32)location, (Single)v0, (Single)v1, (Single)v2, (Single)v3);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        public static
        void Uniform4(Int32 location, Int32 count, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        public static
        void Uniform4(Int32 location, Int32 count, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        public static
        unsafe void Uniform4(Int32 location, Int32 count, Single* value)
        {
            Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)value);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4i")]
        public static
        void Uniform4(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
        {
            Delegates.glUniform4i((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2, (Int32)v3);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        public static
        void Uniform4(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        public static
        void Uniform4(Int32 location, Int32 count, ref Int32 value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        public static
        unsafe void Uniform4(Int32 location, Int32 count, Int32* value)
        {
            Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)value);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4ui")]
        public static
        void Uniform4(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3)
        {
            Delegates.glUniform4ui((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2, (UInt32)v3);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
        public static
        void Uniform4(Int32 location, Int32 count, UInt32[] value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = value)
                {
                    Delegates.glUniform4uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
        public static
        void Uniform4(Int32 location, Int32 count, ref UInt32 value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = &value)
                {
                    Delegates.glUniform4uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
        public static
        unsafe void Uniform4(Int32 location, Int32 count, UInt32* value)
        {
            Delegates.glUniform4uiv((Int32)location, (Int32)count, (UInt32*)value);
        }

        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glUniformBlockBinding")]
        public static
        void UniformBlockBinding(Int32 program, Int32 uniformBlockIndex, Int32 uniformBlockBinding)
        {
            Delegates.glUniformBlockBinding((UInt32)program, (UInt32)uniformBlockIndex, (UInt32)uniformBlockBinding);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glUniformBlockBinding")]
        public static
        void UniformBlockBinding(UInt32 program, UInt32 uniformBlockIndex, UInt32 uniformBlockBinding)
        {
            Delegates.glUniformBlockBinding((UInt32)program, (UInt32)uniformBlockIndex, (UInt32)uniformBlockBinding);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        public static
        void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        public static
        void UniformMatrix2(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        public static
        unsafe void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single* value)
        {
            Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
        }

        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x3fv")]
        public static
        void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix2x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x3fv")]
        public static
        void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix2x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x3fv")]
        public static
        unsafe void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Single* value)
        {
            Delegates.glUniformMatrix2x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
        }

        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x4fv")]
        public static
        void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix2x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x4fv")]
        public static
        void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix2x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x4fv")]
        public static
        unsafe void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Single* value)
        {
            Delegates.glUniformMatrix2x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        public static
        void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        public static
        void UniformMatrix3(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        public static
        unsafe void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single* value)
        {
            Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
        }

        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x2fv")]
        public static
        void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix3x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x2fv")]
        public static
        void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix3x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x2fv")]
        public static
        unsafe void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Single* value)
        {
            Delegates.glUniformMatrix3x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
        }

        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x4fv")]
        public static
        void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix3x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x4fv")]
        public static
        void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix3x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x4fv")]
        public static
        unsafe void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Single* value)
        {
            Delegates.glUniformMatrix3x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        public static
        void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        public static
        void UniformMatrix4(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        public static
        unsafe void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single* value)
        {
            Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
        }

        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x2fv")]
        public static
        void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix4x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x2fv")]
        public static
        void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix4x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x2fv")]
        public static
        unsafe void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Single* value)
        {
            Delegates.glUniformMatrix4x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
        }

        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x3fv")]
        public static
        void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix4x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x3fv")]
        public static
        void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix4x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x3fv")]
        public static
        unsafe void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Single* value)
        {
            Delegates.glUniformMatrix4x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glUnmapBuffer")]
        public static
        bool UnmapBuffer(OpenTK.Graphics.OpenGL.BufferTarget target)
        {
            return Delegates.glUnmapBuffer((OpenTK.Graphics.OpenGL.BufferTarget)target);
        }

        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glUnmapBuffer")]
        public static
        bool UnmapBuffer(int target)
        {
            return Delegates.glUnmapBuffer((OpenTK.Graphics.OpenGL.BufferTarget)target);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUseProgram")]
        public static
        void UseProgram(Int32 program)
        {
            Delegates.glUseProgram((UInt32)program);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUseProgram")]
        public static
        void UseProgram(UInt32 program)
        {
            Delegates.glUseProgram((UInt32)program);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glValidateProgram")]
        public static
        void ValidateProgram(Int32 program)
        {
            Delegates.glValidateProgram((UInt32)program);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glValidateProgram")]
        public static
        void ValidateProgram(UInt32 program)
        {
            Delegates.glValidateProgram((UInt32)program);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2d")]
        public static
        void Vertex2(Double x, Double y)
        {
            Delegates.glVertex2d((Double)x, (Double)y);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2dv")]
        public static
        void Vertex2(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertex2dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2dv")]
        public static
        void Vertex2(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertex2dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2dv")]
        public static
        unsafe void Vertex2(Double* v)
        {
            Delegates.glVertex2dv((Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2f")]
        public static
        void Vertex2(Single x, Single y)
        {
            Delegates.glVertex2f((Single)x, (Single)y);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2fv")]
        public static
        void Vertex2(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertex2fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2fv")]
        public static
        void Vertex2(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertex2fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2fv")]
        public static
        unsafe void Vertex2(Single* v)
        {
            Delegates.glVertex2fv((Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2i")]
        public static
        void Vertex2(Int32 x, Int32 y)
        {
            Delegates.glVertex2i((Int32)x, (Int32)y);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2iv")]
        public static
        void Vertex2(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertex2iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2iv")]
        public static
        void Vertex2(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertex2iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2iv")]
        public static
        unsafe void Vertex2(Int32* v)
        {
            Delegates.glVertex2iv((Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2s")]
        public static
        void Vertex2(Int16 x, Int16 y)
        {
            Delegates.glVertex2s((Int16)x, (Int16)y);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2sv")]
        public static
        void Vertex2(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertex2sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2sv")]
        public static
        void Vertex2(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertex2sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2sv")]
        public static
        unsafe void Vertex2(Int16* v)
        {
            Delegates.glVertex2sv((Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3d")]
        public static
        void Vertex3(Double x, Double y, Double z)
        {
            Delegates.glVertex3d((Double)x, (Double)y, (Double)z);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3dv")]
        public static
        void Vertex3(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertex3dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3dv")]
        public static
        void Vertex3(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertex3dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3dv")]
        public static
        unsafe void Vertex3(Double* v)
        {
            Delegates.glVertex3dv((Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3f")]
        public static
        void Vertex3(Single x, Single y, Single z)
        {
            Delegates.glVertex3f((Single)x, (Single)y, (Single)z);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3fv")]
        public static
        void Vertex3(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertex3fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3fv")]
        public static
        void Vertex3(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertex3fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3fv")]
        public static
        unsafe void Vertex3(Single* v)
        {
            Delegates.glVertex3fv((Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3i")]
        public static
        void Vertex3(Int32 x, Int32 y, Int32 z)
        {
            Delegates.glVertex3i((Int32)x, (Int32)y, (Int32)z);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3iv")]
        public static
        void Vertex3(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertex3iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3iv")]
        public static
        void Vertex3(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertex3iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3iv")]
        public static
        unsafe void Vertex3(Int32* v)
        {
            Delegates.glVertex3iv((Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3s")]
        public static
        void Vertex3(Int16 x, Int16 y, Int16 z)
        {
            Delegates.glVertex3s((Int16)x, (Int16)y, (Int16)z);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3sv")]
        public static
        void Vertex3(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertex3sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3sv")]
        public static
        void Vertex3(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertex3sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3sv")]
        public static
        unsafe void Vertex3(Int16* v)
        {
            Delegates.glVertex3sv((Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4d")]
        public static
        void Vertex4(Double x, Double y, Double z, Double w)
        {
            Delegates.glVertex4d((Double)x, (Double)y, (Double)z, (Double)w);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4dv")]
        public static
        void Vertex4(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertex4dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4dv")]
        public static
        void Vertex4(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertex4dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4dv")]
        public static
        unsafe void Vertex4(Double* v)
        {
            Delegates.glVertex4dv((Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4f")]
        public static
        void Vertex4(Single x, Single y, Single z, Single w)
        {
            Delegates.glVertex4f((Single)x, (Single)y, (Single)z, (Single)w);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4fv")]
        public static
        void Vertex4(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertex4fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4fv")]
        public static
        void Vertex4(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertex4fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4fv")]
        public static
        unsafe void Vertex4(Single* v)
        {
            Delegates.glVertex4fv((Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4i")]
        public static
        void Vertex4(Int32 x, Int32 y, Int32 z, Int32 w)
        {
            Delegates.glVertex4i((Int32)x, (Int32)y, (Int32)z, (Int32)w);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4iv")]
        public static
        void Vertex4(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertex4iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4iv")]
        public static
        void Vertex4(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertex4iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4iv")]
        public static
        unsafe void Vertex4(Int32* v)
        {
            Delegates.glVertex4iv((Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4s")]
        public static
        void Vertex4(Int16 x, Int16 y, Int16 z, Int16 w)
        {
            Delegates.glVertex4s((Int16)x, (Int16)y, (Int16)z, (Int16)w);
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4sv")]
        public static
        void Vertex4(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertex4sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4sv")]
        public static
        void Vertex4(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertex4sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4sv")]
        public static
        unsafe void Vertex4(Int16* v)
        {
            Delegates.glVertex4sv((Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1d")]
        public static
        void VertexAttrib1(Int32 index, Double x)
        {
            Delegates.glVertexAttrib1d((UInt32)index, (Double)x);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1d")]
        public static
        void VertexAttrib1(UInt32 index, Double x)
        {
            Delegates.glVertexAttrib1d((UInt32)index, (Double)x);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1dv")]
        public static
        unsafe void VertexAttrib1(Int32 index, Double* v)
        {
            Delegates.glVertexAttrib1dv((UInt32)index, (Double*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1dv")]
        public static
        unsafe void VertexAttrib1(UInt32 index, Double* v)
        {
            Delegates.glVertexAttrib1dv((UInt32)index, (Double*)v);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1f")]
        public static
        void VertexAttrib1(Int32 index, Single x)
        {
            Delegates.glVertexAttrib1f((UInt32)index, (Single)x);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1f")]
        public static
        void VertexAttrib1(UInt32 index, Single x)
        {
            Delegates.glVertexAttrib1f((UInt32)index, (Single)x);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        public static
        unsafe void VertexAttrib1(Int32 index, Single* v)
        {
            Delegates.glVertexAttrib1fv((UInt32)index, (Single*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        public static
        unsafe void VertexAttrib1(UInt32 index, Single* v)
        {
            Delegates.glVertexAttrib1fv((UInt32)index, (Single*)v);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1s")]
        public static
        void VertexAttrib1(Int32 index, Int16 x)
        {
            Delegates.glVertexAttrib1s((UInt32)index, (Int16)x);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1s")]
        public static
        void VertexAttrib1(UInt32 index, Int16 x)
        {
            Delegates.glVertexAttrib1s((UInt32)index, (Int16)x);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1sv")]
        public static
        unsafe void VertexAttrib1(Int32 index, Int16* v)
        {
            Delegates.glVertexAttrib1sv((UInt32)index, (Int16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1sv")]
        public static
        unsafe void VertexAttrib1(UInt32 index, Int16* v)
        {
            Delegates.glVertexAttrib1sv((UInt32)index, (Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2d")]
        public static
        void VertexAttrib2(Int32 index, Double x, Double y)
        {
            Delegates.glVertexAttrib2d((UInt32)index, (Double)x, (Double)y);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2d")]
        public static
        void VertexAttrib2(UInt32 index, Double x, Double y)
        {
            Delegates.glVertexAttrib2d((UInt32)index, (Double)x, (Double)y);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static
        void VertexAttrib2(Int32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static
        void VertexAttrib2(Int32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static
        unsafe void VertexAttrib2(Int32 index, Double* v)
        {
            Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static
        void VertexAttrib2(UInt32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static
        void VertexAttrib2(UInt32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static
        unsafe void VertexAttrib2(UInt32 index, Double* v)
        {
            Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2f")]
        public static
        void VertexAttrib2(Int32 index, Single x, Single y)
        {
            Delegates.glVertexAttrib2f((UInt32)index, (Single)x, (Single)y);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2f")]
        public static
        void VertexAttrib2(UInt32 index, Single x, Single y)
        {
            Delegates.glVertexAttrib2f((UInt32)index, (Single)x, (Single)y);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static
        void VertexAttrib2(Int32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static
        void VertexAttrib2(Int32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static
        unsafe void VertexAttrib2(Int32 index, Single* v)
        {
            Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static
        void VertexAttrib2(UInt32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static
        void VertexAttrib2(UInt32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static
        unsafe void VertexAttrib2(UInt32 index, Single* v)
        {
            Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2s")]
        public static
        void VertexAttrib2(Int32 index, Int16 x, Int16 y)
        {
            Delegates.glVertexAttrib2s((UInt32)index, (Int16)x, (Int16)y);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2s")]
        public static
        void VertexAttrib2(UInt32 index, Int16 x, Int16 y)
        {
            Delegates.glVertexAttrib2s((UInt32)index, (Int16)x, (Int16)y);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static
        void VertexAttrib2(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static
        void VertexAttrib2(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static
        unsafe void VertexAttrib2(Int32 index, Int16* v)
        {
            Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static
        void VertexAttrib2(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static
        void VertexAttrib2(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static
        unsafe void VertexAttrib2(UInt32 index, Int16* v)
        {
            Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3d")]
        public static
        void VertexAttrib3(Int32 index, Double x, Double y, Double z)
        {
            Delegates.glVertexAttrib3d((UInt32)index, (Double)x, (Double)y, (Double)z);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3d")]
        public static
        void VertexAttrib3(UInt32 index, Double x, Double y, Double z)
        {
            Delegates.glVertexAttrib3d((UInt32)index, (Double)x, (Double)y, (Double)z);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static
        void VertexAttrib3(Int32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static
        void VertexAttrib3(Int32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static
        unsafe void VertexAttrib3(Int32 index, Double* v)
        {
            Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static
        void VertexAttrib3(UInt32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static
        void VertexAttrib3(UInt32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static
        unsafe void VertexAttrib3(UInt32 index, Double* v)
        {
            Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3f")]
        public static
        void VertexAttrib3(Int32 index, Single x, Single y, Single z)
        {
            Delegates.glVertexAttrib3f((UInt32)index, (Single)x, (Single)y, (Single)z);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3f")]
        public static
        void VertexAttrib3(UInt32 index, Single x, Single y, Single z)
        {
            Delegates.glVertexAttrib3f((UInt32)index, (Single)x, (Single)y, (Single)z);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static
        void VertexAttrib3(Int32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static
        void VertexAttrib3(Int32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static
        unsafe void VertexAttrib3(Int32 index, Single* v)
        {
            Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static
        void VertexAttrib3(UInt32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static
        void VertexAttrib3(UInt32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static
        unsafe void VertexAttrib3(UInt32 index, Single* v)
        {
            Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3s")]
        public static
        void VertexAttrib3(Int32 index, Int16 x, Int16 y, Int16 z)
        {
            Delegates.glVertexAttrib3s((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3s")]
        public static
        void VertexAttrib3(UInt32 index, Int16 x, Int16 y, Int16 z)
        {
            Delegates.glVertexAttrib3s((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static
        void VertexAttrib3(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static
        void VertexAttrib3(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static
        unsafe void VertexAttrib3(Int32 index, Int16* v)
        {
            Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static
        void VertexAttrib3(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static
        void VertexAttrib3(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static
        unsafe void VertexAttrib3(UInt32 index, Int16* v)
        {
            Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4bv")]
        public static
        void VertexAttrib4(UInt32 index, SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Delegates.glVertexAttrib4bv((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4bv")]
        public static
        void VertexAttrib4(UInt32 index, ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4bv((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4bv")]
        public static
        unsafe void VertexAttrib4(UInt32 index, SByte* v)
        {
            Delegates.glVertexAttrib4bv((UInt32)index, (SByte*)v);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4d")]
        public static
        void VertexAttrib4(Int32 index, Double x, Double y, Double z, Double w)
        {
            Delegates.glVertexAttrib4d((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4d")]
        public static
        void VertexAttrib4(UInt32 index, Double x, Double y, Double z, Double w)
        {
            Delegates.glVertexAttrib4d((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static
        void VertexAttrib4(Int32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static
        void VertexAttrib4(Int32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static
        unsafe void VertexAttrib4(Int32 index, Double* v)
        {
            Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static
        void VertexAttrib4(UInt32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static
        void VertexAttrib4(UInt32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static
        unsafe void VertexAttrib4(UInt32 index, Double* v)
        {
            Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4f")]
        public static
        void VertexAttrib4(Int32 index, Single x, Single y, Single z, Single w)
        {
            Delegates.glVertexAttrib4f((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4f")]
        public static
        void VertexAttrib4(UInt32 index, Single x, Single y, Single z, Single w)
        {
            Delegates.glVertexAttrib4f((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static
        void VertexAttrib4(Int32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static
        void VertexAttrib4(Int32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static
        unsafe void VertexAttrib4(Int32 index, Single* v)
        {
            Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static
        void VertexAttrib4(UInt32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static
        void VertexAttrib4(UInt32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static
        unsafe void VertexAttrib4(UInt32 index, Single* v)
        {
            Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static
        void VertexAttrib4(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static
        void VertexAttrib4(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static
        unsafe void VertexAttrib4(Int32 index, Int32* v)
        {
            Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static
        void VertexAttrib4(UInt32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static
        void VertexAttrib4(UInt32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static
        unsafe void VertexAttrib4(UInt32 index, Int32* v)
        {
            Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nbv")]
        public static
        void VertexAttrib4N(UInt32 index, SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nbv((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nbv")]
        public static
        void VertexAttrib4N(UInt32 index, ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nbv((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nbv")]
        public static
        unsafe void VertexAttrib4N(UInt32 index, SByte* v)
        {
            Delegates.glVertexAttrib4Nbv((UInt32)index, (SByte*)v);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static
        void VertexAttrib4N(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static
        void VertexAttrib4N(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static
        unsafe void VertexAttrib4N(Int32 index, Int32* v)
        {
            Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static
        void VertexAttrib4N(UInt32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static
        void VertexAttrib4N(UInt32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static
        unsafe void VertexAttrib4N(UInt32 index, Int32* v)
        {
            Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static
        void VertexAttrib4N(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static
        void VertexAttrib4N(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static
        unsafe void VertexAttrib4N(Int32 index, Int16* v)
        {
            Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static
        void VertexAttrib4N(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static
        void VertexAttrib4N(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static
        unsafe void VertexAttrib4N(UInt32 index, Int16* v)
        {
            Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nub")]
        public static
        void VertexAttrib4N(Int32 index, Byte x, Byte y, Byte z, Byte w)
        {
            Delegates.glVertexAttrib4Nub((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nub")]
        public static
        void VertexAttrib4N(UInt32 index, Byte x, Byte y, Byte z, Byte w)
        {
            Delegates.glVertexAttrib4Nub((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static
        void VertexAttrib4N(Int32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static
        void VertexAttrib4N(Int32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static
        unsafe void VertexAttrib4N(Int32 index, Byte* v)
        {
            Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static
        void VertexAttrib4N(UInt32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static
        void VertexAttrib4N(UInt32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static
        unsafe void VertexAttrib4N(UInt32 index, Byte* v)
        {
            Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nuiv")]
        public static
        void VertexAttrib4N(UInt32 index, UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nuiv")]
        public static
        void VertexAttrib4N(UInt32 index, ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nuiv")]
        public static
        unsafe void VertexAttrib4N(UInt32 index, UInt32* v)
        {
            Delegates.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nusv")]
        public static
        void VertexAttrib4N(UInt32 index, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nusv")]
        public static
        void VertexAttrib4N(UInt32 index, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nusv")]
        public static
        unsafe void VertexAttrib4N(UInt32 index, UInt16* v)
        {
            Delegates.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4s")]
        public static
        void VertexAttrib4(Int32 index, Int16 x, Int16 y, Int16 z, Int16 w)
        {
            Delegates.glVertexAttrib4s((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4s")]
        public static
        void VertexAttrib4(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w)
        {
            Delegates.glVertexAttrib4s((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static
        void VertexAttrib4(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static
        void VertexAttrib4(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static
        unsafe void VertexAttrib4(Int32 index, Int16* v)
        {
            Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static
        void VertexAttrib4(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static
        void VertexAttrib4(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static
        unsafe void VertexAttrib4(UInt32 index, Int16* v)
        {
            Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static
        void VertexAttrib4(Int32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static
        void VertexAttrib4(Int32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static
        unsafe void VertexAttrib4(Int32 index, Byte* v)
        {
            Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static
        void VertexAttrib4(UInt32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static
        void VertexAttrib4(UInt32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static
        unsafe void VertexAttrib4(UInt32 index, Byte* v)
        {
            Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4uiv")]
        public static
        void VertexAttrib4(UInt32 index, UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glVertexAttrib4uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4uiv")]
        public static
        void VertexAttrib4(UInt32 index, ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4uiv")]
        public static
        unsafe void VertexAttrib4(UInt32 index, UInt32* v)
        {
            Delegates.glVertexAttrib4uiv((UInt32)index, (UInt32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4usv")]
        public static
        void VertexAttrib4(UInt32 index, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Delegates.glVertexAttrib4usv((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4usv")]
        public static
        void VertexAttrib4(UInt32 index, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4usv((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4usv")]
        public static
        unsafe void VertexAttrib4(UInt32 index, UInt16* v)
        {
            Delegates.glVertexAttrib4usv((UInt32)index, (UInt16*)v);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1i")]
        public static
        void VertexAttribI1(Int32 index, Int32 x)
        {
            Delegates.glVertexAttribI1i((UInt32)index, (Int32)x);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1i")]
        public static
        void VertexAttribI1(UInt32 index, Int32 x)
        {
            Delegates.glVertexAttribI1i((UInt32)index, (Int32)x);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1iv")]
        public static
        unsafe void VertexAttribI1(Int32 index, Int32* v)
        {
            Delegates.glVertexAttribI1iv((UInt32)index, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1iv")]
        public static
        unsafe void VertexAttribI1(UInt32 index, Int32* v)
        {
            Delegates.glVertexAttribI1iv((UInt32)index, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1ui")]
        public static
        void VertexAttribI1(UInt32 index, UInt32 x)
        {
            Delegates.glVertexAttribI1ui((UInt32)index, (UInt32)x);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1uiv")]
        public static
        unsafe void VertexAttribI1(UInt32 index, UInt32* v)
        {
            Delegates.glVertexAttribI1uiv((UInt32)index, (UInt32*)v);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2i")]
        public static
        void VertexAttribI2(Int32 index, Int32 x, Int32 y)
        {
            Delegates.glVertexAttribI2i((UInt32)index, (Int32)x, (Int32)y);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2i")]
        public static
        void VertexAttribI2(UInt32 index, Int32 x, Int32 y)
        {
            Delegates.glVertexAttribI2i((UInt32)index, (Int32)x, (Int32)y);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static
        void VertexAttribI2(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static
        void VertexAttribI2(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static
        unsafe void VertexAttribI2(Int32 index, Int32* v)
        {
            Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static
        void VertexAttribI2(UInt32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static
        void VertexAttribI2(UInt32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static
        unsafe void VertexAttribI2(UInt32 index, Int32* v)
        {
            Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2ui")]
        public static
        void VertexAttribI2(UInt32 index, UInt32 x, UInt32 y)
        {
            Delegates.glVertexAttribI2ui((UInt32)index, (UInt32)x, (UInt32)y);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
        public static
        void VertexAttribI2(UInt32 index, UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glVertexAttribI2uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
        public static
        void VertexAttribI2(UInt32 index, ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI2uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
        public static
        unsafe void VertexAttribI2(UInt32 index, UInt32* v)
        {
            Delegates.glVertexAttribI2uiv((UInt32)index, (UInt32*)v);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3i")]
        public static
        void VertexAttribI3(Int32 index, Int32 x, Int32 y, Int32 z)
        {
            Delegates.glVertexAttribI3i((UInt32)index, (Int32)x, (Int32)y, (Int32)z);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3i")]
        public static
        void VertexAttribI3(UInt32 index, Int32 x, Int32 y, Int32 z)
        {
            Delegates.glVertexAttribI3i((UInt32)index, (Int32)x, (Int32)y, (Int32)z);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static
        void VertexAttribI3(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static
        void VertexAttribI3(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static
        unsafe void VertexAttribI3(Int32 index, Int32* v)
        {
            Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static
        void VertexAttribI3(UInt32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static
        void VertexAttribI3(UInt32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static
        unsafe void VertexAttribI3(UInt32 index, Int32* v)
        {
            Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3ui")]
        public static
        void VertexAttribI3(UInt32 index, UInt32 x, UInt32 y, UInt32 z)
        {
            Delegates.glVertexAttribI3ui((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
        public static
        void VertexAttribI3(UInt32 index, UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glVertexAttribI3uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
        public static
        void VertexAttribI3(UInt32 index, ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI3uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
        public static
        unsafe void VertexAttribI3(UInt32 index, UInt32* v)
        {
            Delegates.glVertexAttribI3uiv((UInt32)index, (UInt32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
        public static
        void VertexAttribI4(UInt32 index, SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Delegates.glVertexAttribI4bv((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
        public static
        void VertexAttribI4(UInt32 index, ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4bv((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
        public static
        unsafe void VertexAttribI4(UInt32 index, SByte* v)
        {
            Delegates.glVertexAttribI4bv((UInt32)index, (SByte*)v);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4i")]
        public static
        void VertexAttribI4(Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
        {
            Delegates.glVertexAttribI4i((UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4i")]
        public static
        void VertexAttribI4(UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w)
        {
            Delegates.glVertexAttribI4i((UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static
        void VertexAttribI4(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static
        void VertexAttribI4(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static
        unsafe void VertexAttribI4(Int32 index, Int32* v)
        {
            Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static
        void VertexAttribI4(UInt32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static
        void VertexAttribI4(UInt32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static
        unsafe void VertexAttribI4(UInt32 index, Int32* v)
        {
            Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static
        void VertexAttribI4(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static
        void VertexAttribI4(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static
        unsafe void VertexAttribI4(Int32 index, Int16* v)
        {
            Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static
        void VertexAttribI4(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static
        void VertexAttribI4(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static
        unsafe void VertexAttribI4(UInt32 index, Int16* v)
        {
            Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static
        void VertexAttribI4(Int32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static
        void VertexAttribI4(Int32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static
        unsafe void VertexAttribI4(Int32 index, Byte* v)
        {
            Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static
        void VertexAttribI4(UInt32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static
        void VertexAttribI4(UInt32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static
        unsafe void VertexAttribI4(UInt32 index, Byte* v)
        {
            Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ui")]
        public static
        void VertexAttribI4(UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w)
        {
            Delegates.glVertexAttribI4ui((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        public static
        void VertexAttribI4(UInt32 index, UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glVertexAttribI4uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        public static
        void VertexAttribI4(UInt32 index, ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        public static
        unsafe void VertexAttribI4(UInt32 index, UInt32* v)
        {
            Delegates.glVertexAttribI4uiv((UInt32)index, (UInt32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
        public static
        void VertexAttribI4(UInt32 index, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Delegates.glVertexAttribI4usv((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
        public static
        void VertexAttribI4(UInt32 index, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4usv((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
        public static
        unsafe void VertexAttribI4(UInt32 index, UInt16* v)
        {
            Delegates.glVertexAttribI4usv((UInt32)index, (UInt16*)v);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer(Int32 index, Int32 size, int type, Int32 stride, IntPtr pointer)
        {
            Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(Int32 index, Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
            where T4 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(Int32 index, Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
            where T4 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(Int32 index, Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
            where T4 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(Int32 index, Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
            where T4 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T4)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribIPointerType type, Int32 stride, IntPtr pointer)
        {
            Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
            where T4 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
            where T4 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
            where T4 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
            where T4 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T4)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer(UInt32 index, Int32 size, int type, Int32 stride, IntPtr pointer)
        {
            Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(UInt32 index, Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
            where T4 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(UInt32 index, Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
            where T4 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(UInt32 index, Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
            where T4 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(UInt32 index, Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
            where T4 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T4)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribIPointerType type, Int32 stride, IntPtr pointer)
        {
            Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
            where T4 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
            where T4 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
            where T4 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
            where T4 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T4)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer(Int32 index, Int32 size, int type, bool normalized, Int32 stride, IntPtr pointer)
        {
            Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(Int32 index, Int32 size, int type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
            where T5 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(Int32 index, Int32 size, int type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
            where T5 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(Int32 index, Int32 size, int type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] pointer)
            where T5 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(Int32 index, Int32 size, int type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
            where T5 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T5)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, IntPtr pointer)
        {
            Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
            where T5 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
            where T5 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] pointer)
            where T5 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
            where T5 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T5)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer(UInt32 index, Int32 size, int type, bool normalized, Int32 stride, IntPtr pointer)
        {
            Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(UInt32 index, Int32 size, int type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
            where T5 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(UInt32 index, Int32 size, int type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
            where T5 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(UInt32 index, Int32 size, int type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] pointer)
            where T5 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(UInt32 index, Int32 size, int type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
            where T5 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T5)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, IntPtr pointer)
        {
            Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
            where T5 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
            where T5 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] pointer)
            where T5 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
            where T5 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T5)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glVertexPointer")]
        public static
        void VertexPointer(Int32 size, int type, Int32 stride, IntPtr pointer)
        {
            Delegates.glVertexPointer((Int32)size, (OpenTK.Graphics.OpenGL.VertexPointerType)type, (Int32)stride, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glVertexPointer")]
        public static
        void VertexPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexPointer((Int32)size, (OpenTK.Graphics.OpenGL.VertexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glVertexPointer")]
        public static
        void VertexPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexPointer((Int32)size, (OpenTK.Graphics.OpenGL.VertexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glVertexPointer")]
        public static
        void VertexPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexPointer((Int32)size, (OpenTK.Graphics.OpenGL.VertexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glVertexPointer")]
        public static
        void VertexPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexPointer((Int32)size, (OpenTK.Graphics.OpenGL.VertexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T3)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glVertexPointer")]
        public static
        void VertexPointer(Int32 size, OpenTK.Graphics.OpenGL.VertexPointerType type, Int32 stride, IntPtr pointer)
        {
            Delegates.glVertexPointer((Int32)size, (OpenTK.Graphics.OpenGL.VertexPointerType)type, (Int32)stride, (IntPtr)pointer);
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glVertexPointer")]
        public static
        void VertexPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.VertexPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexPointer((Int32)size, (OpenTK.Graphics.OpenGL.VertexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glVertexPointer")]
        public static
        void VertexPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.VertexPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexPointer((Int32)size, (OpenTK.Graphics.OpenGL.VertexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glVertexPointer")]
        public static
        void VertexPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.VertexPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexPointer((Int32)size, (OpenTK.Graphics.OpenGL.VertexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glVertexPointer")]
        public static
        void VertexPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.VertexPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
            where T3 : struct
        {
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexPointer((Int32)size, (OpenTK.Graphics.OpenGL.VertexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T3)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
        }

        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glViewport")]
        public static
        void Viewport(Int32 x, Int32 y, Int32 width, Int32 height)
        {
            Delegates.glViewport((Int32)x, (Int32)y, (Int32)width, (Int32)height);
        }

        [AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glWaitSync")]
        public static
        void WaitSync(IntPtr sync, Int32 flags, Int64 timeout)
        {
            Delegates.glWaitSync((IntPtr)sync, (UInt32)flags, (UInt64)timeout);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glWaitSync")]
        public static
        void WaitSync(IntPtr sync, UInt32 flags, UInt64 timeout)
        {
            Delegates.glWaitSync((IntPtr)sync, (UInt32)flags, (UInt64)timeout);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2d")]
        public static
        void WindowPos2(Double x, Double y)
        {
            Delegates.glWindowPos2d((Double)x, (Double)y);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2dv")]
        public static
        void WindowPos2(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glWindowPos2dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2dv")]
        public static
        void WindowPos2(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glWindowPos2dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2dv")]
        public static
        unsafe void WindowPos2(Double* v)
        {
            Delegates.glWindowPos2dv((Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2f")]
        public static
        void WindowPos2(Single x, Single y)
        {
            Delegates.glWindowPos2f((Single)x, (Single)y);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2fv")]
        public static
        void WindowPos2(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glWindowPos2fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2fv")]
        public static
        void WindowPos2(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glWindowPos2fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2fv")]
        public static
        unsafe void WindowPos2(Single* v)
        {
            Delegates.glWindowPos2fv((Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2i")]
        public static
        void WindowPos2(Int32 x, Int32 y)
        {
            Delegates.glWindowPos2i((Int32)x, (Int32)y);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2iv")]
        public static
        void WindowPos2(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glWindowPos2iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2iv")]
        public static
        void WindowPos2(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glWindowPos2iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2iv")]
        public static
        unsafe void WindowPos2(Int32* v)
        {
            Delegates.glWindowPos2iv((Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2s")]
        public static
        void WindowPos2(Int16 x, Int16 y)
        {
            Delegates.glWindowPos2s((Int16)x, (Int16)y);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2sv")]
        public static
        void WindowPos2(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glWindowPos2sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2sv")]
        public static
        void WindowPos2(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glWindowPos2sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2sv")]
        public static
        unsafe void WindowPos2(Int16* v)
        {
            Delegates.glWindowPos2sv((Int16*)v);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3d")]
        public static
        void WindowPos3(Double x, Double y, Double z)
        {
            Delegates.glWindowPos3d((Double)x, (Double)y, (Double)z);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3dv")]
        public static
        void WindowPos3(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glWindowPos3dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3dv")]
        public static
        void WindowPos3(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glWindowPos3dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3dv")]
        public static
        unsafe void WindowPos3(Double* v)
        {
            Delegates.glWindowPos3dv((Double*)v);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3f")]
        public static
        void WindowPos3(Single x, Single y, Single z)
        {
            Delegates.glWindowPos3f((Single)x, (Single)y, (Single)z);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3fv")]
        public static
        void WindowPos3(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glWindowPos3fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3fv")]
        public static
        void WindowPos3(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glWindowPos3fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3fv")]
        public static
        unsafe void WindowPos3(Single* v)
        {
            Delegates.glWindowPos3fv((Single*)v);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3i")]
        public static
        void WindowPos3(Int32 x, Int32 y, Int32 z)
        {
            Delegates.glWindowPos3i((Int32)x, (Int32)y, (Int32)z);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3iv")]
        public static
        void WindowPos3(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glWindowPos3iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3iv")]
        public static
        void WindowPos3(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glWindowPos3iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3iv")]
        public static
        unsafe void WindowPos3(Int32* v)
        {
            Delegates.glWindowPos3iv((Int32*)v);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3s")]
        public static
        void WindowPos3(Int16 x, Int16 y, Int16 z)
        {
            Delegates.glWindowPos3s((Int16)x, (Int16)y, (Int16)z);
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3sv")]
        public static
        void WindowPos3(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glWindowPos3sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3sv")]
        public static
        void WindowPos3(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glWindowPos3sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3sv")]
        public static
        unsafe void WindowPos3(Int16* v)
        {
            Delegates.glWindowPos3sv((Int16*)v);
        }

        public static partial class Ext
        {
            [AutoGenerated(Category = "EXT_stencil_two_side", Version = "1.3", EntryPoint = "glActiveStencilFaceEXT")]
            public static
            void ActiveStencilFace(OpenTK.Graphics.OpenGL.EXT_stencil_two_side face)
            {
                Delegates.glActiveStencilFaceEXT((OpenTK.Graphics.OpenGL.EXT_stencil_two_side)face);
            }

            [AutoGenerated(Category = "EXT_stencil_two_side", Version = "1.3", EntryPoint = "glActiveStencilFaceEXT")]
            public static
            void ActiveStencilFace(int face)
            {
                Delegates.glActiveStencilFaceEXT((OpenTK.Graphics.OpenGL.EXT_stencil_two_side)face);
            }

            [AutoGenerated(Category = "EXT_light_texture", Version = "1.1", EntryPoint = "glApplyTextureEXT")]
            public static
            void ApplyTexture(OpenTK.Graphics.OpenGL.EXT_light_texture mode)
            {
                Delegates.glApplyTextureEXT((OpenTK.Graphics.OpenGL.EXT_light_texture)mode);
            }

            [AutoGenerated(Category = "EXT_light_texture", Version = "1.1", EntryPoint = "glApplyTextureEXT")]
            public static
            void ApplyTexture(int mode)
            {
                Delegates.glApplyTextureEXT((OpenTK.Graphics.OpenGL.EXT_light_texture)mode);
            }

            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glAreTexturesResidentEXT")]
            public static
            bool AreTexturesResident(Int32 n, Int32[] textures, [OutAttribute] bool[] residences)
            {
                unsafe
                {
                    fixed (Int32* textures_ptr = textures)
                    fixed (bool* residences_ptr = residences)
                    {
                        return Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glAreTexturesResidentEXT")]
            public static
            bool AreTexturesResident(Int32 n, ref Int32 textures, [OutAttribute] out bool residences)
            {
                unsafe
                {
                    fixed (Int32* textures_ptr = &textures)
                    fixed (bool* residences_ptr = &residences)
                    {
                        bool retval = Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                        residences = *residences_ptr;
                        return retval;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glAreTexturesResidentEXT")]
            public static
            unsafe bool AreTexturesResident(Int32 n, Int32* textures, [OutAttribute] bool* residences)
            {
                return Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures, (bool*)residences);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glAreTexturesResidentEXT")]
            public static
            bool AreTexturesResident(Int32 n, UInt32[] textures, [OutAttribute] bool[] residences)
            {
                unsafe
                {
                    fixed (UInt32* textures_ptr = textures)
                    fixed (bool* residences_ptr = residences)
                    {
                        return Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glAreTexturesResidentEXT")]
            public static
            bool AreTexturesResident(Int32 n, ref UInt32 textures, [OutAttribute] out bool residences)
            {
                unsafe
                {
                    fixed (UInt32* textures_ptr = &textures)
                    fixed (bool* residences_ptr = &residences)
                    {
                        bool retval = Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                        residences = *residences_ptr;
                        return retval;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glAreTexturesResidentEXT")]
            public static
            unsafe bool AreTexturesResident(Int32 n, UInt32* textures, [OutAttribute] bool* residences)
            {
                return Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures, (bool*)residences);
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glArrayElementEXT")]
            public static
            void ArrayElement(Int32 i)
            {
                Delegates.glArrayElementEXT((Int32)i);
            }

            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glBeginTransformFeedbackEXT")]
            public static
            void BeginTransformFeedback(OpenTK.Graphics.OpenGL.EXT_transform_feedback primitiveMode)
            {
                Delegates.glBeginTransformFeedbackEXT((OpenTK.Graphics.OpenGL.EXT_transform_feedback)primitiveMode);
            }

            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glBeginTransformFeedbackEXT")]
            public static
            void BeginTransformFeedback(int primitiveMode)
            {
                Delegates.glBeginTransformFeedbackEXT((OpenTK.Graphics.OpenGL.EXT_transform_feedback)primitiveMode);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glBeginVertexShaderEXT")]
            public static
            void BeginVertexShader()
            {
                Delegates.glBeginVertexShaderEXT();
            }

            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glBindBufferBaseEXT")]
            public static
            void BindBufferBase(OpenTK.Graphics.OpenGL.EXT_transform_feedback target, Int32 index, Int32 buffer)
            {
                Delegates.glBindBufferBaseEXT((OpenTK.Graphics.OpenGL.EXT_transform_feedback)target, (UInt32)index, (UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glBindBufferBaseEXT")]
            public static
            void BindBufferBase(OpenTK.Graphics.OpenGL.EXT_transform_feedback target, UInt32 index, UInt32 buffer)
            {
                Delegates.glBindBufferBaseEXT((OpenTK.Graphics.OpenGL.EXT_transform_feedback)target, (UInt32)index, (UInt32)buffer);
            }

            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glBindBufferBaseEXT")]
            public static
            void BindBufferBase(int target, Int32 index, Int32 buffer)
            {
                Delegates.glBindBufferBaseEXT((OpenTK.Graphics.OpenGL.EXT_transform_feedback)target, (UInt32)index, (UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glBindBufferBaseEXT")]
            public static
            void BindBufferBase(int target, UInt32 index, UInt32 buffer)
            {
                Delegates.glBindBufferBaseEXT((OpenTK.Graphics.OpenGL.EXT_transform_feedback)target, (UInt32)index, (UInt32)buffer);
            }

            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glBindBufferOffsetEXT")]
            public static
            void BindBufferOffset(OpenTK.Graphics.OpenGL.EXT_transform_feedback target, Int32 index, Int32 buffer, IntPtr offset)
            {
                Delegates.glBindBufferOffsetEXT((OpenTK.Graphics.OpenGL.EXT_transform_feedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glBindBufferOffsetEXT")]
            public static
            void BindBufferOffset(OpenTK.Graphics.OpenGL.EXT_transform_feedback target, UInt32 index, UInt32 buffer, IntPtr offset)
            {
                Delegates.glBindBufferOffsetEXT((OpenTK.Graphics.OpenGL.EXT_transform_feedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset);
            }

            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glBindBufferOffsetEXT")]
            public static
            void BindBufferOffset(int target, Int32 index, Int32 buffer, IntPtr offset)
            {
                Delegates.glBindBufferOffsetEXT((OpenTK.Graphics.OpenGL.EXT_transform_feedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glBindBufferOffsetEXT")]
            public static
            void BindBufferOffset(int target, UInt32 index, UInt32 buffer, IntPtr offset)
            {
                Delegates.glBindBufferOffsetEXT((OpenTK.Graphics.OpenGL.EXT_transform_feedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset);
            }

            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glBindBufferRangeEXT")]
            public static
            void BindBufferRange(OpenTK.Graphics.OpenGL.EXT_transform_feedback target, Int32 index, Int32 buffer, IntPtr offset, IntPtr size)
            {
                Delegates.glBindBufferRangeEXT((OpenTK.Graphics.OpenGL.EXT_transform_feedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glBindBufferRangeEXT")]
            public static
            void BindBufferRange(OpenTK.Graphics.OpenGL.EXT_transform_feedback target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size)
            {
                Delegates.glBindBufferRangeEXT((OpenTK.Graphics.OpenGL.EXT_transform_feedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
            }

            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glBindBufferRangeEXT")]
            public static
            void BindBufferRange(int target, Int32 index, Int32 buffer, IntPtr offset, IntPtr size)
            {
                Delegates.glBindBufferRangeEXT((OpenTK.Graphics.OpenGL.EXT_transform_feedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glBindBufferRangeEXT")]
            public static
            void BindBufferRange(int target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size)
            {
                Delegates.glBindBufferRangeEXT((OpenTK.Graphics.OpenGL.EXT_transform_feedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
            }

            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glBindFragDataLocationEXT")]
            public static
            void BindFragDataLocation(Int32 program, Int32 color, String name)
            {
                Delegates.glBindFragDataLocationEXT((UInt32)program, (UInt32)color, (String)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glBindFragDataLocationEXT")]
            public static
            void BindFragDataLocation(UInt32 program, UInt32 color, String name)
            {
                Delegates.glBindFragDataLocationEXT((UInt32)program, (UInt32)color, (String)name);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glBindFramebufferEXT")]
            public static
            void BindFramebuffer(OpenTK.Graphics.OpenGL.FramebufferTarget target, Int32 framebuffer)
            {
                Delegates.glBindFramebufferEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (UInt32)framebuffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glBindFramebufferEXT")]
            public static
            void BindFramebuffer(OpenTK.Graphics.OpenGL.FramebufferTarget target, UInt32 framebuffer)
            {
                Delegates.glBindFramebufferEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (UInt32)framebuffer);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glBindFramebufferEXT")]
            public static
            void BindFramebuffer(int target, Int32 framebuffer)
            {
                Delegates.glBindFramebufferEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (UInt32)framebuffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glBindFramebufferEXT")]
            public static
            void BindFramebuffer(int target, UInt32 framebuffer)
            {
                Delegates.glBindFramebufferEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (UInt32)framebuffer);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glBindLightParameterEXT")]
            public static
            Int32 BindLightParameter(int light, int value)
            {
                return Delegates.glBindLightParameterEXT((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)value);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glBindLightParameterEXT")]
            public static
            Int32 BindLightParameter(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter value)
            {
                return Delegates.glBindLightParameterEXT((OpenTK.Graphics.OpenGL.LightName)light, (OpenTK.Graphics.OpenGL.LightParameter)value);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glBindMaterialParameterEXT")]
            public static
            Int32 BindMaterialParameter(int face, int value)
            {
                return Delegates.glBindMaterialParameterEXT((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)value);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glBindMaterialParameterEXT")]
            public static
            Int32 BindMaterialParameter(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter value)
            {
                return Delegates.glBindMaterialParameterEXT((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)value);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glBindMultiTextureEXT")]
            public static
            void BindMultiTexture(int texunit, int target, Int32 texture)
            {
                Delegates.glBindMultiTextureEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (UInt32)texture);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glBindMultiTextureEXT")]
            public static
            void BindMultiTexture(int texunit, int target, UInt32 texture)
            {
                Delegates.glBindMultiTextureEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (UInt32)texture);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glBindMultiTextureEXT")]
            public static
            void BindMultiTexture(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 texture)
            {
                Delegates.glBindMultiTextureEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (UInt32)texture);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glBindMultiTextureEXT")]
            public static
            void BindMultiTexture(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, UInt32 texture)
            {
                Delegates.glBindMultiTextureEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (UInt32)texture);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glBindParameterEXT")]
            public static
            Int32 BindParameter(OpenTK.Graphics.OpenGL.EXT_vertex_shader value)
            {
                return Delegates.glBindParameterEXT((OpenTK.Graphics.OpenGL.EXT_vertex_shader)value);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glBindParameterEXT")]
            public static
            Int32 BindParameter(int value)
            {
                return Delegates.glBindParameterEXT((OpenTK.Graphics.OpenGL.EXT_vertex_shader)value);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glBindRenderbufferEXT")]
            public static
            void BindRenderbuffer(int target, Int32 renderbuffer)
            {
                Delegates.glBindRenderbufferEXT((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (UInt32)renderbuffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glBindRenderbufferEXT")]
            public static
            void BindRenderbuffer(int target, UInt32 renderbuffer)
            {
                Delegates.glBindRenderbufferEXT((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (UInt32)renderbuffer);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glBindRenderbufferEXT")]
            public static
            void BindRenderbuffer(OpenTK.Graphics.OpenGL.RenderbufferTarget target, Int32 renderbuffer)
            {
                Delegates.glBindRenderbufferEXT((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (UInt32)renderbuffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glBindRenderbufferEXT")]
            public static
            void BindRenderbuffer(OpenTK.Graphics.OpenGL.RenderbufferTarget target, UInt32 renderbuffer)
            {
                Delegates.glBindRenderbufferEXT((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (UInt32)renderbuffer);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glBindTexGenParameterEXT")]
            public static
            Int32 BindTexGenParameter(int unit, int coord, int value)
            {
                return Delegates.glBindTexGenParameterEXT((OpenTK.Graphics.OpenGL.TextureUnit)unit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)value);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glBindTexGenParameterEXT")]
            public static
            Int32 BindTexGenParameter(OpenTK.Graphics.OpenGL.TextureUnit unit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter value)
            {
                return Delegates.glBindTexGenParameterEXT((OpenTK.Graphics.OpenGL.TextureUnit)unit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)value);
            }

            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glBindTextureEXT")]
            public static
            void BindTexture(int target, Int32 texture)
            {
                Delegates.glBindTextureEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (UInt32)texture);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glBindTextureEXT")]
            public static
            void BindTexture(int target, UInt32 texture)
            {
                Delegates.glBindTextureEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (UInt32)texture);
            }

            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glBindTextureEXT")]
            public static
            void BindTexture(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 texture)
            {
                Delegates.glBindTextureEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (UInt32)texture);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glBindTextureEXT")]
            public static
            void BindTexture(OpenTK.Graphics.OpenGL.TextureTarget target, UInt32 texture)
            {
                Delegates.glBindTextureEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (UInt32)texture);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glBindTextureUnitParameterEXT")]
            public static
            Int32 BindTextureUnitParameter(int unit, int value)
            {
                return Delegates.glBindTextureUnitParameterEXT((OpenTK.Graphics.OpenGL.TextureUnit)unit, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glBindTextureUnitParameterEXT")]
            public static
            Int32 BindTextureUnitParameter(OpenTK.Graphics.OpenGL.TextureUnit unit, OpenTK.Graphics.OpenGL.EXT_vertex_shader value)
            {
                return Delegates.glBindTextureUnitParameterEXT((OpenTK.Graphics.OpenGL.TextureUnit)unit, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glBindVertexShaderEXT")]
            public static
            void BindVertexShader(Int32 id)
            {
                Delegates.glBindVertexShaderEXT((UInt32)id);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glBindVertexShaderEXT")]
            public static
            void BindVertexShader(UInt32 id)
            {
                Delegates.glBindVertexShaderEXT((UInt32)id);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3bEXT")]
            public static
            void Binormal3(Byte bx, Byte by, Byte bz)
            {
                Delegates.glBinormal3bEXT((SByte)bx, (SByte)by, (SByte)bz);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3bEXT")]
            public static
            void Binormal3(SByte bx, SByte by, SByte bz)
            {
                Delegates.glBinormal3bEXT((SByte)bx, (SByte)by, (SByte)bz);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3bvEXT")]
            public static
            void Binormal3(Byte[] v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glBinormal3bvEXT((SByte*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3bvEXT")]
            public static
            void Binormal3(ref Byte v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glBinormal3bvEXT((SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3bvEXT")]
            public static
            unsafe void Binormal3(Byte* v)
            {
                Delegates.glBinormal3bvEXT((SByte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3bvEXT")]
            public static
            void Binormal3(SByte[] v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = v)
                    {
                        Delegates.glBinormal3bvEXT((SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3bvEXT")]
            public static
            void Binormal3(ref SByte v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = &v)
                    {
                        Delegates.glBinormal3bvEXT((SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3bvEXT")]
            public static
            unsafe void Binormal3(SByte* v)
            {
                Delegates.glBinormal3bvEXT((SByte*)v);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3dEXT")]
            public static
            void Binormal3(Double bx, Double by, Double bz)
            {
                Delegates.glBinormal3dEXT((Double)bx, (Double)by, (Double)bz);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3dvEXT")]
            public static
            void Binormal3(Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glBinormal3dvEXT((Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3dvEXT")]
            public static
            void Binormal3(ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glBinormal3dvEXT((Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3dvEXT")]
            public static
            unsafe void Binormal3(Double* v)
            {
                Delegates.glBinormal3dvEXT((Double*)v);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3fEXT")]
            public static
            void Binormal3(Single bx, Single by, Single bz)
            {
                Delegates.glBinormal3fEXT((Single)bx, (Single)by, (Single)bz);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3fvEXT")]
            public static
            void Binormal3(Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glBinormal3fvEXT((Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3fvEXT")]
            public static
            void Binormal3(ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glBinormal3fvEXT((Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3fvEXT")]
            public static
            unsafe void Binormal3(Single* v)
            {
                Delegates.glBinormal3fvEXT((Single*)v);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3iEXT")]
            public static
            void Binormal3(Int32 bx, Int32 by, Int32 bz)
            {
                Delegates.glBinormal3iEXT((Int32)bx, (Int32)by, (Int32)bz);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3ivEXT")]
            public static
            void Binormal3(Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glBinormal3ivEXT((Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3ivEXT")]
            public static
            void Binormal3(ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glBinormal3ivEXT((Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3ivEXT")]
            public static
            unsafe void Binormal3(Int32* v)
            {
                Delegates.glBinormal3ivEXT((Int32*)v);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3sEXT")]
            public static
            void Binormal3(Int16 bx, Int16 by, Int16 bz)
            {
                Delegates.glBinormal3sEXT((Int16)bx, (Int16)by, (Int16)bz);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3svEXT")]
            public static
            void Binormal3(Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glBinormal3svEXT((Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3svEXT")]
            public static
            void Binormal3(ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glBinormal3svEXT((Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormal3svEXT")]
            public static
            unsafe void Binormal3(Int16* v)
            {
                Delegates.glBinormal3svEXT((Int16*)v);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormalPointerEXT")]
            public static
            void BinormalPointer(int type, Int32 stride, IntPtr pointer)
            {
                Delegates.glBinormalPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormalPointerEXT")]
            public static
            void BinormalPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] T2[] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glBinormalPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormalPointerEXT")]
            public static
            void BinormalPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] T2[,] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glBinormalPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormalPointerEXT")]
            public static
            void BinormalPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] T2[,,] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glBinormalPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormalPointerEXT")]
            public static
            void BinormalPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] ref T2 pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glBinormalPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T2)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormalPointerEXT")]
            public static
            void BinormalPointer(OpenTK.Graphics.OpenGL.NormalPointerType type, Int32 stride, IntPtr pointer)
            {
                Delegates.glBinormalPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormalPointerEXT")]
            public static
            void BinormalPointer<T2>(OpenTK.Graphics.OpenGL.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glBinormalPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormalPointerEXT")]
            public static
            void BinormalPointer<T2>(OpenTK.Graphics.OpenGL.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[,] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glBinormalPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormalPointerEXT")]
            public static
            void BinormalPointer<T2>(OpenTK.Graphics.OpenGL.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[,,] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glBinormalPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glBinormalPointerEXT")]
            public static
            void BinormalPointer<T2>(OpenTK.Graphics.OpenGL.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T2 pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glBinormalPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T2)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_blend_color", Version = "1.0", EntryPoint = "glBlendColorEXT")]
            public static
            void BlendColor(Single red, Single green, Single blue, Single alpha)
            {
                Delegates.glBlendColorEXT((Single)red, (Single)green, (Single)blue, (Single)alpha);
            }

            [AutoGenerated(Category = "EXT_blend_minmax", Version = "1.0", EntryPoint = "glBlendEquationEXT")]
            public static
            void BlendEquation(OpenTK.Graphics.OpenGL.BlendEquationModeEXT mode)
            {
                Delegates.glBlendEquationEXT((OpenTK.Graphics.OpenGL.BlendEquationModeEXT)mode);
            }

            [AutoGenerated(Category = "EXT_blend_minmax", Version = "1.0", EntryPoint = "glBlendEquationEXT")]
            public static
            void BlendEquation(int mode)
            {
                Delegates.glBlendEquationEXT((OpenTK.Graphics.OpenGL.BlendEquationModeEXT)mode);
            }

            [AutoGenerated(Category = "EXT_blend_equation_separate", Version = "1.2", EntryPoint = "glBlendEquationSeparateEXT")]
            public static
            void BlendEquationSeparate(OpenTK.Graphics.OpenGL.BlendEquationModeEXT modeRGB, OpenTK.Graphics.OpenGL.BlendEquationModeEXT modeAlpha)
            {
                Delegates.glBlendEquationSeparateEXT((OpenTK.Graphics.OpenGL.BlendEquationModeEXT)modeRGB, (OpenTK.Graphics.OpenGL.BlendEquationModeEXT)modeAlpha);
            }

            [AutoGenerated(Category = "EXT_blend_equation_separate", Version = "1.2", EntryPoint = "glBlendEquationSeparateEXT")]
            public static
            void BlendEquationSeparate(int modeRGB, int modeAlpha)
            {
                Delegates.glBlendEquationSeparateEXT((OpenTK.Graphics.OpenGL.BlendEquationModeEXT)modeRGB, (OpenTK.Graphics.OpenGL.BlendEquationModeEXT)modeAlpha);
            }

            [AutoGenerated(Category = "EXT_blend_func_separate", Version = "1.0", EntryPoint = "glBlendFuncSeparateEXT")]
            public static
            void BlendFuncSeparate(OpenTK.Graphics.OpenGL.EXT_blend_func_separate sfactorRGB, OpenTK.Graphics.OpenGL.EXT_blend_func_separate dfactorRGB, OpenTK.Graphics.OpenGL.EXT_blend_func_separate sfactorAlpha, OpenTK.Graphics.OpenGL.EXT_blend_func_separate dfactorAlpha)
            {
                Delegates.glBlendFuncSeparateEXT((OpenTK.Graphics.OpenGL.EXT_blend_func_separate)sfactorRGB, (OpenTK.Graphics.OpenGL.EXT_blend_func_separate)dfactorRGB, (OpenTK.Graphics.OpenGL.EXT_blend_func_separate)sfactorAlpha, (OpenTK.Graphics.OpenGL.EXT_blend_func_separate)dfactorAlpha);
            }

            [AutoGenerated(Category = "EXT_blend_func_separate", Version = "1.0", EntryPoint = "glBlendFuncSeparateEXT")]
            public static
            void BlendFuncSeparate(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha)
            {
                Delegates.glBlendFuncSeparateEXT((OpenTK.Graphics.OpenGL.EXT_blend_func_separate)sfactorRGB, (OpenTK.Graphics.OpenGL.EXT_blend_func_separate)dfactorRGB, (OpenTK.Graphics.OpenGL.EXT_blend_func_separate)sfactorAlpha, (OpenTK.Graphics.OpenGL.EXT_blend_func_separate)dfactorAlpha);
            }

            [AutoGenerated(Category = "EXT_framebuffer_blit", Version = "1.5", EntryPoint = "glBlitFramebufferEXT")]
            public static
            void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.OpenGL.ClearBufferMask mask, OpenTK.Graphics.OpenGL.EXT_framebuffer_blit filter)
            {
                Delegates.glBlitFramebufferEXT((Int32)srcX0, (Int32)srcY0, (Int32)srcX1, (Int32)srcY1, (Int32)dstX0, (Int32)dstY0, (Int32)dstX1, (Int32)dstY1, (OpenTK.Graphics.OpenGL.ClearBufferMask)mask, (OpenTK.Graphics.OpenGL.EXT_framebuffer_blit)filter);
            }

            [AutoGenerated(Category = "EXT_framebuffer_blit", Version = "1.5", EntryPoint = "glBlitFramebufferEXT")]
            public static
            void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, int mask, int filter)
            {
                Delegates.glBlitFramebufferEXT((Int32)srcX0, (Int32)srcY0, (Int32)srcX1, (Int32)srcY1, (Int32)dstX0, (Int32)dstY0, (Int32)dstX1, (Int32)dstY1, (OpenTK.Graphics.OpenGL.ClearBufferMask)mask, (OpenTK.Graphics.OpenGL.EXT_framebuffer_blit)filter);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glCheckFramebufferStatusEXT")]
            public static
            OpenTK.Graphics.OpenGL.FramebufferErrorCode CheckFramebufferStatus(OpenTK.Graphics.OpenGL.FramebufferTarget target)
            {
                return Delegates.glCheckFramebufferStatusEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glCheckFramebufferStatusEXT")]
            public static
            OpenTK.Graphics.OpenGL.FramebufferErrorCode CheckFramebufferStatus(int target)
            {
                return Delegates.glCheckFramebufferStatusEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCheckNamedFramebufferStatusEXT")]
            public static
            OpenTK.Graphics.OpenGL.EXT_direct_state_access CheckNamedFramebufferStatus(Int32 framebuffer, OpenTK.Graphics.OpenGL.FramebufferTarget target)
            {
                return Delegates.glCheckNamedFramebufferStatusEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferTarget)target);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCheckNamedFramebufferStatusEXT")]
            public static
            OpenTK.Graphics.OpenGL.EXT_direct_state_access CheckNamedFramebufferStatus(Int32 framebuffer, int target)
            {
                return Delegates.glCheckNamedFramebufferStatusEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferTarget)target);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCheckNamedFramebufferStatusEXT")]
            public static
            OpenTK.Graphics.OpenGL.EXT_direct_state_access CheckNamedFramebufferStatus(UInt32 framebuffer, OpenTK.Graphics.OpenGL.FramebufferTarget target)
            {
                return Delegates.glCheckNamedFramebufferStatusEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferTarget)target);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCheckNamedFramebufferStatusEXT")]
            public static
            OpenTK.Graphics.OpenGL.EXT_direct_state_access CheckNamedFramebufferStatus(UInt32 framebuffer, int target)
            {
                return Delegates.glCheckNamedFramebufferStatusEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferTarget)target);
            }

            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glClearColorIiEXT")]
            public static
            void ClearColorI(Int32 red, Int32 green, Int32 blue, Int32 alpha)
            {
                Delegates.glClearColorIiEXT((Int32)red, (Int32)green, (Int32)blue, (Int32)alpha);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glClearColorIuiEXT")]
            public static
            void ClearColorI(UInt32 red, UInt32 green, UInt32 blue, UInt32 alpha)
            {
                Delegates.glClearColorIuiEXT((UInt32)red, (UInt32)green, (UInt32)blue, (UInt32)alpha);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClientAttribDefaultEXT")]
            public static
            void ClientAttribDefault(OpenTK.Graphics.OpenGL.ClientAttribMask mask)
            {
                Delegates.glClientAttribDefaultEXT((OpenTK.Graphics.OpenGL.ClientAttribMask)mask);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClientAttribDefaultEXT")]
            public static
            void ClientAttribDefault(int mask)
            {
                Delegates.glClientAttribDefaultEXT((OpenTK.Graphics.OpenGL.ClientAttribMask)mask);
            }

            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glColorMaskIndexedEXT")]
            public static
            void ColorMaskIndexed(Int32 index, bool r, bool g, bool b, bool a)
            {
                Delegates.glColorMaskIndexedEXT((UInt32)index, (bool)r, (bool)g, (bool)b, (bool)a);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glColorMaskIndexedEXT")]
            public static
            void ColorMaskIndexed(UInt32 index, bool r, bool g, bool b, bool a)
            {
                Delegates.glColorMaskIndexedEXT((UInt32)index, (bool)r, (bool)g, (bool)b, (bool)a);
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glColorPointerEXT")]
            public static
            void ColorPointer(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, Int32 count, IntPtr pointer)
            {
                Delegates.glColorPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glColorPointerEXT")]
            public static
            void ColorPointer<T4>(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T4[] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glColorPointerEXT")]
            public static
            void ColorPointer<T4>(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T4[,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glColorPointerEXT")]
            public static
            void ColorPointer<T4>(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T4[,,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glColorPointerEXT")]
            public static
            void ColorPointer<T4>(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, Int32 count, [InAttribute, OutAttribute] ref T4 pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T4)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glColorPointerEXT")]
            public static
            void ColorPointer(Int32 size, int type, Int32 stride, Int32 count, IntPtr pointer)
            {
                Delegates.glColorPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glColorPointerEXT")]
            public static
            void ColorPointer<T4>(Int32 size, int type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T4[] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glColorPointerEXT")]
            public static
            void ColorPointer<T4>(Int32 size, int type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T4[,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glColorPointerEXT")]
            public static
            void ColorPointer<T4>(Int32 size, int type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T4[,,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glColorPointerEXT")]
            public static
            void ColorPointer<T4>(Int32 size, int type, Int32 stride, Int32 count, [InAttribute, OutAttribute] ref T4 pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T4)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_color_subtable", Version = "1.2", EntryPoint = "glColorSubTableEXT")]
            public static
            void ColorSubTable(OpenTK.Graphics.OpenGL.ColorTableTarget target, Int32 start, Int32 count, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr data)
            {
                Delegates.glColorSubTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data);
            }

            [AutoGenerated(Category = "EXT_color_subtable", Version = "1.2", EntryPoint = "glColorSubTableEXT")]
            public static
            void ColorSubTable<T5>(OpenTK.Graphics.OpenGL.ColorTableTarget target, Int32 start, Int32 count, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[] data)
                where T5 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorSubTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_color_subtable", Version = "1.2", EntryPoint = "glColorSubTableEXT")]
            public static
            void ColorSubTable<T5>(OpenTK.Graphics.OpenGL.ColorTableTarget target, Int32 start, Int32 count, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[,] data)
                where T5 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorSubTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_color_subtable", Version = "1.2", EntryPoint = "glColorSubTableEXT")]
            public static
            void ColorSubTable<T5>(OpenTK.Graphics.OpenGL.ColorTableTarget target, Int32 start, Int32 count, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[,,] data)
                where T5 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorSubTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_color_subtable", Version = "1.2", EntryPoint = "glColorSubTableEXT")]
            public static
            void ColorSubTable<T5>(OpenTK.Graphics.OpenGL.ColorTableTarget target, Int32 start, Int32 count, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T5 data)
                where T5 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorSubTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T5)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_color_subtable", Version = "1.2", EntryPoint = "glColorSubTableEXT")]
            public static
            void ColorSubTable(int target, Int32 start, Int32 count, int format, int type, IntPtr data)
            {
                Delegates.glColorSubTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data);
            }

            [AutoGenerated(Category = "EXT_color_subtable", Version = "1.2", EntryPoint = "glColorSubTableEXT")]
            public static
            void ColorSubTable<T5>(int target, Int32 start, Int32 count, int format, int type, [InAttribute, OutAttribute] T5[] data)
                where T5 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorSubTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_color_subtable", Version = "1.2", EntryPoint = "glColorSubTableEXT")]
            public static
            void ColorSubTable<T5>(int target, Int32 start, Int32 count, int format, int type, [InAttribute, OutAttribute] T5[,] data)
                where T5 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorSubTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_color_subtable", Version = "1.2", EntryPoint = "glColorSubTableEXT")]
            public static
            void ColorSubTable<T5>(int target, Int32 start, Int32 count, int format, int type, [InAttribute, OutAttribute] T5[,,] data)
                where T5 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorSubTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_color_subtable", Version = "1.2", EntryPoint = "glColorSubTableEXT")]
            public static
            void ColorSubTable<T5>(int target, Int32 start, Int32 count, int format, int type, [InAttribute, OutAttribute] ref T5 data)
                where T5 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorSubTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T5)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glColorTableEXT")]
            public static
            void ColorTable(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalFormat, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr table)
            {
                Delegates.glColorTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalFormat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table);
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glColorTableEXT")]
            public static
            void ColorTable<T5>(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalFormat, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[] table)
                where T5 : struct
            {
                GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalFormat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    table_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glColorTableEXT")]
            public static
            void ColorTable<T5>(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalFormat, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[,] table)
                where T5 : struct
            {
                GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalFormat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    table_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glColorTableEXT")]
            public static
            void ColorTable<T5>(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalFormat, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[,,] table)
                where T5 : struct
            {
                GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalFormat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    table_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glColorTableEXT")]
            public static
            void ColorTable<T5>(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalFormat, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T5 table)
                where T5 : struct
            {
                GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalFormat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                    table = (T5)table_ptr.Target;
                }
                finally
                {
                    table_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glColorTableEXT")]
            public static
            void ColorTable(int target, int internalFormat, Int32 width, int format, int type, IntPtr table)
            {
                Delegates.glColorTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalFormat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table);
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glColorTableEXT")]
            public static
            void ColorTable<T5>(int target, int internalFormat, Int32 width, int format, int type, [InAttribute, OutAttribute] T5[] table)
                where T5 : struct
            {
                GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalFormat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    table_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glColorTableEXT")]
            public static
            void ColorTable<T5>(int target, int internalFormat, Int32 width, int format, int type, [InAttribute, OutAttribute] T5[,] table)
                where T5 : struct
            {
                GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalFormat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    table_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glColorTableEXT")]
            public static
            void ColorTable<T5>(int target, int internalFormat, Int32 width, int format, int type, [InAttribute, OutAttribute] T5[,,] table)
                where T5 : struct
            {
                GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalFormat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    table_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glColorTableEXT")]
            public static
            void ColorTable<T5>(int target, int internalFormat, Int32 width, int format, int type, [InAttribute, OutAttribute] ref T5 table)
                where T5 : struct
            {
                GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalFormat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                    table = (T5)table_ptr.Target;
                }
                finally
                {
                    table_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage1DEXT")]
            public static
            void CompressedMultiTexImage1D(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedMultiTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage1DEXT")]
            public static
            void CompressedMultiTexImage1D<T7>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage1DEXT")]
            public static
            void CompressedMultiTexImage1D<T7>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage1DEXT")]
            public static
            void CompressedMultiTexImage1D<T7>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage1DEXT")]
            public static
            void CompressedMultiTexImage1D<T7>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T7 bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T7)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage1DEXT")]
            public static
            void CompressedMultiTexImage1D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedMultiTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage1DEXT")]
            public static
            void CompressedMultiTexImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage1DEXT")]
            public static
            void CompressedMultiTexImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage1DEXT")]
            public static
            void CompressedMultiTexImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage1DEXT")]
            public static
            void CompressedMultiTexImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T7 bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T7)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage2DEXT")]
            public static
            void CompressedMultiTexImage2D(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedMultiTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage2DEXT")]
            public static
            void CompressedMultiTexImage2D<T8>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[] bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage2DEXT")]
            public static
            void CompressedMultiTexImage2D<T8>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,] bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage2DEXT")]
            public static
            void CompressedMultiTexImage2D<T8>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage2DEXT")]
            public static
            void CompressedMultiTexImage2D<T8>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T8 bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T8)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage2DEXT")]
            public static
            void CompressedMultiTexImage2D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedMultiTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage2DEXT")]
            public static
            void CompressedMultiTexImage2D<T8>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[] bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage2DEXT")]
            public static
            void CompressedMultiTexImage2D<T8>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,] bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage2DEXT")]
            public static
            void CompressedMultiTexImage2D<T8>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage2DEXT")]
            public static
            void CompressedMultiTexImage2D<T8>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T8 bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T8)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage3DEXT")]
            public static
            void CompressedMultiTexImage3D(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedMultiTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage3DEXT")]
            public static
            void CompressedMultiTexImage3D<T9>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T9[] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage3DEXT")]
            public static
            void CompressedMultiTexImage3D<T9>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T9[,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage3DEXT")]
            public static
            void CompressedMultiTexImage3D<T9>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T9[,,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage3DEXT")]
            public static
            void CompressedMultiTexImage3D<T9>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T9 bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T9)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage3DEXT")]
            public static
            void CompressedMultiTexImage3D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedMultiTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage3DEXT")]
            public static
            void CompressedMultiTexImage3D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T9[] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage3DEXT")]
            public static
            void CompressedMultiTexImage3D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T9[,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage3DEXT")]
            public static
            void CompressedMultiTexImage3D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T9[,,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage3DEXT")]
            public static
            void CompressedMultiTexImage3D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T9 bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T9)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
            public static
            void CompressedMultiTexSubImage1D(int texunit, int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedMultiTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
            public static
            void CompressedMultiTexSubImage1D<T7>(int texunit, int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [InAttribute, OutAttribute] T7[] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
            public static
            void CompressedMultiTexSubImage1D<T7>(int texunit, int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [InAttribute, OutAttribute] T7[,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
            public static
            void CompressedMultiTexSubImage1D<T7>(int texunit, int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
            public static
            void CompressedMultiTexSubImage1D<T7>(int texunit, int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [InAttribute, OutAttribute] ref T7 bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T7)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
            public static
            void CompressedMultiTexSubImage1D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedMultiTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
            public static
            void CompressedMultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T7[] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
            public static
            void CompressedMultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T7[,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
            public static
            void CompressedMultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
            public static
            void CompressedMultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T7 bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T7)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
            public static
            void CompressedMultiTexSubImage2D(int texunit, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedMultiTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
            public static
            void CompressedMultiTexSubImage2D<T9>(int texunit, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [InAttribute, OutAttribute] T9[] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
            public static
            void CompressedMultiTexSubImage2D<T9>(int texunit, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [InAttribute, OutAttribute] T9[,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
            public static
            void CompressedMultiTexSubImage2D<T9>(int texunit, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [InAttribute, OutAttribute] T9[,,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
            public static
            void CompressedMultiTexSubImage2D<T9>(int texunit, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [InAttribute, OutAttribute] ref T9 bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T9)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
            public static
            void CompressedMultiTexSubImage2D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedMultiTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
            public static
            void CompressedMultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T9[] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
            public static
            void CompressedMultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T9[,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
            public static
            void CompressedMultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T9[,,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
            public static
            void CompressedMultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T9 bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T9)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
            public static
            void CompressedMultiTexSubImage3D(int texunit, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedMultiTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
            public static
            void CompressedMultiTexSubImage3D<T11>(int texunit, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [InAttribute, OutAttribute] T11[] bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
            public static
            void CompressedMultiTexSubImage3D<T11>(int texunit, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [InAttribute, OutAttribute] T11[,] bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
            public static
            void CompressedMultiTexSubImage3D<T11>(int texunit, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [InAttribute, OutAttribute] T11[,,] bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
            public static
            void CompressedMultiTexSubImage3D<T11>(int texunit, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [InAttribute, OutAttribute] ref T11 bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T11)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
            public static
            void CompressedMultiTexSubImage3D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedMultiTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
            public static
            void CompressedMultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T11[] bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
            public static
            void CompressedMultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T11[,] bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
            public static
            void CompressedMultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T11[,,] bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
            public static
            void CompressedMultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T11 bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedMultiTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T11)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static
            void CompressedTextureImage1D(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static
            void CompressedTextureImage1D<T7>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static
            void CompressedTextureImage1D<T7>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static
            void CompressedTextureImage1D<T7>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static
            void CompressedTextureImage1D<T7>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T7 bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T7)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static
            void CompressedTextureImage1D(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static
            void CompressedTextureImage1D<T7>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static
            void CompressedTextureImage1D<T7>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static
            void CompressedTextureImage1D<T7>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static
            void CompressedTextureImage1D<T7>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T7 bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T7)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static
            void CompressedTextureImage1D(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static
            void CompressedTextureImage1D<T7>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static
            void CompressedTextureImage1D<T7>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static
            void CompressedTextureImage1D<T7>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static
            void CompressedTextureImage1D<T7>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T7 bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T7)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static
            void CompressedTextureImage1D(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static
            void CompressedTextureImage1D<T7>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static
            void CompressedTextureImage1D<T7>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static
            void CompressedTextureImage1D<T7>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static
            void CompressedTextureImage1D<T7>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T7 bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T7)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static
            void CompressedTextureImage2D(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static
            void CompressedTextureImage2D<T8>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[] bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static
            void CompressedTextureImage2D<T8>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,] bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static
            void CompressedTextureImage2D<T8>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static
            void CompressedTextureImage2D<T8>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T8 bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T8)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static
            void CompressedTextureImage2D(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static
            void CompressedTextureImage2D<T8>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[] bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static
            void CompressedTextureImage2D<T8>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,] bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static
            void CompressedTextureImage2D<T8>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static
            void CompressedTextureImage2D<T8>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T8 bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T8)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static
            void CompressedTextureImage2D(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static
            void CompressedTextureImage2D<T8>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[] bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static
            void CompressedTextureImage2D<T8>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,] bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static
            void CompressedTextureImage2D<T8>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static
            void CompressedTextureImage2D<T8>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T8 bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T8)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static
            void CompressedTextureImage2D(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static
            void CompressedTextureImage2D<T8>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[] bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static
            void CompressedTextureImage2D<T8>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,] bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static
            void CompressedTextureImage2D<T8>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static
            void CompressedTextureImage2D<T8>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T8 bits)
                where T8 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T8)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static
            void CompressedTextureImage3D(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static
            void CompressedTextureImage3D<T9>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T9[] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static
            void CompressedTextureImage3D<T9>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T9[,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static
            void CompressedTextureImage3D<T9>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T9[,,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static
            void CompressedTextureImage3D<T9>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T9 bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T9)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static
            void CompressedTextureImage3D(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static
            void CompressedTextureImage3D<T9>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T9[] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static
            void CompressedTextureImage3D<T9>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T9[,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static
            void CompressedTextureImage3D<T9>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T9[,,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static
            void CompressedTextureImage3D<T9>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T9 bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T9)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static
            void CompressedTextureImage3D(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static
            void CompressedTextureImage3D<T9>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T9[] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static
            void CompressedTextureImage3D<T9>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T9[,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static
            void CompressedTextureImage3D<T9>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T9[,,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static
            void CompressedTextureImage3D<T9>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T9 bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T9)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static
            void CompressedTextureImage3D(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static
            void CompressedTextureImage3D<T9>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T9[] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static
            void CompressedTextureImage3D<T9>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T9[,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static
            void CompressedTextureImage3D<T9>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T9[,,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static
            void CompressedTextureImage3D<T9>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T9 bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T9)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static
            void CompressedTextureSubImage1D(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static
            void CompressedTextureSubImage1D<T7>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [InAttribute, OutAttribute] T7[] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static
            void CompressedTextureSubImage1D<T7>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [InAttribute, OutAttribute] T7[,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static
            void CompressedTextureSubImage1D<T7>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static
            void CompressedTextureSubImage1D<T7>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [InAttribute, OutAttribute] ref T7 bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T7)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static
            void CompressedTextureSubImage1D(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static
            void CompressedTextureSubImage1D<T7>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T7[] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static
            void CompressedTextureSubImage1D<T7>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T7[,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static
            void CompressedTextureSubImage1D<T7>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static
            void CompressedTextureSubImage1D<T7>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T7 bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T7)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static
            void CompressedTextureSubImage1D(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static
            void CompressedTextureSubImage1D<T7>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [InAttribute, OutAttribute] T7[] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static
            void CompressedTextureSubImage1D<T7>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [InAttribute, OutAttribute] T7[,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static
            void CompressedTextureSubImage1D<T7>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static
            void CompressedTextureSubImage1D<T7>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 width, int format, Int32 imageSize, [InAttribute, OutAttribute] ref T7 bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T7)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static
            void CompressedTextureSubImage1D(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static
            void CompressedTextureSubImage1D<T7>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T7[] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static
            void CompressedTextureSubImage1D<T7>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T7[,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static
            void CompressedTextureSubImage1D<T7>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static
            void CompressedTextureSubImage1D<T7>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T7 bits)
                where T7 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T7)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static
            void CompressedTextureSubImage2D(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static
            void CompressedTextureSubImage2D<T9>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [InAttribute, OutAttribute] T9[] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static
            void CompressedTextureSubImage2D<T9>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [InAttribute, OutAttribute] T9[,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static
            void CompressedTextureSubImage2D<T9>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [InAttribute, OutAttribute] T9[,,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static
            void CompressedTextureSubImage2D<T9>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [InAttribute, OutAttribute] ref T9 bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T9)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static
            void CompressedTextureSubImage2D(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static
            void CompressedTextureSubImage2D<T9>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T9[] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static
            void CompressedTextureSubImage2D<T9>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T9[,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static
            void CompressedTextureSubImage2D<T9>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T9[,,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static
            void CompressedTextureSubImage2D<T9>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T9 bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T9)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static
            void CompressedTextureSubImage2D(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static
            void CompressedTextureSubImage2D<T9>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [InAttribute, OutAttribute] T9[] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static
            void CompressedTextureSubImage2D<T9>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [InAttribute, OutAttribute] T9[,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static
            void CompressedTextureSubImage2D<T9>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [InAttribute, OutAttribute] T9[,,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static
            void CompressedTextureSubImage2D<T9>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, Int32 imageSize, [InAttribute, OutAttribute] ref T9 bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T9)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static
            void CompressedTextureSubImage2D(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static
            void CompressedTextureSubImage2D<T9>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T9[] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static
            void CompressedTextureSubImage2D<T9>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T9[,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static
            void CompressedTextureSubImage2D<T9>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T9[,,] bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static
            void CompressedTextureSubImage2D<T9>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T9 bits)
                where T9 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T9)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static
            void CompressedTextureSubImage3D(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static
            void CompressedTextureSubImage3D<T11>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [InAttribute, OutAttribute] T11[] bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static
            void CompressedTextureSubImage3D<T11>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [InAttribute, OutAttribute] T11[,] bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static
            void CompressedTextureSubImage3D<T11>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [InAttribute, OutAttribute] T11[,,] bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static
            void CompressedTextureSubImage3D<T11>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [InAttribute, OutAttribute] ref T11 bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T11)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static
            void CompressedTextureSubImage3D(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static
            void CompressedTextureSubImage3D<T11>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T11[] bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static
            void CompressedTextureSubImage3D<T11>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T11[,] bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static
            void CompressedTextureSubImage3D<T11>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T11[,,] bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static
            void CompressedTextureSubImage3D<T11>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T11 bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T11)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static
            void CompressedTextureSubImage3D(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static
            void CompressedTextureSubImage3D<T11>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [InAttribute, OutAttribute] T11[] bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static
            void CompressedTextureSubImage3D<T11>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [InAttribute, OutAttribute] T11[,] bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static
            void CompressedTextureSubImage3D<T11>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [InAttribute, OutAttribute] T11[,,] bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static
            void CompressedTextureSubImage3D<T11>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, Int32 imageSize, [InAttribute, OutAttribute] ref T11 bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T11)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static
            void CompressedTextureSubImage3D(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static
            void CompressedTextureSubImage3D<T11>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T11[] bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static
            void CompressedTextureSubImage3D<T11>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T11[,] bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static
            void CompressedTextureSubImage3D<T11>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T11[,,] bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static
            void CompressedTextureSubImage3D<T11>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T11 bits)
                where T11 : struct
            {
                GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    bits = (T11)bits_ptr.Target;
                }
                finally
                {
                    bits_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionFilter1DEXT")]
            public static
            void ConvolutionFilter1D(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr image)
            {
                Delegates.glConvolutionFilter1DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionFilter1DEXT")]
            public static
            void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[] image)
                where T5 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter1DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionFilter1DEXT")]
            public static
            void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[,] image)
                where T5 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter1DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionFilter1DEXT")]
            public static
            void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[,,] image)
                where T5 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter1DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionFilter1DEXT")]
            public static
            void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T5 image)
                where T5 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter1DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                    image = (T5)image_ptr.Target;
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionFilter1DEXT")]
            public static
            void ConvolutionFilter1D(int target, int internalformat, Int32 width, int format, int type, IntPtr image)
            {
                Delegates.glConvolutionFilter1DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionFilter1DEXT")]
            public static
            void ConvolutionFilter1D<T5>(int target, int internalformat, Int32 width, int format, int type, [InAttribute, OutAttribute] T5[] image)
                where T5 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter1DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionFilter1DEXT")]
            public static
            void ConvolutionFilter1D<T5>(int target, int internalformat, Int32 width, int format, int type, [InAttribute, OutAttribute] T5[,] image)
                where T5 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter1DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionFilter1DEXT")]
            public static
            void ConvolutionFilter1D<T5>(int target, int internalformat, Int32 width, int format, int type, [InAttribute, OutAttribute] T5[,,] image)
                where T5 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter1DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionFilter1DEXT")]
            public static
            void ConvolutionFilter1D<T5>(int target, int internalformat, Int32 width, int format, int type, [InAttribute, OutAttribute] ref T5 image)
                where T5 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter1DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                    image = (T5)image_ptr.Target;
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionFilter2DEXT")]
            public static
            void ConvolutionFilter2D(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr image)
            {
                Delegates.glConvolutionFilter2DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionFilter2DEXT")]
            public static
            void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[] image)
                where T6 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter2DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionFilter2DEXT")]
            public static
            void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,] image)
                where T6 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter2DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionFilter2DEXT")]
            public static
            void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,,] image)
                where T6 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter2DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionFilter2DEXT")]
            public static
            void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T6 image)
                where T6 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter2DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                    image = (T6)image_ptr.Target;
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionFilter2DEXT")]
            public static
            void ConvolutionFilter2D(int target, int internalformat, Int32 width, Int32 height, int format, int type, IntPtr image)
            {
                Delegates.glConvolutionFilter2DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionFilter2DEXT")]
            public static
            void ConvolutionFilter2D<T6>(int target, int internalformat, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T6[] image)
                where T6 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter2DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionFilter2DEXT")]
            public static
            void ConvolutionFilter2D<T6>(int target, int internalformat, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T6[,] image)
                where T6 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter2DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionFilter2DEXT")]
            public static
            void ConvolutionFilter2D<T6>(int target, int internalformat, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T6[,,] image)
                where T6 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter2DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionFilter2DEXT")]
            public static
            void ConvolutionFilter2D<T6>(int target, int internalformat, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] ref T6 image)
                where T6 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter2DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                    image = (T6)image_ptr.Target;
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionParameterfEXT")]
            public static
            void ConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.ConvolutionParameterEXT pname, Single @params)
            {
                Delegates.glConvolutionParameterfEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Single)@params);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionParameterfEXT")]
            public static
            void ConvolutionParameter(int target, int pname, Single @params)
            {
                Delegates.glConvolutionParameterfEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Single)@params);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionParameterfvEXT")]
            public static
            void ConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.ConvolutionParameterEXT pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glConvolutionParameterfvEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionParameterfvEXT")]
            public static
            unsafe void ConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.ConvolutionParameterEXT pname, Single* @params)
            {
                Delegates.glConvolutionParameterfvEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionParameterfvEXT")]
            public static
            void ConvolutionParameter(int target, int pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glConvolutionParameterfvEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionParameterfvEXT")]
            public static
            unsafe void ConvolutionParameter(int target, int pname, Single* @params)
            {
                Delegates.glConvolutionParameterfvEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionParameteriEXT")]
            public static
            void ConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.ConvolutionParameterEXT pname, Int32 @params)
            {
                Delegates.glConvolutionParameteriEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Int32)@params);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionParameteriEXT")]
            public static
            void ConvolutionParameter(int target, int pname, Int32 @params)
            {
                Delegates.glConvolutionParameteriEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Int32)@params);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionParameterivEXT")]
            public static
            void ConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.ConvolutionParameterEXT pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glConvolutionParameterivEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionParameterivEXT")]
            public static
            unsafe void ConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.ConvolutionParameterEXT pname, Int32* @params)
            {
                Delegates.glConvolutionParameterivEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionParameterivEXT")]
            public static
            void ConvolutionParameter(int target, int pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glConvolutionParameterivEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glConvolutionParameterivEXT")]
            public static
            unsafe void ConvolutionParameter(int target, int pname, Int32* @params)
            {
                Delegates.glConvolutionParameterivEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_color_subtable", Version = "1.2", EntryPoint = "glCopyColorSubTableEXT")]
            public static
            void CopyColorSubTable(OpenTK.Graphics.OpenGL.ColorTableTarget target, Int32 start, Int32 x, Int32 y, Int32 width)
            {
                Delegates.glCopyColorSubTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)x, (Int32)y, (Int32)width);
            }

            [AutoGenerated(Category = "EXT_color_subtable", Version = "1.2", EntryPoint = "glCopyColorSubTableEXT")]
            public static
            void CopyColorSubTable(int target, Int32 start, Int32 x, Int32 y, Int32 width)
            {
                Delegates.glCopyColorSubTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)x, (Int32)y, (Int32)width);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glCopyConvolutionFilter1DEXT")]
            public static
            void CopyConvolutionFilter1D(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width)
            {
                Delegates.glCopyConvolutionFilter1DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glCopyConvolutionFilter1DEXT")]
            public static
            void CopyConvolutionFilter1D(int target, int internalformat, Int32 x, Int32 y, Int32 width)
            {
                Delegates.glCopyConvolutionFilter1DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glCopyConvolutionFilter2DEXT")]
            public static
            void CopyConvolutionFilter2D(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyConvolutionFilter2DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glCopyConvolutionFilter2DEXT")]
            public static
            void CopyConvolutionFilter2D(int target, int internalformat, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyConvolutionFilter2DEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyMultiTexImage1DEXT")]
            public static
            void CopyMultiTexImage1D(int texunit, int target, Int32 level, int internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
            {
                Delegates.glCopyMultiTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyMultiTexImage1DEXT")]
            public static
            void CopyMultiTexImage1D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
            {
                Delegates.glCopyMultiTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyMultiTexImage2DEXT")]
            public static
            void CopyMultiTexImage2D(int texunit, int target, Int32 level, int internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
            {
                Delegates.glCopyMultiTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyMultiTexImage2DEXT")]
            public static
            void CopyMultiTexImage2D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
            {
                Delegates.glCopyMultiTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyMultiTexSubImage1DEXT")]
            public static
            void CopyMultiTexSubImage1D(int texunit, int target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
            {
                Delegates.glCopyMultiTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyMultiTexSubImage1DEXT")]
            public static
            void CopyMultiTexSubImage1D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
            {
                Delegates.glCopyMultiTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyMultiTexSubImage2DEXT")]
            public static
            void CopyMultiTexSubImage2D(int texunit, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyMultiTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyMultiTexSubImage2DEXT")]
            public static
            void CopyMultiTexSubImage2D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyMultiTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyMultiTexSubImage3DEXT")]
            public static
            void CopyMultiTexSubImage3D(int texunit, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyMultiTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyMultiTexSubImage3DEXT")]
            public static
            void CopyMultiTexSubImage3D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyMultiTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_copy_texture", Version = "1.0", EntryPoint = "glCopyTexImage1DEXT")]
            public static
            void CopyTexImage1D(int target, Int32 level, int internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
            {
                Delegates.glCopyTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
            }

            [AutoGenerated(Category = "EXT_copy_texture", Version = "1.0", EntryPoint = "glCopyTexImage1DEXT")]
            public static
            void CopyTexImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
            {
                Delegates.glCopyTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
            }

            [AutoGenerated(Category = "EXT_copy_texture", Version = "1.0", EntryPoint = "glCopyTexImage2DEXT")]
            public static
            void CopyTexImage2D(int target, Int32 level, int internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
            {
                Delegates.glCopyTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
            }

            [AutoGenerated(Category = "EXT_copy_texture", Version = "1.0", EntryPoint = "glCopyTexImage2DEXT")]
            public static
            void CopyTexImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
            {
                Delegates.glCopyTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
            }

            [AutoGenerated(Category = "EXT_copy_texture", Version = "1.0", EntryPoint = "glCopyTexSubImage1DEXT")]
            public static
            void CopyTexSubImage1D(int target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
            {
                Delegates.glCopyTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
            }

            [AutoGenerated(Category = "EXT_copy_texture", Version = "1.0", EntryPoint = "glCopyTexSubImage1DEXT")]
            public static
            void CopyTexSubImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
            {
                Delegates.glCopyTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
            }

            [AutoGenerated(Category = "EXT_copy_texture", Version = "1.0", EntryPoint = "glCopyTexSubImage2DEXT")]
            public static
            void CopyTexSubImage2D(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_copy_texture", Version = "1.0", EntryPoint = "glCopyTexSubImage2DEXT")]
            public static
            void CopyTexSubImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_copy_texture", Version = "1.0", EntryPoint = "glCopyTexSubImage3DEXT")]
            public static
            void CopyTexSubImage3D(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_copy_texture", Version = "1.0", EntryPoint = "glCopyTexSubImage3DEXT")]
            public static
            void CopyTexSubImage3D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureImage1DEXT")]
            public static
            void CopyTextureImage1D(Int32 texture, int target, Int32 level, int internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
            {
                Delegates.glCopyTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureImage1DEXT")]
            public static
            void CopyTextureImage1D(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
            {
                Delegates.glCopyTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureImage1DEXT")]
            public static
            void CopyTextureImage1D(UInt32 texture, int target, Int32 level, int internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
            {
                Delegates.glCopyTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureImage1DEXT")]
            public static
            void CopyTextureImage1D(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
            {
                Delegates.glCopyTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureImage2DEXT")]
            public static
            void CopyTextureImage2D(Int32 texture, int target, Int32 level, int internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
            {
                Delegates.glCopyTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureImage2DEXT")]
            public static
            void CopyTextureImage2D(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
            {
                Delegates.glCopyTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureImage2DEXT")]
            public static
            void CopyTextureImage2D(UInt32 texture, int target, Int32 level, int internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
            {
                Delegates.glCopyTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureImage2DEXT")]
            public static
            void CopyTextureImage2D(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
            {
                Delegates.glCopyTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureSubImage1DEXT")]
            public static
            void CopyTextureSubImage1D(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
            {
                Delegates.glCopyTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureSubImage1DEXT")]
            public static
            void CopyTextureSubImage1D(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
            {
                Delegates.glCopyTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureSubImage1DEXT")]
            public static
            void CopyTextureSubImage1D(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
            {
                Delegates.glCopyTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureSubImage1DEXT")]
            public static
            void CopyTextureSubImage1D(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
            {
                Delegates.glCopyTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureSubImage2DEXT")]
            public static
            void CopyTextureSubImage2D(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureSubImage2DEXT")]
            public static
            void CopyTextureSubImage2D(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureSubImage2DEXT")]
            public static
            void CopyTextureSubImage2D(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureSubImage2DEXT")]
            public static
            void CopyTextureSubImage2D(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureSubImage3DEXT")]
            public static
            void CopyTextureSubImage3D(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureSubImage3DEXT")]
            public static
            void CopyTextureSubImage3D(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureSubImage3DEXT")]
            public static
            void CopyTextureSubImage3D(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureSubImage3DEXT")]
            public static
            void CopyTextureSubImage3D(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_cull_vertex", Version = "1.1", EntryPoint = "glCullParameterdvEXT")]
            public static
            void CullParameter(OpenTK.Graphics.OpenGL.EXT_cull_vertex pname, [OutAttribute] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glCullParameterdvEXT((OpenTK.Graphics.OpenGL.EXT_cull_vertex)pname, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_cull_vertex", Version = "1.1", EntryPoint = "glCullParameterdvEXT")]
            public static
            void CullParameter(OpenTK.Graphics.OpenGL.EXT_cull_vertex pname, [OutAttribute] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glCullParameterdvEXT((OpenTK.Graphics.OpenGL.EXT_cull_vertex)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_cull_vertex", Version = "1.1", EntryPoint = "glCullParameterdvEXT")]
            public static
            unsafe void CullParameter(OpenTK.Graphics.OpenGL.EXT_cull_vertex pname, [OutAttribute] Double* @params)
            {
                Delegates.glCullParameterdvEXT((OpenTK.Graphics.OpenGL.EXT_cull_vertex)pname, (Double*)@params);
            }

            [AutoGenerated(Category = "EXT_cull_vertex", Version = "1.1", EntryPoint = "glCullParameterdvEXT")]
            public static
            void CullParameter(int pname, [OutAttribute] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glCullParameterdvEXT((OpenTK.Graphics.OpenGL.EXT_cull_vertex)pname, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_cull_vertex", Version = "1.1", EntryPoint = "glCullParameterdvEXT")]
            public static
            void CullParameter(int pname, [OutAttribute] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glCullParameterdvEXT((OpenTK.Graphics.OpenGL.EXT_cull_vertex)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_cull_vertex", Version = "1.1", EntryPoint = "glCullParameterdvEXT")]
            public static
            unsafe void CullParameter(int pname, [OutAttribute] Double* @params)
            {
                Delegates.glCullParameterdvEXT((OpenTK.Graphics.OpenGL.EXT_cull_vertex)pname, (Double*)@params);
            }

            [AutoGenerated(Category = "EXT_cull_vertex", Version = "1.1", EntryPoint = "glCullParameterfvEXT")]
            public static
            void CullParameter(OpenTK.Graphics.OpenGL.EXT_cull_vertex pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glCullParameterfvEXT((OpenTK.Graphics.OpenGL.EXT_cull_vertex)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_cull_vertex", Version = "1.1", EntryPoint = "glCullParameterfvEXT")]
            public static
            void CullParameter(OpenTK.Graphics.OpenGL.EXT_cull_vertex pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glCullParameterfvEXT((OpenTK.Graphics.OpenGL.EXT_cull_vertex)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_cull_vertex", Version = "1.1", EntryPoint = "glCullParameterfvEXT")]
            public static
            unsafe void CullParameter(OpenTK.Graphics.OpenGL.EXT_cull_vertex pname, [OutAttribute] Single* @params)
            {
                Delegates.glCullParameterfvEXT((OpenTK.Graphics.OpenGL.EXT_cull_vertex)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_cull_vertex", Version = "1.1", EntryPoint = "glCullParameterfvEXT")]
            public static
            void CullParameter(int pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glCullParameterfvEXT((OpenTK.Graphics.OpenGL.EXT_cull_vertex)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_cull_vertex", Version = "1.1", EntryPoint = "glCullParameterfvEXT")]
            public static
            void CullParameter(int pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glCullParameterfvEXT((OpenTK.Graphics.OpenGL.EXT_cull_vertex)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_cull_vertex", Version = "1.1", EntryPoint = "glCullParameterfvEXT")]
            public static
            unsafe void CullParameter(int pname, [OutAttribute] Single* @params)
            {
                Delegates.glCullParameterfvEXT((OpenTK.Graphics.OpenGL.EXT_cull_vertex)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glDeleteFramebuffersEXT")]
            public static
            void DeleteFramebuffers(Int32 n, Int32[] framebuffers)
            {
                unsafe
                {
                    fixed (Int32* framebuffers_ptr = framebuffers)
                    {
                        Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glDeleteFramebuffersEXT")]
            public static
            void DeleteFramebuffers(Int32 n, ref Int32 framebuffers)
            {
                unsafe
                {
                    fixed (Int32* framebuffers_ptr = &framebuffers)
                    {
                        Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glDeleteFramebuffersEXT")]
            public static
            unsafe void DeleteFramebuffers(Int32 n, Int32* framebuffers)
            {
                Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glDeleteFramebuffersEXT")]
            public static
            void DeleteFramebuffers(Int32 n, UInt32[] framebuffers)
            {
                unsafe
                {
                    fixed (UInt32* framebuffers_ptr = framebuffers)
                    {
                        Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glDeleteFramebuffersEXT")]
            public static
            void DeleteFramebuffers(Int32 n, ref UInt32 framebuffers)
            {
                unsafe
                {
                    fixed (UInt32* framebuffers_ptr = &framebuffers)
                    {
                        Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glDeleteFramebuffersEXT")]
            public static
            unsafe void DeleteFramebuffers(Int32 n, UInt32* framebuffers)
            {
                Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glDeleteRenderbuffersEXT")]
            public static
            void DeleteRenderbuffers(Int32 n, Int32[] renderbuffers)
            {
                unsafe
                {
                    fixed (Int32* renderbuffers_ptr = renderbuffers)
                    {
                        Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glDeleteRenderbuffersEXT")]
            public static
            void DeleteRenderbuffers(Int32 n, ref Int32 renderbuffers)
            {
                unsafe
                {
                    fixed (Int32* renderbuffers_ptr = &renderbuffers)
                    {
                        Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glDeleteRenderbuffersEXT")]
            public static
            unsafe void DeleteRenderbuffers(Int32 n, Int32* renderbuffers)
            {
                Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glDeleteRenderbuffersEXT")]
            public static
            void DeleteRenderbuffers(Int32 n, UInt32[] renderbuffers)
            {
                unsafe
                {
                    fixed (UInt32* renderbuffers_ptr = renderbuffers)
                    {
                        Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glDeleteRenderbuffersEXT")]
            public static
            void DeleteRenderbuffers(Int32 n, ref UInt32 renderbuffers)
            {
                unsafe
                {
                    fixed (UInt32* renderbuffers_ptr = &renderbuffers)
                    {
                        Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glDeleteRenderbuffersEXT")]
            public static
            unsafe void DeleteRenderbuffers(Int32 n, UInt32* renderbuffers)
            {
                Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers);
            }

            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glDeleteTexturesEXT")]
            public static
            void DeleteTextures(Int32 n, Int32[] textures)
            {
                unsafe
                {
                    fixed (Int32* textures_ptr = textures)
                    {
                        Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glDeleteTexturesEXT")]
            public static
            void DeleteTextures(Int32 n, ref Int32 textures)
            {
                unsafe
                {
                    fixed (Int32* textures_ptr = &textures)
                    {
                        Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glDeleteTexturesEXT")]
            public static
            unsafe void DeleteTextures(Int32 n, Int32* textures)
            {
                Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glDeleteTexturesEXT")]
            public static
            void DeleteTextures(Int32 n, UInt32[] textures)
            {
                unsafe
                {
                    fixed (UInt32* textures_ptr = textures)
                    {
                        Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glDeleteTexturesEXT")]
            public static
            void DeleteTextures(Int32 n, ref UInt32 textures)
            {
                unsafe
                {
                    fixed (UInt32* textures_ptr = &textures)
                    {
                        Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glDeleteTexturesEXT")]
            public static
            unsafe void DeleteTextures(Int32 n, UInt32* textures)
            {
                Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glDeleteVertexShaderEXT")]
            public static
            void DeleteVertexShader(Int32 id)
            {
                Delegates.glDeleteVertexShaderEXT((UInt32)id);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glDeleteVertexShaderEXT")]
            public static
            void DeleteVertexShader(UInt32 id)
            {
                Delegates.glDeleteVertexShaderEXT((UInt32)id);
            }

            [AutoGenerated(Category = "EXT_depth_bounds_test", Version = "1.2", EntryPoint = "glDepthBoundsEXT")]
            public static
            void DepthBounds(Double zmin, Double zmax)
            {
                Delegates.glDepthBoundsEXT((Double)zmin, (Double)zmax);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glDisableClientStateIndexedEXT")]
            public static
            void DisableClientStateIndexed(OpenTK.Graphics.OpenGL.EnableCap array, Int32 index)
            {
                Delegates.glDisableClientStateIndexedEXT((OpenTK.Graphics.OpenGL.EnableCap)array, (UInt32)index);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glDisableClientStateIndexedEXT")]
            public static
            void DisableClientStateIndexed(OpenTK.Graphics.OpenGL.EnableCap array, UInt32 index)
            {
                Delegates.glDisableClientStateIndexedEXT((OpenTK.Graphics.OpenGL.EnableCap)array, (UInt32)index);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glDisableClientStateIndexedEXT")]
            public static
            void DisableClientStateIndexed(int array, Int32 index)
            {
                Delegates.glDisableClientStateIndexedEXT((OpenTK.Graphics.OpenGL.EnableCap)array, (UInt32)index);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glDisableClientStateIndexedEXT")]
            public static
            void DisableClientStateIndexed(int array, UInt32 index)
            {
                Delegates.glDisableClientStateIndexedEXT((OpenTK.Graphics.OpenGL.EnableCap)array, (UInt32)index);
            }

            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glDisableIndexedEXT")]
            public static
            void DisableIndexed(OpenTK.Graphics.OpenGL.EXT_draw_buffers2 target, Int32 index)
            {
                Delegates.glDisableIndexedEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glDisableIndexedEXT")]
            public static
            void DisableIndexed(OpenTK.Graphics.OpenGL.EXT_draw_buffers2 target, UInt32 index)
            {
                Delegates.glDisableIndexedEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index);
            }

            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glDisableIndexedEXT")]
            public static
            void DisableIndexed(int target, Int32 index)
            {
                Delegates.glDisableIndexedEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glDisableIndexedEXT")]
            public static
            void DisableIndexed(int target, UInt32 index)
            {
                Delegates.glDisableIndexedEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glDisableVariantClientStateEXT")]
            public static
            void DisableVariantClientState(Int32 id)
            {
                Delegates.glDisableVariantClientStateEXT((UInt32)id);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glDisableVariantClientStateEXT")]
            public static
            void DisableVariantClientState(UInt32 id)
            {
                Delegates.glDisableVariantClientStateEXT((UInt32)id);
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glDrawArraysEXT")]
            public static
            void DrawArrays(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 first, Int32 count)
            {
                Delegates.glDrawArraysEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)first, (Int32)count);
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glDrawArraysEXT")]
            public static
            void DrawArrays(int mode, Int32 first, Int32 count)
            {
                Delegates.glDrawArraysEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)first, (Int32)count);
            }

            [AutoGenerated(Category = "EXT_draw_instanced", Version = "2.0", EntryPoint = "glDrawArraysInstancedEXT")]
            public static
            void DrawArraysInstanced(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 start, Int32 count, Int32 primcount)
            {
                Delegates.glDrawArraysInstancedEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)start, (Int32)count, (Int32)primcount);
            }

            [AutoGenerated(Category = "EXT_draw_instanced", Version = "2.0", EntryPoint = "glDrawArraysInstancedEXT")]
            public static
            void DrawArraysInstanced(int mode, Int32 start, Int32 count, Int32 primcount)
            {
                Delegates.glDrawArraysInstancedEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)start, (Int32)count, (Int32)primcount);
            }

            [AutoGenerated(Category = "EXT_draw_instanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedEXT")]
            public static
            void DrawElementsInstanced(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices, Int32 primcount)
            {
                Delegates.glDrawElementsInstancedEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
            }

            [AutoGenerated(Category = "EXT_draw_instanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedEXT")]
            public static
            void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstancedEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_draw_instanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedEXT")]
            public static
            void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstancedEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_draw_instanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedEXT")]
            public static
            void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstancedEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_draw_instanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedEXT")]
            public static
            void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstancedEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    indices = (T3)indices_ptr.Target;
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_draw_instanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedEXT")]
            public static
            void DrawElementsInstanced(int mode, Int32 count, int type, IntPtr indices, Int32 primcount)
            {
                Delegates.glDrawElementsInstancedEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
            }

            [AutoGenerated(Category = "EXT_draw_instanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedEXT")]
            public static
            void DrawElementsInstanced<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstancedEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_draw_instanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedEXT")]
            public static
            void DrawElementsInstanced<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstancedEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_draw_instanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedEXT")]
            public static
            void DrawElementsInstanced<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstancedEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_draw_instanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedEXT")]
            public static
            void DrawElementsInstanced<T3>(int mode, Int32 count, int type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstancedEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    indices = (T3)indices_ptr.Target;
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_draw_range_elements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static
            void DrawRangeElements(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices)
            {
                Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices);
            }

            [AutoGenerated(Category = "EXT_draw_range_elements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static
            void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T5[] indices)
                where T5 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_draw_range_elements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static
            void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T5[,] indices)
                where T5 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_draw_range_elements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static
            void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T5[,,] indices)
                where T5 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_draw_range_elements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static
            void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T5 indices)
                where T5 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                    indices = (T5)indices_ptr.Target;
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_range_elements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static
            void DrawRangeElements(OpenTK.Graphics.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices)
            {
                Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_range_elements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static
            void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T5[] indices)
                where T5 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_range_elements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static
            void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T5[,] indices)
                where T5 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_range_elements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static
            void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T5[,,] indices)
                where T5 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_range_elements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static
            void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T5 indices)
                where T5 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                    indices = (T5)indices_ptr.Target;
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_draw_range_elements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static
            void DrawRangeElements(int mode, Int32 start, Int32 end, Int32 count, int type, IntPtr indices)
            {
                Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices);
            }

            [AutoGenerated(Category = "EXT_draw_range_elements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static
            void DrawRangeElements<T5>(int mode, Int32 start, Int32 end, Int32 count, int type, [InAttribute, OutAttribute] T5[] indices)
                where T5 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_draw_range_elements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static
            void DrawRangeElements<T5>(int mode, Int32 start, Int32 end, Int32 count, int type, [InAttribute, OutAttribute] T5[,] indices)
                where T5 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_draw_range_elements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static
            void DrawRangeElements<T5>(int mode, Int32 start, Int32 end, Int32 count, int type, [InAttribute, OutAttribute] T5[,,] indices)
                where T5 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_draw_range_elements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static
            void DrawRangeElements<T5>(int mode, Int32 start, Int32 end, Int32 count, int type, [InAttribute, OutAttribute] ref T5 indices)
                where T5 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                    indices = (T5)indices_ptr.Target;
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_range_elements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static
            void DrawRangeElements(int mode, UInt32 start, UInt32 end, Int32 count, int type, IntPtr indices)
            {
                Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_range_elements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static
            void DrawRangeElements<T5>(int mode, UInt32 start, UInt32 end, Int32 count, int type, [InAttribute, OutAttribute] T5[] indices)
                where T5 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_range_elements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static
            void DrawRangeElements<T5>(int mode, UInt32 start, UInt32 end, Int32 count, int type, [InAttribute, OutAttribute] T5[,] indices)
                where T5 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_range_elements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static
            void DrawRangeElements<T5>(int mode, UInt32 start, UInt32 end, Int32 count, int type, [InAttribute, OutAttribute] T5[,,] indices)
                where T5 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_range_elements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static
            void DrawRangeElements<T5>(int mode, UInt32 start, UInt32 end, Int32 count, int type, [InAttribute, OutAttribute] ref T5 indices)
                where T5 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                    indices = (T5)indices_ptr.Target;
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glEdgeFlagPointerEXT")]
            public static
            void EdgeFlagPointer(Int32 stride, Int32 count, bool[] pointer)
            {
                unsafe
                {
                    fixed (bool* pointer_ptr = pointer)
                    {
                        Delegates.glEdgeFlagPointerEXT((Int32)stride, (Int32)count, (bool*)pointer_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glEdgeFlagPointerEXT")]
            public static
            void EdgeFlagPointer(Int32 stride, Int32 count, ref bool pointer)
            {
                unsafe
                {
                    fixed (bool* pointer_ptr = &pointer)
                    {
                        Delegates.glEdgeFlagPointerEXT((Int32)stride, (Int32)count, (bool*)pointer_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glEdgeFlagPointerEXT")]
            public static
            unsafe void EdgeFlagPointer(Int32 stride, Int32 count, bool* pointer)
            {
                Delegates.glEdgeFlagPointerEXT((Int32)stride, (Int32)count, (bool*)pointer);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glEnableClientStateIndexedEXT")]
            public static
            void EnableClientStateIndexed(OpenTK.Graphics.OpenGL.EnableCap array, Int32 index)
            {
                Delegates.glEnableClientStateIndexedEXT((OpenTK.Graphics.OpenGL.EnableCap)array, (UInt32)index);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glEnableClientStateIndexedEXT")]
            public static
            void EnableClientStateIndexed(OpenTK.Graphics.OpenGL.EnableCap array, UInt32 index)
            {
                Delegates.glEnableClientStateIndexedEXT((OpenTK.Graphics.OpenGL.EnableCap)array, (UInt32)index);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glEnableClientStateIndexedEXT")]
            public static
            void EnableClientStateIndexed(int array, Int32 index)
            {
                Delegates.glEnableClientStateIndexedEXT((OpenTK.Graphics.OpenGL.EnableCap)array, (UInt32)index);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glEnableClientStateIndexedEXT")]
            public static
            void EnableClientStateIndexed(int array, UInt32 index)
            {
                Delegates.glEnableClientStateIndexedEXT((OpenTK.Graphics.OpenGL.EnableCap)array, (UInt32)index);
            }

            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glEnableIndexedEXT")]
            public static
            void EnableIndexed(OpenTK.Graphics.OpenGL.EXT_draw_buffers2 target, Int32 index)
            {
                Delegates.glEnableIndexedEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glEnableIndexedEXT")]
            public static
            void EnableIndexed(OpenTK.Graphics.OpenGL.EXT_draw_buffers2 target, UInt32 index)
            {
                Delegates.glEnableIndexedEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index);
            }

            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glEnableIndexedEXT")]
            public static
            void EnableIndexed(int target, Int32 index)
            {
                Delegates.glEnableIndexedEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glEnableIndexedEXT")]
            public static
            void EnableIndexed(int target, UInt32 index)
            {
                Delegates.glEnableIndexedEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glEnableVariantClientStateEXT")]
            public static
            void EnableVariantClientState(Int32 id)
            {
                Delegates.glEnableVariantClientStateEXT((UInt32)id);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glEnableVariantClientStateEXT")]
            public static
            void EnableVariantClientState(UInt32 id)
            {
                Delegates.glEnableVariantClientStateEXT((UInt32)id);
            }

            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glEndTransformFeedbackEXT")]
            public static
            void EndTransformFeedback()
            {
                Delegates.glEndTransformFeedbackEXT();
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glEndVertexShaderEXT")]
            public static
            void EndVertexShader()
            {
                Delegates.glEndVertexShaderEXT();
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glExtractComponentEXT")]
            public static
            void ExtractComponent(Int32 res, Int32 src, Int32 num)
            {
                Delegates.glExtractComponentEXT((UInt32)res, (UInt32)src, (UInt32)num);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glExtractComponentEXT")]
            public static
            void ExtractComponent(UInt32 res, UInt32 src, UInt32 num)
            {
                Delegates.glExtractComponentEXT((UInt32)res, (UInt32)src, (UInt32)num);
            }

            [AutoGenerated(Category = "EXT_fog_coord", Version = "1.1", EntryPoint = "glFogCoorddEXT")]
            public static
            void FogCoord(Double coord)
            {
                Delegates.glFogCoorddEXT((Double)coord);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_fog_coord", Version = "1.1", EntryPoint = "glFogCoorddvEXT")]
            public static
            unsafe void FogCoord(Double* coord)
            {
                Delegates.glFogCoorddvEXT((Double*)coord);
            }

            [AutoGenerated(Category = "EXT_fog_coord", Version = "1.1", EntryPoint = "glFogCoordfEXT")]
            public static
            void FogCoord(Single coord)
            {
                Delegates.glFogCoordfEXT((Single)coord);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_fog_coord", Version = "1.1", EntryPoint = "glFogCoordfvEXT")]
            public static
            unsafe void FogCoord(Single* coord)
            {
                Delegates.glFogCoordfvEXT((Single*)coord);
            }

            [AutoGenerated(Category = "EXT_fog_coord", Version = "1.1", EntryPoint = "glFogCoordPointerEXT")]
            public static
            void FogCoordPointer(OpenTK.Graphics.OpenGL.EXT_fog_coord type, Int32 stride, IntPtr pointer)
            {
                Delegates.glFogCoordPointerEXT((OpenTK.Graphics.OpenGL.EXT_fog_coord)type, (Int32)stride, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "EXT_fog_coord", Version = "1.1", EntryPoint = "glFogCoordPointerEXT")]
            public static
            void FogCoordPointer<T2>(OpenTK.Graphics.OpenGL.EXT_fog_coord type, Int32 stride, [InAttribute, OutAttribute] T2[] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glFogCoordPointerEXT((OpenTK.Graphics.OpenGL.EXT_fog_coord)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_fog_coord", Version = "1.1", EntryPoint = "glFogCoordPointerEXT")]
            public static
            void FogCoordPointer<T2>(OpenTK.Graphics.OpenGL.EXT_fog_coord type, Int32 stride, [InAttribute, OutAttribute] T2[,] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glFogCoordPointerEXT((OpenTK.Graphics.OpenGL.EXT_fog_coord)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_fog_coord", Version = "1.1", EntryPoint = "glFogCoordPointerEXT")]
            public static
            void FogCoordPointer<T2>(OpenTK.Graphics.OpenGL.EXT_fog_coord type, Int32 stride, [InAttribute, OutAttribute] T2[,,] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glFogCoordPointerEXT((OpenTK.Graphics.OpenGL.EXT_fog_coord)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_fog_coord", Version = "1.1", EntryPoint = "glFogCoordPointerEXT")]
            public static
            void FogCoordPointer<T2>(OpenTK.Graphics.OpenGL.EXT_fog_coord type, Int32 stride, [InAttribute, OutAttribute] ref T2 pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glFogCoordPointerEXT((OpenTK.Graphics.OpenGL.EXT_fog_coord)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T2)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_fog_coord", Version = "1.1", EntryPoint = "glFogCoordPointerEXT")]
            public static
            void FogCoordPointer(int type, Int32 stride, IntPtr pointer)
            {
                Delegates.glFogCoordPointerEXT((OpenTK.Graphics.OpenGL.EXT_fog_coord)type, (Int32)stride, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "EXT_fog_coord", Version = "1.1", EntryPoint = "glFogCoordPointerEXT")]
            public static
            void FogCoordPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] T2[] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glFogCoordPointerEXT((OpenTK.Graphics.OpenGL.EXT_fog_coord)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_fog_coord", Version = "1.1", EntryPoint = "glFogCoordPointerEXT")]
            public static
            void FogCoordPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] T2[,] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glFogCoordPointerEXT((OpenTK.Graphics.OpenGL.EXT_fog_coord)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_fog_coord", Version = "1.1", EntryPoint = "glFogCoordPointerEXT")]
            public static
            void FogCoordPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] T2[,,] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glFogCoordPointerEXT((OpenTK.Graphics.OpenGL.EXT_fog_coord)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_fog_coord", Version = "1.1", EntryPoint = "glFogCoordPointerEXT")]
            public static
            void FogCoordPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] ref T2 pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glFogCoordPointerEXT((OpenTK.Graphics.OpenGL.EXT_fog_coord)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T2)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBufferEXT")]
            public static
            void FramebufferDrawBuffer(Int32 framebuffer, OpenTK.Graphics.OpenGL.DrawBufferMode mode)
            {
                Delegates.glFramebufferDrawBufferEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.DrawBufferMode)mode);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBufferEXT")]
            public static
            void FramebufferDrawBuffer(Int32 framebuffer, int mode)
            {
                Delegates.glFramebufferDrawBufferEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.DrawBufferMode)mode);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBufferEXT")]
            public static
            void FramebufferDrawBuffer(UInt32 framebuffer, OpenTK.Graphics.OpenGL.DrawBufferMode mode)
            {
                Delegates.glFramebufferDrawBufferEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.DrawBufferMode)mode);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBufferEXT")]
            public static
            void FramebufferDrawBuffer(UInt32 framebuffer, int mode)
            {
                Delegates.glFramebufferDrawBufferEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.DrawBufferMode)mode);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static
            void FramebufferDrawBuffers(Int32 framebuffer, Int32 n, OpenTK.Graphics.OpenGL.DrawBufferMode[] bufs)
            {
                unsafe
                {
                    fixed (OpenTK.Graphics.OpenGL.DrawBufferMode* bufs_ptr = bufs)
                    {
                        Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (OpenTK.Graphics.OpenGL.DrawBufferMode*)bufs_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static
            void FramebufferDrawBuffers(Int32 framebuffer, Int32 n, ref OpenTK.Graphics.OpenGL.DrawBufferMode bufs)
            {
                unsafe
                {
                    fixed (OpenTK.Graphics.OpenGL.DrawBufferMode* bufs_ptr = &bufs)
                    {
                        Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (OpenTK.Graphics.OpenGL.DrawBufferMode*)bufs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static
            unsafe void FramebufferDrawBuffers(Int32 framebuffer, Int32 n, OpenTK.Graphics.OpenGL.DrawBufferMode* bufs)
            {
                Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (OpenTK.Graphics.OpenGL.DrawBufferMode*)bufs);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static
            void FramebufferDrawBuffers(Int32 framebuffer, Int32 n, int[] bufs)
            {
                unsafe
                {
                    fixed (int* bufs_ptr = bufs)
                    {
                        Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (OpenTK.Graphics.OpenGL.DrawBufferMode*)bufs_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static
            void FramebufferDrawBuffers(Int32 framebuffer, Int32 n, ref int bufs)
            {
                unsafe
                {
                    fixed (int* bufs_ptr = &bufs)
                    {
                        Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (OpenTK.Graphics.OpenGL.DrawBufferMode*)bufs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static
            unsafe void FramebufferDrawBuffers(Int32 framebuffer, Int32 n, int* bufs)
            {
                Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (OpenTK.Graphics.OpenGL.DrawBufferMode*)bufs);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static
            void FramebufferDrawBuffers(UInt32 framebuffer, Int32 n, OpenTK.Graphics.OpenGL.DrawBufferMode[] bufs)
            {
                unsafe
                {
                    fixed (OpenTK.Graphics.OpenGL.DrawBufferMode* bufs_ptr = bufs)
                    {
                        Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (OpenTK.Graphics.OpenGL.DrawBufferMode*)bufs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static
            void FramebufferDrawBuffers(UInt32 framebuffer, Int32 n, ref OpenTK.Graphics.OpenGL.DrawBufferMode bufs)
            {
                unsafe
                {
                    fixed (OpenTK.Graphics.OpenGL.DrawBufferMode* bufs_ptr = &bufs)
                    {
                        Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (OpenTK.Graphics.OpenGL.DrawBufferMode*)bufs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static
            unsafe void FramebufferDrawBuffers(UInt32 framebuffer, Int32 n, OpenTK.Graphics.OpenGL.DrawBufferMode* bufs)
            {
                Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (OpenTK.Graphics.OpenGL.DrawBufferMode*)bufs);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static
            void FramebufferDrawBuffers(UInt32 framebuffer, Int32 n, int[] bufs)
            {
                unsafe
                {
                    fixed (int* bufs_ptr = bufs)
                    {
                        Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (OpenTK.Graphics.OpenGL.DrawBufferMode*)bufs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static
            void FramebufferDrawBuffers(UInt32 framebuffer, Int32 n, ref int bufs)
            {
                unsafe
                {
                    fixed (int* bufs_ptr = &bufs)
                    {
                        Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (OpenTK.Graphics.OpenGL.DrawBufferMode*)bufs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static
            unsafe void FramebufferDrawBuffers(UInt32 framebuffer, Int32 n, int* bufs)
            {
                Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (OpenTK.Graphics.OpenGL.DrawBufferMode*)bufs);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferReadBufferEXT")]
            public static
            void FramebufferReadBuffer(Int32 framebuffer, int mode)
            {
                Delegates.glFramebufferReadBufferEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.ReadBufferMode)mode);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferReadBufferEXT")]
            public static
            void FramebufferReadBuffer(Int32 framebuffer, OpenTK.Graphics.OpenGL.ReadBufferMode mode)
            {
                Delegates.glFramebufferReadBufferEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.ReadBufferMode)mode);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferReadBufferEXT")]
            public static
            void FramebufferReadBuffer(UInt32 framebuffer, int mode)
            {
                Delegates.glFramebufferReadBufferEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.ReadBufferMode)mode);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferReadBufferEXT")]
            public static
            void FramebufferReadBuffer(UInt32 framebuffer, OpenTK.Graphics.OpenGL.ReadBufferMode mode)
            {
                Delegates.glFramebufferReadBufferEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.ReadBufferMode)mode);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glFramebufferRenderbufferEXT")]
            public static
            void FramebufferRenderbuffer(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.RenderbufferTarget renderbuffertarget, Int32 renderbuffer)
            {
                Delegates.glFramebufferRenderbufferEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glFramebufferRenderbufferEXT")]
            public static
            void FramebufferRenderbuffer(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.RenderbufferTarget renderbuffertarget, UInt32 renderbuffer)
            {
                Delegates.glFramebufferRenderbufferEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glFramebufferRenderbufferEXT")]
            public static
            void FramebufferRenderbuffer(int target, int attachment, int renderbuffertarget, Int32 renderbuffer)
            {
                Delegates.glFramebufferRenderbufferEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glFramebufferRenderbufferEXT")]
            public static
            void FramebufferRenderbuffer(int target, int attachment, int renderbuffertarget, UInt32 renderbuffer)
            {
                Delegates.glFramebufferRenderbufferEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glFramebufferTexture1DEXT")]
            public static
            void FramebufferTexture1D(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, Int32 texture, Int32 level)
            {
                Delegates.glFramebufferTexture1DEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glFramebufferTexture1DEXT")]
            public static
            void FramebufferTexture1D(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, UInt32 texture, Int32 level)
            {
                Delegates.glFramebufferTexture1DEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glFramebufferTexture1DEXT")]
            public static
            void FramebufferTexture1D(int target, int attachment, int textarget, Int32 texture, Int32 level)
            {
                Delegates.glFramebufferTexture1DEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glFramebufferTexture1DEXT")]
            public static
            void FramebufferTexture1D(int target, int attachment, int textarget, UInt32 texture, Int32 level)
            {
                Delegates.glFramebufferTexture1DEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glFramebufferTexture2DEXT")]
            public static
            void FramebufferTexture2D(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, Int32 texture, Int32 level)
            {
                Delegates.glFramebufferTexture2DEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glFramebufferTexture2DEXT")]
            public static
            void FramebufferTexture2D(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, UInt32 texture, Int32 level)
            {
                Delegates.glFramebufferTexture2DEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glFramebufferTexture2DEXT")]
            public static
            void FramebufferTexture2D(int target, int attachment, int textarget, Int32 texture, Int32 level)
            {
                Delegates.glFramebufferTexture2DEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glFramebufferTexture2DEXT")]
            public static
            void FramebufferTexture2D(int target, int attachment, int textarget, UInt32 texture, Int32 level)
            {
                Delegates.glFramebufferTexture2DEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glFramebufferTexture3DEXT")]
            public static
            void FramebufferTexture3D(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, Int32 texture, Int32 level, Int32 zoffset)
            {
                Delegates.glFramebufferTexture3DEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glFramebufferTexture3DEXT")]
            public static
            void FramebufferTexture3D(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, UInt32 texture, Int32 level, Int32 zoffset)
            {
                Delegates.glFramebufferTexture3DEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glFramebufferTexture3DEXT")]
            public static
            void FramebufferTexture3D(int target, int attachment, int textarget, Int32 texture, Int32 level, Int32 zoffset)
            {
                Delegates.glFramebufferTexture3DEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glFramebufferTexture3DEXT")]
            public static
            void FramebufferTexture3D(int target, int attachment, int textarget, UInt32 texture, Int32 level, Int32 zoffset)
            {
                Delegates.glFramebufferTexture3DEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
            }

            [AutoGenerated(Category = "NV_geometry_program4", Version = "2.0", EntryPoint = "glFramebufferTextureEXT")]
            public static
            void FramebufferTexture(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, Int32 texture, Int32 level)
            {
                Delegates.glFramebufferTextureEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_geometry_program4", Version = "2.0", EntryPoint = "glFramebufferTextureEXT")]
            public static
            void FramebufferTexture(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, UInt32 texture, Int32 level)
            {
                Delegates.glFramebufferTextureEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
            }

            [AutoGenerated(Category = "NV_geometry_program4", Version = "2.0", EntryPoint = "glFramebufferTextureEXT")]
            public static
            void FramebufferTexture(int target, int attachment, Int32 texture, Int32 level)
            {
                Delegates.glFramebufferTextureEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_geometry_program4", Version = "2.0", EntryPoint = "glFramebufferTextureEXT")]
            public static
            void FramebufferTexture(int target, int attachment, UInt32 texture, Int32 level)
            {
                Delegates.glFramebufferTextureEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
            }

            [AutoGenerated(Category = "NV_geometry_program4", Version = "2.0", EntryPoint = "glFramebufferTextureFaceEXT")]
            public static
            void FramebufferTextureFace(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, Int32 texture, Int32 level, OpenTK.Graphics.OpenGL.TextureTarget face)
            {
                Delegates.glFramebufferTextureFaceEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (OpenTK.Graphics.OpenGL.TextureTarget)face);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_geometry_program4", Version = "2.0", EntryPoint = "glFramebufferTextureFaceEXT")]
            public static
            void FramebufferTextureFace(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, UInt32 texture, Int32 level, OpenTK.Graphics.OpenGL.TextureTarget face)
            {
                Delegates.glFramebufferTextureFaceEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (OpenTK.Graphics.OpenGL.TextureTarget)face);
            }

            [AutoGenerated(Category = "NV_geometry_program4", Version = "2.0", EntryPoint = "glFramebufferTextureFaceEXT")]
            public static
            void FramebufferTextureFace(int target, int attachment, Int32 texture, Int32 level, int face)
            {
                Delegates.glFramebufferTextureFaceEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (OpenTK.Graphics.OpenGL.TextureTarget)face);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_geometry_program4", Version = "2.0", EntryPoint = "glFramebufferTextureFaceEXT")]
            public static
            void FramebufferTextureFace(int target, int attachment, UInt32 texture, Int32 level, int face)
            {
                Delegates.glFramebufferTextureFaceEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (OpenTK.Graphics.OpenGL.TextureTarget)face);
            }

            [AutoGenerated(Category = "NV_geometry_program4", Version = "2.0", EntryPoint = "glFramebufferTextureLayerEXT")]
            public static
            void FramebufferTextureLayer(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, Int32 texture, Int32 level, Int32 layer)
            {
                Delegates.glFramebufferTextureLayerEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_geometry_program4", Version = "2.0", EntryPoint = "glFramebufferTextureLayerEXT")]
            public static
            void FramebufferTextureLayer(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 layer)
            {
                Delegates.glFramebufferTextureLayerEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
            }

            [AutoGenerated(Category = "NV_geometry_program4", Version = "2.0", EntryPoint = "glFramebufferTextureLayerEXT")]
            public static
            void FramebufferTextureLayer(int target, int attachment, Int32 texture, Int32 level, Int32 layer)
            {
                Delegates.glFramebufferTextureLayerEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_geometry_program4", Version = "2.0", EntryPoint = "glFramebufferTextureLayerEXT")]
            public static
            void FramebufferTextureLayer(int target, int attachment, UInt32 texture, Int32 level, Int32 layer)
            {
                Delegates.glFramebufferTextureLayerEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGenerateMipmapEXT")]
            public static
            void GenerateMipmap(OpenTK.Graphics.OpenGL.GenerateMipmapTarget target)
            {
                Delegates.glGenerateMipmapEXT((OpenTK.Graphics.OpenGL.GenerateMipmapTarget)target);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGenerateMipmapEXT")]
            public static
            void GenerateMipmap(int target)
            {
                Delegates.glGenerateMipmapEXT((OpenTK.Graphics.OpenGL.GenerateMipmapTarget)target);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGenerateMultiTexMipmapEXT")]
            public static
            void GenerateMultiTexMipmap(int texunit, int target)
            {
                Delegates.glGenerateMultiTexMipmapEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGenerateMultiTexMipmapEXT")]
            public static
            void GenerateMultiTexMipmap(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target)
            {
                Delegates.glGenerateMultiTexMipmapEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGenerateTextureMipmapEXT")]
            public static
            void GenerateTextureMipmap(Int32 texture, int target)
            {
                Delegates.glGenerateTextureMipmapEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGenerateTextureMipmapEXT")]
            public static
            void GenerateTextureMipmap(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target)
            {
                Delegates.glGenerateTextureMipmapEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGenerateTextureMipmapEXT")]
            public static
            void GenerateTextureMipmap(UInt32 texture, int target)
            {
                Delegates.glGenerateTextureMipmapEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGenerateTextureMipmapEXT")]
            public static
            void GenerateTextureMipmap(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target)
            {
                Delegates.glGenerateTextureMipmapEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGenFramebuffersEXT")]
            public static
            void GenFramebuffers(Int32 n, [OutAttribute] Int32[] framebuffers)
            {
                unsafe
                {
                    fixed (Int32* framebuffers_ptr = framebuffers)
                    {
                        Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGenFramebuffersEXT")]
            public static
            void GenFramebuffers(Int32 n, [OutAttribute] out Int32 framebuffers)
            {
                unsafe
                {
                    fixed (Int32* framebuffers_ptr = &framebuffers)
                    {
                        Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                        framebuffers = *framebuffers_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGenFramebuffersEXT")]
            public static
            unsafe void GenFramebuffers(Int32 n, [OutAttribute] Int32* framebuffers)
            {
                Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGenFramebuffersEXT")]
            public static
            void GenFramebuffers(Int32 n, [OutAttribute] UInt32[] framebuffers)
            {
                unsafe
                {
                    fixed (UInt32* framebuffers_ptr = framebuffers)
                    {
                        Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGenFramebuffersEXT")]
            public static
            void GenFramebuffers(Int32 n, [OutAttribute] out UInt32 framebuffers)
            {
                unsafe
                {
                    fixed (UInt32* framebuffers_ptr = &framebuffers)
                    {
                        Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                        framebuffers = *framebuffers_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGenFramebuffersEXT")]
            public static
            unsafe void GenFramebuffers(Int32 n, [OutAttribute] UInt32* framebuffers)
            {
                Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGenRenderbuffersEXT")]
            public static
            void GenRenderbuffers(Int32 n, [OutAttribute] Int32[] renderbuffers)
            {
                unsafe
                {
                    fixed (Int32* renderbuffers_ptr = renderbuffers)
                    {
                        Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGenRenderbuffersEXT")]
            public static
            void GenRenderbuffers(Int32 n, [OutAttribute] out Int32 renderbuffers)
            {
                unsafe
                {
                    fixed (Int32* renderbuffers_ptr = &renderbuffers)
                    {
                        Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                        renderbuffers = *renderbuffers_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGenRenderbuffersEXT")]
            public static
            unsafe void GenRenderbuffers(Int32 n, [OutAttribute] Int32* renderbuffers)
            {
                Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGenRenderbuffersEXT")]
            public static
            void GenRenderbuffers(Int32 n, [OutAttribute] UInt32[] renderbuffers)
            {
                unsafe
                {
                    fixed (UInt32* renderbuffers_ptr = renderbuffers)
                    {
                        Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGenRenderbuffersEXT")]
            public static
            void GenRenderbuffers(Int32 n, [OutAttribute] out UInt32 renderbuffers)
            {
                unsafe
                {
                    fixed (UInt32* renderbuffers_ptr = &renderbuffers)
                    {
                        Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                        renderbuffers = *renderbuffers_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGenRenderbuffersEXT")]
            public static
            unsafe void GenRenderbuffers(Int32 n, [OutAttribute] UInt32* renderbuffers)
            {
                Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGenSymbolsEXT")]
            public static
            Int32 GenSymbol(OpenTK.Graphics.OpenGL.EXT_vertex_shader datatype, OpenTK.Graphics.OpenGL.EXT_vertex_shader storagetype, OpenTK.Graphics.OpenGL.EXT_vertex_shader range, Int32 components)
            {
                return Delegates.glGenSymbolsEXT((OpenTK.Graphics.OpenGL.EXT_vertex_shader)datatype, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)storagetype, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)range, (UInt32)components);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGenSymbolsEXT")]
            public static
            Int32 GenSymbol(OpenTK.Graphics.OpenGL.EXT_vertex_shader datatype, OpenTK.Graphics.OpenGL.EXT_vertex_shader storagetype, OpenTK.Graphics.OpenGL.EXT_vertex_shader range, UInt32 components)
            {
                return Delegates.glGenSymbolsEXT((OpenTK.Graphics.OpenGL.EXT_vertex_shader)datatype, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)storagetype, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)range, (UInt32)components);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGenSymbolsEXT")]
            public static
            Int32 GenSymbol(int datatype, int storagetype, int range, Int32 components)
            {
                return Delegates.glGenSymbolsEXT((OpenTK.Graphics.OpenGL.EXT_vertex_shader)datatype, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)storagetype, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)range, (UInt32)components);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGenSymbolsEXT")]
            public static
            Int32 GenSymbol(int datatype, int storagetype, int range, UInt32 components)
            {
                return Delegates.glGenSymbolsEXT((OpenTK.Graphics.OpenGL.EXT_vertex_shader)datatype, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)storagetype, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)range, (UInt32)components);
            }

            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glGenTexturesEXT")]
            public static
            void GenTextures(Int32 n, [OutAttribute] Int32[] textures)
            {
                unsafe
                {
                    fixed (Int32* textures_ptr = textures)
                    {
                        Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glGenTexturesEXT")]
            public static
            void GenTextures(Int32 n, [OutAttribute] out Int32 textures)
            {
                unsafe
                {
                    fixed (Int32* textures_ptr = &textures)
                    {
                        Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                        textures = *textures_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glGenTexturesEXT")]
            public static
            unsafe void GenTextures(Int32 n, [OutAttribute] Int32* textures)
            {
                Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glGenTexturesEXT")]
            public static
            void GenTextures(Int32 n, [OutAttribute] UInt32[] textures)
            {
                unsafe
                {
                    fixed (UInt32* textures_ptr = textures)
                    {
                        Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glGenTexturesEXT")]
            public static
            void GenTextures(Int32 n, [OutAttribute] out UInt32 textures)
            {
                unsafe
                {
                    fixed (UInt32* textures_ptr = &textures)
                    {
                        Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                        textures = *textures_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glGenTexturesEXT")]
            public static
            unsafe void GenTextures(Int32 n, [OutAttribute] UInt32* textures)
            {
                Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGenVertexShadersEXT")]
            public static
            Int32 GenVertexShaders(Int32 range)
            {
                return Delegates.glGenVertexShadersEXT((UInt32)range);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGenVertexShadersEXT")]
            public static
            Int32 GenVertexShaders(UInt32 range)
            {
                return Delegates.glGenVertexShadersEXT((UInt32)range);
            }

            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetBooleanIndexedvEXT")]
            public static
            void GetBooleanIndexed(OpenTK.Graphics.OpenGL.EXT_draw_buffers2 target, Int32 index, [OutAttribute] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetBooleanIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (bool*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetBooleanIndexedvEXT")]
            public static
            void GetBooleanIndexed(OpenTK.Graphics.OpenGL.EXT_draw_buffers2 target, Int32 index, [OutAttribute] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetBooleanIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetBooleanIndexedvEXT")]
            public static
            unsafe void GetBooleanIndexed(OpenTK.Graphics.OpenGL.EXT_draw_buffers2 target, Int32 index, [OutAttribute] bool* data)
            {
                Delegates.glGetBooleanIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (bool*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetBooleanIndexedvEXT")]
            public static
            void GetBooleanIndexed(OpenTK.Graphics.OpenGL.EXT_draw_buffers2 target, UInt32 index, [OutAttribute] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetBooleanIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (bool*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetBooleanIndexedvEXT")]
            public static
            void GetBooleanIndexed(OpenTK.Graphics.OpenGL.EXT_draw_buffers2 target, UInt32 index, [OutAttribute] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetBooleanIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetBooleanIndexedvEXT")]
            public static
            unsafe void GetBooleanIndexed(OpenTK.Graphics.OpenGL.EXT_draw_buffers2 target, UInt32 index, [OutAttribute] bool* data)
            {
                Delegates.glGetBooleanIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (bool*)data);
            }

            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetBooleanIndexedvEXT")]
            public static
            void GetBooleanIndexed(int target, Int32 index, [OutAttribute] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetBooleanIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (bool*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetBooleanIndexedvEXT")]
            public static
            void GetBooleanIndexed(int target, Int32 index, [OutAttribute] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetBooleanIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetBooleanIndexedvEXT")]
            public static
            unsafe void GetBooleanIndexed(int target, Int32 index, [OutAttribute] bool* data)
            {
                Delegates.glGetBooleanIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (bool*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetBooleanIndexedvEXT")]
            public static
            void GetBooleanIndexed(int target, UInt32 index, [OutAttribute] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetBooleanIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (bool*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetBooleanIndexedvEXT")]
            public static
            void GetBooleanIndexed(int target, UInt32 index, [OutAttribute] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetBooleanIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetBooleanIndexedvEXT")]
            public static
            unsafe void GetBooleanIndexed(int target, UInt32 index, [OutAttribute] bool* data)
            {
                Delegates.glGetBooleanIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (bool*)data);
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glGetColorTableEXT")]
            public static
            void GetColorTable(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr data)
            {
                Delegates.glGetColorTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data);
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glGetColorTableEXT")]
            public static
            void GetColorTable<T3>(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T3[] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetColorTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glGetColorTableEXT")]
            public static
            void GetColorTable<T3>(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T3[,] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetColorTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glGetColorTableEXT")]
            public static
            void GetColorTable<T3>(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T3[,,] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetColorTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glGetColorTableEXT")]
            public static
            void GetColorTable<T3>(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T3 data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetColorTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T3)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glGetColorTableEXT")]
            public static
            void GetColorTable(int target, int format, int type, [OutAttribute] IntPtr data)
            {
                Delegates.glGetColorTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data);
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glGetColorTableEXT")]
            public static
            void GetColorTable<T3>(int target, int format, int type, [InAttribute, OutAttribute] T3[] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetColorTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glGetColorTableEXT")]
            public static
            void GetColorTable<T3>(int target, int format, int type, [InAttribute, OutAttribute] T3[,] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetColorTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glGetColorTableEXT")]
            public static
            void GetColorTable<T3>(int target, int format, int type, [InAttribute, OutAttribute] T3[,,] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetColorTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glGetColorTableEXT")]
            public static
            void GetColorTable<T3>(int target, int format, int type, [InAttribute, OutAttribute] ref T3 data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetColorTableEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T3)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glGetColorTableParameterfvEXT")]
            public static
            void GetColorTableParameter(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.GetColorTableParameterPName pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetColorTableParameterfvEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glGetColorTableParameterfvEXT")]
            public static
            void GetColorTableParameter(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.GetColorTableParameterPName pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetColorTableParameterfvEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glGetColorTableParameterfvEXT")]
            public static
            unsafe void GetColorTableParameter(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.GetColorTableParameterPName pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetColorTableParameterfvEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glGetColorTableParameterfvEXT")]
            public static
            void GetColorTableParameter(int target, int pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetColorTableParameterfvEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glGetColorTableParameterfvEXT")]
            public static
            void GetColorTableParameter(int target, int pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetColorTableParameterfvEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glGetColorTableParameterfvEXT")]
            public static
            unsafe void GetColorTableParameter(int target, int pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetColorTableParameterfvEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glGetColorTableParameterivEXT")]
            public static
            void GetColorTableParameter(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.GetColorTableParameterPName pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetColorTableParameterivEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glGetColorTableParameterivEXT")]
            public static
            void GetColorTableParameter(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.GetColorTableParameterPName pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetColorTableParameterivEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glGetColorTableParameterivEXT")]
            public static
            unsafe void GetColorTableParameter(OpenTK.Graphics.OpenGL.ColorTableTarget target, OpenTK.Graphics.OpenGL.GetColorTableParameterPName pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetColorTableParameterivEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glGetColorTableParameterivEXT")]
            public static
            void GetColorTableParameter(int target, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetColorTableParameterivEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glGetColorTableParameterivEXT")]
            public static
            void GetColorTableParameter(int target, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetColorTableParameterivEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_paletted_texture", Version = "1.1", EntryPoint = "glGetColorTableParameterivEXT")]
            public static
            unsafe void GetColorTableParameter(int target, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetColorTableParameterivEXT((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (OpenTK.Graphics.OpenGL.GetColorTableParameterPName)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedMultiTexImageEXT")]
            public static
            void GetCompressedMultiTexImage(int texunit, int target, Int32 lod, [OutAttribute] IntPtr img)
            {
                Delegates.glGetCompressedMultiTexImageEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedMultiTexImageEXT")]
            public static
            void GetCompressedMultiTexImage<T3>(int texunit, int target, Int32 lod, [InAttribute, OutAttribute] T3[] img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedMultiTexImageEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedMultiTexImageEXT")]
            public static
            void GetCompressedMultiTexImage<T3>(int texunit, int target, Int32 lod, [InAttribute, OutAttribute] T3[,] img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedMultiTexImageEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedMultiTexImageEXT")]
            public static
            void GetCompressedMultiTexImage<T3>(int texunit, int target, Int32 lod, [InAttribute, OutAttribute] T3[,,] img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedMultiTexImageEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedMultiTexImageEXT")]
            public static
            void GetCompressedMultiTexImage<T3>(int texunit, int target, Int32 lod, [InAttribute, OutAttribute] ref T3 img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedMultiTexImageEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                    img = (T3)img_ptr.Target;
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedMultiTexImageEXT")]
            public static
            void GetCompressedMultiTexImage(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 lod, [OutAttribute] IntPtr img)
            {
                Delegates.glGetCompressedMultiTexImageEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedMultiTexImageEXT")]
            public static
            void GetCompressedMultiTexImage<T3>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 lod, [InAttribute, OutAttribute] T3[] img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedMultiTexImageEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedMultiTexImageEXT")]
            public static
            void GetCompressedMultiTexImage<T3>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 lod, [InAttribute, OutAttribute] T3[,] img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedMultiTexImageEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedMultiTexImageEXT")]
            public static
            void GetCompressedMultiTexImage<T3>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 lod, [InAttribute, OutAttribute] T3[,,] img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedMultiTexImageEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedMultiTexImageEXT")]
            public static
            void GetCompressedMultiTexImage<T3>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 lod, [InAttribute, OutAttribute] ref T3 img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedMultiTexImageEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                    img = (T3)img_ptr.Target;
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static
            void GetCompressedTextureImage(Int32 texture, int target, Int32 lod, [OutAttribute] IntPtr img)
            {
                Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static
            void GetCompressedTextureImage<T3>(Int32 texture, int target, Int32 lod, [InAttribute, OutAttribute] T3[] img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static
            void GetCompressedTextureImage<T3>(Int32 texture, int target, Int32 lod, [InAttribute, OutAttribute] T3[,] img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static
            void GetCompressedTextureImage<T3>(Int32 texture, int target, Int32 lod, [InAttribute, OutAttribute] T3[,,] img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static
            void GetCompressedTextureImage<T3>(Int32 texture, int target, Int32 lod, [InAttribute, OutAttribute] ref T3 img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                    img = (T3)img_ptr.Target;
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static
            void GetCompressedTextureImage(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 lod, [OutAttribute] IntPtr img)
            {
                Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static
            void GetCompressedTextureImage<T3>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 lod, [InAttribute, OutAttribute] T3[] img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static
            void GetCompressedTextureImage<T3>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 lod, [InAttribute, OutAttribute] T3[,] img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static
            void GetCompressedTextureImage<T3>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 lod, [InAttribute, OutAttribute] T3[,,] img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static
            void GetCompressedTextureImage<T3>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 lod, [InAttribute, OutAttribute] ref T3 img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                    img = (T3)img_ptr.Target;
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static
            void GetCompressedTextureImage(UInt32 texture, int target, Int32 lod, [OutAttribute] IntPtr img)
            {
                Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static
            void GetCompressedTextureImage<T3>(UInt32 texture, int target, Int32 lod, [InAttribute, OutAttribute] T3[] img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static
            void GetCompressedTextureImage<T3>(UInt32 texture, int target, Int32 lod, [InAttribute, OutAttribute] T3[,] img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static
            void GetCompressedTextureImage<T3>(UInt32 texture, int target, Int32 lod, [InAttribute, OutAttribute] T3[,,] img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static
            void GetCompressedTextureImage<T3>(UInt32 texture, int target, Int32 lod, [InAttribute, OutAttribute] ref T3 img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                    img = (T3)img_ptr.Target;
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static
            void GetCompressedTextureImage(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 lod, [OutAttribute] IntPtr img)
            {
                Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static
            void GetCompressedTextureImage<T3>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 lod, [InAttribute, OutAttribute] T3[] img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static
            void GetCompressedTextureImage<T3>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 lod, [InAttribute, OutAttribute] T3[,] img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static
            void GetCompressedTextureImage<T3>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 lod, [InAttribute, OutAttribute] T3[,,] img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static
            void GetCompressedTextureImage<T3>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 lod, [InAttribute, OutAttribute] ref T3 img)
                where T3 : struct
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                    img = (T3)img_ptr.Target;
                }
                finally
                {
                    img_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetConvolutionFilterEXT")]
            public static
            void GetConvolutionFilter(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr image)
            {
                Delegates.glGetConvolutionFilterEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetConvolutionFilterEXT")]
            public static
            void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T3[] image)
                where T3 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetConvolutionFilterEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetConvolutionFilterEXT")]
            public static
            void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T3[,] image)
                where T3 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetConvolutionFilterEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetConvolutionFilterEXT")]
            public static
            void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T3[,,] image)
                where T3 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetConvolutionFilterEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetConvolutionFilterEXT")]
            public static
            void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T3 image)
                where T3 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetConvolutionFilterEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                    image = (T3)image_ptr.Target;
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetConvolutionFilterEXT")]
            public static
            void GetConvolutionFilter(int target, int format, int type, [OutAttribute] IntPtr image)
            {
                Delegates.glGetConvolutionFilterEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetConvolutionFilterEXT")]
            public static
            void GetConvolutionFilter<T3>(int target, int format, int type, [InAttribute, OutAttribute] T3[] image)
                where T3 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetConvolutionFilterEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetConvolutionFilterEXT")]
            public static
            void GetConvolutionFilter<T3>(int target, int format, int type, [InAttribute, OutAttribute] T3[,] image)
                where T3 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetConvolutionFilterEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetConvolutionFilterEXT")]
            public static
            void GetConvolutionFilter<T3>(int target, int format, int type, [InAttribute, OutAttribute] T3[,,] image)
                where T3 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetConvolutionFilterEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetConvolutionFilterEXT")]
            public static
            void GetConvolutionFilter<T3>(int target, int format, int type, [InAttribute, OutAttribute] ref T3 image)
                where T3 : struct
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetConvolutionFilterEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                    image = (T3)image_ptr.Target;
                }
                finally
                {
                    image_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetConvolutionParameterfvEXT")]
            public static
            void GetConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.ConvolutionParameterEXT pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetConvolutionParameterfvEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetConvolutionParameterfvEXT")]
            public static
            void GetConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.ConvolutionParameterEXT pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetConvolutionParameterfvEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetConvolutionParameterfvEXT")]
            public static
            unsafe void GetConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.ConvolutionParameterEXT pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetConvolutionParameterfvEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetConvolutionParameterfvEXT")]
            public static
            void GetConvolutionParameter(int target, int pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetConvolutionParameterfvEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetConvolutionParameterfvEXT")]
            public static
            void GetConvolutionParameter(int target, int pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetConvolutionParameterfvEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetConvolutionParameterfvEXT")]
            public static
            unsafe void GetConvolutionParameter(int target, int pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetConvolutionParameterfvEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetConvolutionParameterivEXT")]
            public static
            void GetConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.ConvolutionParameterEXT pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetConvolutionParameterivEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetConvolutionParameterivEXT")]
            public static
            void GetConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.ConvolutionParameterEXT pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetConvolutionParameterivEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetConvolutionParameterivEXT")]
            public static
            unsafe void GetConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetEXT target, OpenTK.Graphics.OpenGL.ConvolutionParameterEXT pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetConvolutionParameterivEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetConvolutionParameterivEXT")]
            public static
            void GetConvolutionParameter(int target, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetConvolutionParameterivEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetConvolutionParameterivEXT")]
            public static
            void GetConvolutionParameter(int target, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetConvolutionParameterivEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetConvolutionParameterivEXT")]
            public static
            unsafe void GetConvolutionParameter(int target, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetConvolutionParameterivEXT((OpenTK.Graphics.OpenGL.ConvolutionTargetEXT)target, (OpenTK.Graphics.OpenGL.ConvolutionParameterEXT)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static
            void GetDoubleIndexed(OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, [OutAttribute] Double[] data)
            {
                unsafe
                {
                    fixed (Double* data_ptr = data)
                    {
                        Delegates.glGetDoubleIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static
            void GetDoubleIndexed(OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, [OutAttribute] out Double data)
            {
                unsafe
                {
                    fixed (Double* data_ptr = &data)
                    {
                        Delegates.glGetDoubleIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static
            unsafe void GetDoubleIndexed(OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, [OutAttribute] Double* data)
            {
                Delegates.glGetDoubleIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static
            void GetDoubleIndexed(OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [OutAttribute] Double[] data)
            {
                unsafe
                {
                    fixed (Double* data_ptr = data)
                    {
                        Delegates.glGetDoubleIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static
            void GetDoubleIndexed(OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [OutAttribute] out Double data)
            {
                unsafe
                {
                    fixed (Double* data_ptr = &data)
                    {
                        Delegates.glGetDoubleIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static
            unsafe void GetDoubleIndexed(OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [OutAttribute] Double* data)
            {
                Delegates.glGetDoubleIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)data);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static
            void GetDoubleIndexed(int target, Int32 index, [OutAttribute] Double[] data)
            {
                unsafe
                {
                    fixed (Double* data_ptr = data)
                    {
                        Delegates.glGetDoubleIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static
            void GetDoubleIndexed(int target, Int32 index, [OutAttribute] out Double data)
            {
                unsafe
                {
                    fixed (Double* data_ptr = &data)
                    {
                        Delegates.glGetDoubleIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static
            unsafe void GetDoubleIndexed(int target, Int32 index, [OutAttribute] Double* data)
            {
                Delegates.glGetDoubleIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static
            void GetDoubleIndexed(int target, UInt32 index, [OutAttribute] Double[] data)
            {
                unsafe
                {
                    fixed (Double* data_ptr = data)
                    {
                        Delegates.glGetDoubleIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static
            void GetDoubleIndexed(int target, UInt32 index, [OutAttribute] out Double data)
            {
                unsafe
                {
                    fixed (Double* data_ptr = &data)
                    {
                        Delegates.glGetDoubleIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static
            unsafe void GetDoubleIndexed(int target, UInt32 index, [OutAttribute] Double* data)
            {
                Delegates.glGetDoubleIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)data);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static
            void GetFloatIndexed(OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, [OutAttribute] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetFloatIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static
            void GetFloatIndexed(OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, [OutAttribute] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetFloatIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static
            unsafe void GetFloatIndexed(OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, [OutAttribute] Single* data)
            {
                Delegates.glGetFloatIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static
            void GetFloatIndexed(OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [OutAttribute] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetFloatIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static
            void GetFloatIndexed(OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [OutAttribute] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetFloatIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static
            unsafe void GetFloatIndexed(OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [OutAttribute] Single* data)
            {
                Delegates.glGetFloatIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)data);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static
            void GetFloatIndexed(int target, Int32 index, [OutAttribute] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetFloatIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static
            void GetFloatIndexed(int target, Int32 index, [OutAttribute] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetFloatIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static
            unsafe void GetFloatIndexed(int target, Int32 index, [OutAttribute] Single* data)
            {
                Delegates.glGetFloatIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static
            void GetFloatIndexed(int target, UInt32 index, [OutAttribute] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetFloatIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static
            void GetFloatIndexed(int target, UInt32 index, [OutAttribute] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetFloatIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static
            unsafe void GetFloatIndexed(int target, UInt32 index, [OutAttribute] Single* data)
            {
                Delegates.glGetFloatIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)data);
            }

            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glGetFragDataLocationEXT")]
            public static
            Int32 GetFragDataLocation(Int32 program, String name)
            {
                return Delegates.glGetFragDataLocationEXT((UInt32)program, (String)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glGetFragDataLocationEXT")]
            public static
            Int32 GetFragDataLocation(UInt32 program, String name)
            {
                return Delegates.glGetFragDataLocationEXT((UInt32)program, (String)name);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGetFramebufferAttachmentParameterivEXT")]
            public static
            void GetFramebufferAttachmentParameter(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.FramebufferParameterName pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFramebufferAttachmentParameterivEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.FramebufferParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGetFramebufferAttachmentParameterivEXT")]
            public static
            void GetFramebufferAttachmentParameter(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.FramebufferParameterName pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFramebufferAttachmentParameterivEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.FramebufferParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGetFramebufferAttachmentParameterivEXT")]
            public static
            unsafe void GetFramebufferAttachmentParameter(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.FramebufferParameterName pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetFramebufferAttachmentParameterivEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.FramebufferParameterName)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGetFramebufferAttachmentParameterivEXT")]
            public static
            void GetFramebufferAttachmentParameter(int target, int attachment, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFramebufferAttachmentParameterivEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.FramebufferParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGetFramebufferAttachmentParameterivEXT")]
            public static
            void GetFramebufferAttachmentParameter(int target, int attachment, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFramebufferAttachmentParameterivEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.FramebufferParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGetFramebufferAttachmentParameterivEXT")]
            public static
            unsafe void GetFramebufferAttachmentParameter(int target, int attachment, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetFramebufferAttachmentParameterivEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.FramebufferParameterName)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static
            void GetFramebufferParameter(Int32 framebuffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static
            void GetFramebufferParameter(Int32 framebuffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static
            unsafe void GetFramebufferParameter(Int32 framebuffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static
            void GetFramebufferParameter(Int32 framebuffer, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static
            void GetFramebufferParameter(Int32 framebuffer, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static
            unsafe void GetFramebufferParameter(Int32 framebuffer, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static
            void GetFramebufferParameter(UInt32 framebuffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static
            void GetFramebufferParameter(UInt32 framebuffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static
            unsafe void GetFramebufferParameter(UInt32 framebuffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static
            void GetFramebufferParameter(UInt32 framebuffer, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static
            void GetFramebufferParameter(UInt32 framebuffer, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static
            unsafe void GetFramebufferParameter(UInt32 framebuffer, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetHistogramEXT")]
            public static
            void GetHistogram(OpenTK.Graphics.OpenGL.HistogramTargetEXT target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr values)
            {
                Delegates.glGetHistogramEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values);
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetHistogramEXT")]
            public static
            void GetHistogram<T4>(OpenTK.Graphics.OpenGL.HistogramTargetEXT target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[] values)
                where T4 : struct
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetHistogramEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetHistogramEXT")]
            public static
            void GetHistogram<T4>(OpenTK.Graphics.OpenGL.HistogramTargetEXT target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[,] values)
                where T4 : struct
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetHistogramEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetHistogramEXT")]
            public static
            void GetHistogram<T4>(OpenTK.Graphics.OpenGL.HistogramTargetEXT target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[,,] values)
                where T4 : struct
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetHistogramEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetHistogramEXT")]
            public static
            void GetHistogram<T4>(OpenTK.Graphics.OpenGL.HistogramTargetEXT target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T4 values)
                where T4 : struct
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetHistogramEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                    values = (T4)values_ptr.Target;
                }
                finally
                {
                    values_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetHistogramEXT")]
            public static
            void GetHistogram(int target, bool reset, int format, int type, [OutAttribute] IntPtr values)
            {
                Delegates.glGetHistogramEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values);
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetHistogramEXT")]
            public static
            void GetHistogram<T4>(int target, bool reset, int format, int type, [InAttribute, OutAttribute] T4[] values)
                where T4 : struct
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetHistogramEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetHistogramEXT")]
            public static
            void GetHistogram<T4>(int target, bool reset, int format, int type, [InAttribute, OutAttribute] T4[,] values)
                where T4 : struct
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetHistogramEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetHistogramEXT")]
            public static
            void GetHistogram<T4>(int target, bool reset, int format, int type, [InAttribute, OutAttribute] T4[,,] values)
                where T4 : struct
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetHistogramEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetHistogramEXT")]
            public static
            void GetHistogram<T4>(int target, bool reset, int format, int type, [InAttribute, OutAttribute] ref T4 values)
                where T4 : struct
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetHistogramEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                    values = (T4)values_ptr.Target;
                }
                finally
                {
                    values_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetHistogramParameterfvEXT")]
            public static
            void GetHistogramParameter(OpenTK.Graphics.OpenGL.HistogramTargetEXT target, OpenTK.Graphics.OpenGL.GetHistogramParameterPNameEXT pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetHistogramParameterfvEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPNameEXT)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetHistogramParameterfvEXT")]
            public static
            void GetHistogramParameter(OpenTK.Graphics.OpenGL.HistogramTargetEXT target, OpenTK.Graphics.OpenGL.GetHistogramParameterPNameEXT pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetHistogramParameterfvEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPNameEXT)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetHistogramParameterfvEXT")]
            public static
            unsafe void GetHistogramParameter(OpenTK.Graphics.OpenGL.HistogramTargetEXT target, OpenTK.Graphics.OpenGL.GetHistogramParameterPNameEXT pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetHistogramParameterfvEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPNameEXT)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetHistogramParameterfvEXT")]
            public static
            void GetHistogramParameter(int target, int pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetHistogramParameterfvEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPNameEXT)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetHistogramParameterfvEXT")]
            public static
            void GetHistogramParameter(int target, int pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetHistogramParameterfvEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPNameEXT)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetHistogramParameterfvEXT")]
            public static
            unsafe void GetHistogramParameter(int target, int pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetHistogramParameterfvEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPNameEXT)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetHistogramParameterivEXT")]
            public static
            void GetHistogramParameter(OpenTK.Graphics.OpenGL.HistogramTargetEXT target, OpenTK.Graphics.OpenGL.GetHistogramParameterPNameEXT pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetHistogramParameterivEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPNameEXT)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetHistogramParameterivEXT")]
            public static
            void GetHistogramParameter(OpenTK.Graphics.OpenGL.HistogramTargetEXT target, OpenTK.Graphics.OpenGL.GetHistogramParameterPNameEXT pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetHistogramParameterivEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPNameEXT)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetHistogramParameterivEXT")]
            public static
            unsafe void GetHistogramParameter(OpenTK.Graphics.OpenGL.HistogramTargetEXT target, OpenTK.Graphics.OpenGL.GetHistogramParameterPNameEXT pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetHistogramParameterivEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPNameEXT)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetHistogramParameterivEXT")]
            public static
            void GetHistogramParameter(int target, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetHistogramParameterivEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPNameEXT)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetHistogramParameterivEXT")]
            public static
            void GetHistogramParameter(int target, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetHistogramParameterivEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPNameEXT)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetHistogramParameterivEXT")]
            public static
            unsafe void GetHistogramParameter(int target, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetHistogramParameterivEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (OpenTK.Graphics.OpenGL.GetHistogramParameterPNameEXT)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
            public static
            void GetIntegerIndexed(OpenTK.Graphics.OpenGL.EXT_draw_buffers2 target, Int32 index, [OutAttribute] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (Int32*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
            public static
            void GetIntegerIndexed(OpenTK.Graphics.OpenGL.EXT_draw_buffers2 target, Int32 index, [OutAttribute] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
            public static
            unsafe void GetIntegerIndexed(OpenTK.Graphics.OpenGL.EXT_draw_buffers2 target, Int32 index, [OutAttribute] Int32* data)
            {
                Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (Int32*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
            public static
            void GetIntegerIndexed(OpenTK.Graphics.OpenGL.EXT_draw_buffers2 target, UInt32 index, [OutAttribute] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (Int32*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
            public static
            void GetIntegerIndexed(OpenTK.Graphics.OpenGL.EXT_draw_buffers2 target, UInt32 index, [OutAttribute] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
            public static
            unsafe void GetIntegerIndexed(OpenTK.Graphics.OpenGL.EXT_draw_buffers2 target, UInt32 index, [OutAttribute] Int32* data)
            {
                Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (Int32*)data);
            }

            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
            public static
            void GetIntegerIndexed(int target, Int32 index, [OutAttribute] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (Int32*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
            public static
            void GetIntegerIndexed(int target, Int32 index, [OutAttribute] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
            public static
            unsafe void GetIntegerIndexed(int target, Int32 index, [OutAttribute] Int32* data)
            {
                Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (Int32*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
            public static
            void GetIntegerIndexed(int target, UInt32 index, [OutAttribute] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (Int32*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
            public static
            void GetIntegerIndexed(int target, UInt32 index, [OutAttribute] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
            public static
            unsafe void GetIntegerIndexed(int target, UInt32 index, [OutAttribute] Int32* data)
            {
                Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index, (Int32*)data);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static
            void GetInvariantBoolean(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static
            void GetInvariantBoolean(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static
            unsafe void GetInvariantBoolean(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] bool* data)
            {
                Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static
            void GetInvariantBoolean(Int32 id, int value, [OutAttribute] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static
            void GetInvariantBoolean(Int32 id, int value, [OutAttribute] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static
            unsafe void GetInvariantBoolean(Int32 id, int value, [OutAttribute] bool* data)
            {
                Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static
            void GetInvariantBoolean(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static
            void GetInvariantBoolean(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static
            unsafe void GetInvariantBoolean(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] bool* data)
            {
                Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static
            void GetInvariantBoolean(UInt32 id, int value, [OutAttribute] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static
            void GetInvariantBoolean(UInt32 id, int value, [OutAttribute] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static
            unsafe void GetInvariantBoolean(UInt32 id, int value, [OutAttribute] bool* data)
            {
                Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static
            void GetInvariantFloat(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static
            void GetInvariantFloat(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static
            unsafe void GetInvariantFloat(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Single* data)
            {
                Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static
            void GetInvariantFloat(Int32 id, int value, [OutAttribute] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static
            void GetInvariantFloat(Int32 id, int value, [OutAttribute] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static
            unsafe void GetInvariantFloat(Int32 id, int value, [OutAttribute] Single* data)
            {
                Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static
            void GetInvariantFloat(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static
            void GetInvariantFloat(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static
            unsafe void GetInvariantFloat(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Single* data)
            {
                Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static
            void GetInvariantFloat(UInt32 id, int value, [OutAttribute] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static
            void GetInvariantFloat(UInt32 id, int value, [OutAttribute] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static
            unsafe void GetInvariantFloat(UInt32 id, int value, [OutAttribute] Single* data)
            {
                Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static
            void GetInvariantInteger(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static
            void GetInvariantInteger(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static
            unsafe void GetInvariantInteger(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Int32* data)
            {
                Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static
            void GetInvariantInteger(Int32 id, int value, [OutAttribute] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static
            void GetInvariantInteger(Int32 id, int value, [OutAttribute] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static
            unsafe void GetInvariantInteger(Int32 id, int value, [OutAttribute] Int32* data)
            {
                Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static
            void GetInvariantInteger(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static
            void GetInvariantInteger(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static
            unsafe void GetInvariantInteger(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Int32* data)
            {
                Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static
            void GetInvariantInteger(UInt32 id, int value, [OutAttribute] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static
            void GetInvariantInteger(UInt32 id, int value, [OutAttribute] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static
            unsafe void GetInvariantInteger(UInt32 id, int value, [OutAttribute] Int32* data)
            {
                Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static
            void GetLocalConstantBoolean(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static
            void GetLocalConstantBoolean(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static
            unsafe void GetLocalConstantBoolean(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] bool* data)
            {
                Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static
            void GetLocalConstantBoolean(Int32 id, int value, [OutAttribute] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static
            void GetLocalConstantBoolean(Int32 id, int value, [OutAttribute] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static
            unsafe void GetLocalConstantBoolean(Int32 id, int value, [OutAttribute] bool* data)
            {
                Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static
            void GetLocalConstantBoolean(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static
            void GetLocalConstantBoolean(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static
            unsafe void GetLocalConstantBoolean(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] bool* data)
            {
                Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static
            void GetLocalConstantBoolean(UInt32 id, int value, [OutAttribute] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static
            void GetLocalConstantBoolean(UInt32 id, int value, [OutAttribute] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static
            unsafe void GetLocalConstantBoolean(UInt32 id, int value, [OutAttribute] bool* data)
            {
                Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static
            void GetLocalConstantFloat(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static
            void GetLocalConstantFloat(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static
            unsafe void GetLocalConstantFloat(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Single* data)
            {
                Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static
            void GetLocalConstantFloat(Int32 id, int value, [OutAttribute] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static
            void GetLocalConstantFloat(Int32 id, int value, [OutAttribute] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static
            unsafe void GetLocalConstantFloat(Int32 id, int value, [OutAttribute] Single* data)
            {
                Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static
            void GetLocalConstantFloat(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static
            void GetLocalConstantFloat(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static
            unsafe void GetLocalConstantFloat(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Single* data)
            {
                Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static
            void GetLocalConstantFloat(UInt32 id, int value, [OutAttribute] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static
            void GetLocalConstantFloat(UInt32 id, int value, [OutAttribute] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static
            unsafe void GetLocalConstantFloat(UInt32 id, int value, [OutAttribute] Single* data)
            {
                Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static
            void GetLocalConstantInteger(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static
            void GetLocalConstantInteger(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static
            unsafe void GetLocalConstantInteger(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Int32* data)
            {
                Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static
            void GetLocalConstantInteger(Int32 id, int value, [OutAttribute] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static
            void GetLocalConstantInteger(Int32 id, int value, [OutAttribute] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static
            unsafe void GetLocalConstantInteger(Int32 id, int value, [OutAttribute] Int32* data)
            {
                Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static
            void GetLocalConstantInteger(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static
            void GetLocalConstantInteger(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static
            unsafe void GetLocalConstantInteger(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Int32* data)
            {
                Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static
            void GetLocalConstantInteger(UInt32 id, int value, [OutAttribute] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static
            void GetLocalConstantInteger(UInt32 id, int value, [OutAttribute] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static
            unsafe void GetLocalConstantInteger(UInt32 id, int value, [OutAttribute] Int32* data)
            {
                Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data);
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetMinmaxEXT")]
            public static
            void GetMinmax(int target, bool reset, int format, int type, [OutAttribute] IntPtr values)
            {
                Delegates.glGetMinmaxEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values);
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetMinmaxEXT")]
            public static
            void GetMinmax<T4>(int target, bool reset, int format, int type, [InAttribute, OutAttribute] T4[] values)
                where T4 : struct
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetMinmaxEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetMinmaxEXT")]
            public static
            void GetMinmax<T4>(int target, bool reset, int format, int type, [InAttribute, OutAttribute] T4[,] values)
                where T4 : struct
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetMinmaxEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetMinmaxEXT")]
            public static
            void GetMinmax<T4>(int target, bool reset, int format, int type, [InAttribute, OutAttribute] T4[,,] values)
                where T4 : struct
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetMinmaxEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetMinmaxEXT")]
            public static
            void GetMinmax<T4>(int target, bool reset, int format, int type, [InAttribute, OutAttribute] ref T4 values)
                where T4 : struct
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetMinmaxEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                    values = (T4)values_ptr.Target;
                }
                finally
                {
                    values_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetMinmaxEXT")]
            public static
            void GetMinmax(OpenTK.Graphics.OpenGL.MinmaxTargetEXT target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr values)
            {
                Delegates.glGetMinmaxEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values);
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetMinmaxEXT")]
            public static
            void GetMinmax<T4>(OpenTK.Graphics.OpenGL.MinmaxTargetEXT target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[] values)
                where T4 : struct
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetMinmaxEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetMinmaxEXT")]
            public static
            void GetMinmax<T4>(OpenTK.Graphics.OpenGL.MinmaxTargetEXT target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[,] values)
                where T4 : struct
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetMinmaxEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetMinmaxEXT")]
            public static
            void GetMinmax<T4>(OpenTK.Graphics.OpenGL.MinmaxTargetEXT target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[,,] values)
                where T4 : struct
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetMinmaxEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetMinmaxEXT")]
            public static
            void GetMinmax<T4>(OpenTK.Graphics.OpenGL.MinmaxTargetEXT target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T4 values)
                where T4 : struct
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetMinmaxEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (bool)reset, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                    values = (T4)values_ptr.Target;
                }
                finally
                {
                    values_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetMinmaxParameterfvEXT")]
            public static
            void GetMinmaxParameter(int target, int pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMinmaxParameterfvEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameEXT)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetMinmaxParameterfvEXT")]
            public static
            void GetMinmaxParameter(int target, int pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMinmaxParameterfvEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameEXT)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetMinmaxParameterfvEXT")]
            public static
            unsafe void GetMinmaxParameter(int target, int pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetMinmaxParameterfvEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameEXT)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetMinmaxParameterfvEXT")]
            public static
            void GetMinmaxParameter(OpenTK.Graphics.OpenGL.MinmaxTargetEXT target, OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameEXT pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMinmaxParameterfvEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameEXT)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetMinmaxParameterfvEXT")]
            public static
            void GetMinmaxParameter(OpenTK.Graphics.OpenGL.MinmaxTargetEXT target, OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameEXT pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMinmaxParameterfvEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameEXT)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetMinmaxParameterfvEXT")]
            public static
            unsafe void GetMinmaxParameter(OpenTK.Graphics.OpenGL.MinmaxTargetEXT target, OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameEXT pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetMinmaxParameterfvEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameEXT)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetMinmaxParameterivEXT")]
            public static
            void GetMinmaxParameter(int target, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMinmaxParameterivEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameEXT)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetMinmaxParameterivEXT")]
            public static
            void GetMinmaxParameter(int target, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMinmaxParameterivEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameEXT)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetMinmaxParameterivEXT")]
            public static
            unsafe void GetMinmaxParameter(int target, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetMinmaxParameterivEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameEXT)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetMinmaxParameterivEXT")]
            public static
            void GetMinmaxParameter(OpenTK.Graphics.OpenGL.MinmaxTargetEXT target, OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameEXT pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMinmaxParameterivEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameEXT)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetMinmaxParameterivEXT")]
            public static
            void GetMinmaxParameter(OpenTK.Graphics.OpenGL.MinmaxTargetEXT target, OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameEXT pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMinmaxParameterivEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameEXT)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glGetMinmaxParameterivEXT")]
            public static
            unsafe void GetMinmaxParameter(OpenTK.Graphics.OpenGL.MinmaxTargetEXT target, OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameEXT pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetMinmaxParameterivEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameEXT)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvfvEXT")]
            public static
            void GetMultiTexEnv(int texunit, int target, int pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexEnvfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvfvEXT")]
            public static
            void GetMultiTexEnv(int texunit, int target, int pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexEnvfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvfvEXT")]
            public static
            unsafe void GetMultiTexEnv(int texunit, int target, int pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetMultiTexEnvfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvfvEXT")]
            public static
            void GetMultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexEnvfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvfvEXT")]
            public static
            void GetMultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexEnvfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvfvEXT")]
            public static
            unsafe void GetMultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetMultiTexEnvfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvivEXT")]
            public static
            void GetMultiTexEnv(int texunit, int target, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexEnvivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvivEXT")]
            public static
            void GetMultiTexEnv(int texunit, int target, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexEnvivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvivEXT")]
            public static
            unsafe void GetMultiTexEnv(int texunit, int target, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetMultiTexEnvivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvivEXT")]
            public static
            void GetMultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexEnvivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvivEXT")]
            public static
            void GetMultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexEnvivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvivEXT")]
            public static
            unsafe void GetMultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetMultiTexEnvivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGendvEXT")]
            public static
            void GetMultiTexGen(int texunit, int coord, int pname, [OutAttribute] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexGendvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGendvEXT")]
            public static
            void GetMultiTexGen(int texunit, int coord, int pname, [OutAttribute] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexGendvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGendvEXT")]
            public static
            unsafe void GetMultiTexGen(int texunit, int coord, int pname, [OutAttribute] Double* @params)
            {
                Delegates.glGetMultiTexGendvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGendvEXT")]
            public static
            void GetMultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexGendvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGendvEXT")]
            public static
            void GetMultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexGendvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGendvEXT")]
            public static
            unsafe void GetMultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute] Double* @params)
            {
                Delegates.glGetMultiTexGendvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenfvEXT")]
            public static
            void GetMultiTexGen(int texunit, int coord, int pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexGenfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenfvEXT")]
            public static
            void GetMultiTexGen(int texunit, int coord, int pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexGenfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenfvEXT")]
            public static
            unsafe void GetMultiTexGen(int texunit, int coord, int pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetMultiTexGenfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenfvEXT")]
            public static
            void GetMultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexGenfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenfvEXT")]
            public static
            void GetMultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexGenfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenfvEXT")]
            public static
            unsafe void GetMultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetMultiTexGenfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenivEXT")]
            public static
            void GetMultiTexGen(int texunit, int coord, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexGenivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenivEXT")]
            public static
            void GetMultiTexGen(int texunit, int coord, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexGenivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenivEXT")]
            public static
            unsafe void GetMultiTexGen(int texunit, int coord, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetMultiTexGenivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenivEXT")]
            public static
            void GetMultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexGenivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenivEXT")]
            public static
            void GetMultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexGenivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenivEXT")]
            public static
            unsafe void GetMultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetMultiTexGenivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexImageEXT")]
            public static
            void GetMultiTexImage(int texunit, int target, Int32 level, int format, int type, [OutAttribute] IntPtr pixels)
            {
                Delegates.glGetMultiTexImageEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexImageEXT")]
            public static
            void GetMultiTexImage<T5>(int texunit, int target, Int32 level, int format, int type, [InAttribute, OutAttribute] T5[] pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetMultiTexImageEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexImageEXT")]
            public static
            void GetMultiTexImage<T5>(int texunit, int target, Int32 level, int format, int type, [InAttribute, OutAttribute] T5[,] pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetMultiTexImageEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexImageEXT")]
            public static
            void GetMultiTexImage<T5>(int texunit, int target, Int32 level, int format, int type, [InAttribute, OutAttribute] T5[,,] pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetMultiTexImageEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexImageEXT")]
            public static
            void GetMultiTexImage<T5>(int texunit, int target, Int32 level, int format, int type, [InAttribute, OutAttribute] ref T5 pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetMultiTexImageEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T5)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexImageEXT")]
            public static
            void GetMultiTexImage(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr pixels)
            {
                Delegates.glGetMultiTexImageEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexImageEXT")]
            public static
            void GetMultiTexImage<T5>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[] pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetMultiTexImageEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexImageEXT")]
            public static
            void GetMultiTexImage<T5>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[,] pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetMultiTexImageEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexImageEXT")]
            public static
            void GetMultiTexImage<T5>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[,,] pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetMultiTexImageEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexImageEXT")]
            public static
            void GetMultiTexImage<T5>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T5 pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetMultiTexImageEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T5)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterfvEXT")]
            public static
            void GetMultiTexLevelParameter(int texunit, int target, Int32 level, int pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexLevelParameterfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterfvEXT")]
            public static
            void GetMultiTexLevelParameter(int texunit, int target, Int32 level, int pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexLevelParameterfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterfvEXT")]
            public static
            unsafe void GetMultiTexLevelParameter(int texunit, int target, Int32 level, int pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetMultiTexLevelParameterfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterfvEXT")]
            public static
            void GetMultiTexLevelParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexLevelParameterfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterfvEXT")]
            public static
            void GetMultiTexLevelParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexLevelParameterfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterfvEXT")]
            public static
            unsafe void GetMultiTexLevelParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetMultiTexLevelParameterfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterivEXT")]
            public static
            void GetMultiTexLevelParameter(int texunit, int target, Int32 level, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexLevelParameterivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterivEXT")]
            public static
            void GetMultiTexLevelParameter(int texunit, int target, Int32 level, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexLevelParameterivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterivEXT")]
            public static
            unsafe void GetMultiTexLevelParameter(int texunit, int target, Int32 level, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetMultiTexLevelParameterivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterivEXT")]
            public static
            void GetMultiTexLevelParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexLevelParameterivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterivEXT")]
            public static
            void GetMultiTexLevelParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexLevelParameterivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterivEXT")]
            public static
            unsafe void GetMultiTexLevelParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetMultiTexLevelParameterivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterfvEXT")]
            public static
            void GetMultiTexParameter(int texunit, int target, int pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexParameterfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterfvEXT")]
            public static
            void GetMultiTexParameter(int texunit, int target, int pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexParameterfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterfvEXT")]
            public static
            unsafe void GetMultiTexParameter(int texunit, int target, int pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetMultiTexParameterfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterfvEXT")]
            public static
            void GetMultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexParameterfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterfvEXT")]
            public static
            void GetMultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexParameterfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterfvEXT")]
            public static
            unsafe void GetMultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetMultiTexParameterfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIivEXT")]
            public static
            void GetMultiTexParameterI(int texunit, int target, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIivEXT")]
            public static
            void GetMultiTexParameterI(int texunit, int target, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIivEXT")]
            public static
            unsafe void GetMultiTexParameterI(int texunit, int target, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetMultiTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIivEXT")]
            public static
            void GetMultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIivEXT")]
            public static
            void GetMultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIivEXT")]
            public static
            unsafe void GetMultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetMultiTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIuivEXT")]
            public static
            void GetMultiTexParameterI(int texunit, int target, int pname, [OutAttribute] UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIuivEXT")]
            public static
            void GetMultiTexParameterI(int texunit, int target, int pname, [OutAttribute] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIuivEXT")]
            public static
            unsafe void GetMultiTexParameterI(int texunit, int target, int pname, [OutAttribute] UInt32* @params)
            {
                Delegates.glGetMultiTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIuivEXT")]
            public static
            void GetMultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIuivEXT")]
            public static
            void GetMultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIuivEXT")]
            public static
            unsafe void GetMultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] UInt32* @params)
            {
                Delegates.glGetMultiTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterivEXT")]
            public static
            void GetMultiTexParameter(int texunit, int target, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexParameterivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterivEXT")]
            public static
            void GetMultiTexParameter(int texunit, int target, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexParameterivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterivEXT")]
            public static
            unsafe void GetMultiTexParameter(int texunit, int target, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetMultiTexParameterivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterivEXT")]
            public static
            void GetMultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexParameterivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterivEXT")]
            public static
            void GetMultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexParameterivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterivEXT")]
            public static
            unsafe void GetMultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetMultiTexParameterivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static
            void GetNamedBufferParameter(Int32 buffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static
            void GetNamedBufferParameter(Int32 buffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static
            unsafe void GetNamedBufferParameter(Int32 buffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static
            void GetNamedBufferParameter(Int32 buffer, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static
            void GetNamedBufferParameter(Int32 buffer, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static
            unsafe void GetNamedBufferParameter(Int32 buffer, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static
            void GetNamedBufferParameter(UInt32 buffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static
            void GetNamedBufferParameter(UInt32 buffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static
            unsafe void GetNamedBufferParameter(UInt32 buffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static
            void GetNamedBufferParameter(UInt32 buffer, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static
            void GetNamedBufferParameter(UInt32 buffer, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static
            unsafe void GetNamedBufferParameter(UInt32 buffer, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static
            void GetNamedBufferPointer(Int32 buffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] IntPtr @params)
            {
                Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static
            void GetNamedBufferPointer<T2>(Int32 buffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [InAttribute, OutAttribute] T2[] @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static
            void GetNamedBufferPointer<T2>(Int32 buffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [InAttribute, OutAttribute] T2[,] @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static
            void GetNamedBufferPointer<T2>(Int32 buffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [InAttribute, OutAttribute] T2[,,] @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static
            void GetNamedBufferPointer<T2>(Int32 buffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [InAttribute, OutAttribute] ref T2 @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    @params = (T2)@params_ptr.Target;
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static
            void GetNamedBufferPointer(Int32 buffer, int pname, [OutAttribute] IntPtr @params)
            {
                Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static
            void GetNamedBufferPointer<T2>(Int32 buffer, int pname, [InAttribute, OutAttribute] T2[] @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static
            void GetNamedBufferPointer<T2>(Int32 buffer, int pname, [InAttribute, OutAttribute] T2[,] @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static
            void GetNamedBufferPointer<T2>(Int32 buffer, int pname, [InAttribute, OutAttribute] T2[,,] @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static
            void GetNamedBufferPointer<T2>(Int32 buffer, int pname, [InAttribute, OutAttribute] ref T2 @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    @params = (T2)@params_ptr.Target;
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static
            void GetNamedBufferPointer(UInt32 buffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] IntPtr @params)
            {
                Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static
            void GetNamedBufferPointer<T2>(UInt32 buffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [InAttribute, OutAttribute] T2[] @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static
            void GetNamedBufferPointer<T2>(UInt32 buffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [InAttribute, OutAttribute] T2[,] @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static
            void GetNamedBufferPointer<T2>(UInt32 buffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [InAttribute, OutAttribute] T2[,,] @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static
            void GetNamedBufferPointer<T2>(UInt32 buffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [InAttribute, OutAttribute] ref T2 @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    @params = (T2)@params_ptr.Target;
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static
            void GetNamedBufferPointer(UInt32 buffer, int pname, [OutAttribute] IntPtr @params)
            {
                Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static
            void GetNamedBufferPointer<T2>(UInt32 buffer, int pname, [InAttribute, OutAttribute] T2[] @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static
            void GetNamedBufferPointer<T2>(UInt32 buffer, int pname, [InAttribute, OutAttribute] T2[,] @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static
            void GetNamedBufferPointer<T2>(UInt32 buffer, int pname, [InAttribute, OutAttribute] T2[,,] @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static
            void GetNamedBufferPointer<T2>(UInt32 buffer, int pname, [InAttribute, OutAttribute] ref T2 @params)
                where T2 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    @params = (T2)@params_ptr.Target;
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static
            void GetNamedBufferSubData(Int32 buffer, IntPtr offset, IntPtr size, [OutAttribute] IntPtr data)
            {
                Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static
            void GetNamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static
            void GetNamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static
            void GetNamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static
            void GetNamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T3)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static
            void GetNamedBufferSubData(UInt32 buffer, IntPtr offset, IntPtr size, [OutAttribute] IntPtr data)
            {
                Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static
            void GetNamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static
            void GetNamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static
            void GetNamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static
            void GetNamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T3)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static
            void GetNamedFramebufferAttachmentParameter(Int32 framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static
            void GetNamedFramebufferAttachmentParameter(Int32 framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static
            unsafe void GetNamedFramebufferAttachmentParameter(Int32 framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static
            void GetNamedFramebufferAttachmentParameter(Int32 framebuffer, int attachment, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static
            void GetNamedFramebufferAttachmentParameter(Int32 framebuffer, int attachment, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static
            unsafe void GetNamedFramebufferAttachmentParameter(Int32 framebuffer, int attachment, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static
            void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static
            void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static
            unsafe void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static
            void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, int attachment, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static
            void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, int attachment, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static
            unsafe void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, int attachment, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramivEXT")]
            public static
            void GetNamedProgram(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramivEXT")]
            public static
            unsafe void GetNamedProgram(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetNamedProgramivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramivEXT")]
            public static
            void GetNamedProgram(Int32 program, int target, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramivEXT")]
            public static
            unsafe void GetNamedProgram(Int32 program, int target, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetNamedProgramivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramivEXT")]
            public static
            void GetNamedProgram(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramivEXT")]
            public static
            unsafe void GetNamedProgram(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetNamedProgramivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramivEXT")]
            public static
            void GetNamedProgram(UInt32 program, int target, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramivEXT")]
            public static
            unsafe void GetNamedProgram(UInt32 program, int target, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetNamedProgramivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static
            void GetNamedProgramLocalParameter(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, [OutAttribute] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static
            void GetNamedProgramLocalParameter(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, [OutAttribute] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static
            unsafe void GetNamedProgramLocalParameter(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, [OutAttribute] Double* @params)
            {
                Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static
            void GetNamedProgramLocalParameter(Int32 program, int target, Int32 index, [OutAttribute] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static
            void GetNamedProgramLocalParameter(Int32 program, int target, Int32 index, [OutAttribute] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static
            unsafe void GetNamedProgramLocalParameter(Int32 program, int target, Int32 index, [OutAttribute] Double* @params)
            {
                Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static
            void GetNamedProgramLocalParameter(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [OutAttribute] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static
            void GetNamedProgramLocalParameter(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [OutAttribute] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static
            unsafe void GetNamedProgramLocalParameter(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [OutAttribute] Double* @params)
            {
                Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static
            void GetNamedProgramLocalParameter(UInt32 program, int target, UInt32 index, [OutAttribute] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static
            void GetNamedProgramLocalParameter(UInt32 program, int target, UInt32 index, [OutAttribute] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static
            unsafe void GetNamedProgramLocalParameter(UInt32 program, int target, UInt32 index, [OutAttribute] Double* @params)
            {
                Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static
            void GetNamedProgramLocalParameter(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static
            void GetNamedProgramLocalParameter(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static
            unsafe void GetNamedProgramLocalParameter(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, [OutAttribute] Single* @params)
            {
                Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static
            void GetNamedProgramLocalParameter(Int32 program, int target, Int32 index, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static
            void GetNamedProgramLocalParameter(Int32 program, int target, Int32 index, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static
            unsafe void GetNamedProgramLocalParameter(Int32 program, int target, Int32 index, [OutAttribute] Single* @params)
            {
                Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static
            void GetNamedProgramLocalParameter(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static
            void GetNamedProgramLocalParameter(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static
            unsafe void GetNamedProgramLocalParameter(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [OutAttribute] Single* @params)
            {
                Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static
            void GetNamedProgramLocalParameter(UInt32 program, int target, UInt32 index, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static
            void GetNamedProgramLocalParameter(UInt32 program, int target, UInt32 index, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static
            unsafe void GetNamedProgramLocalParameter(UInt32 program, int target, UInt32 index, [OutAttribute] Single* @params)
            {
                Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static
            void GetNamedProgramLocalParameterI(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static
            void GetNamedProgramLocalParameterI(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static
            unsafe void GetNamedProgramLocalParameterI(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, [OutAttribute] Int32* @params)
            {
                Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static
            void GetNamedProgramLocalParameterI(Int32 program, int target, Int32 index, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static
            void GetNamedProgramLocalParameterI(Int32 program, int target, Int32 index, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static
            unsafe void GetNamedProgramLocalParameterI(Int32 program, int target, Int32 index, [OutAttribute] Int32* @params)
            {
                Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static
            void GetNamedProgramLocalParameterI(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static
            void GetNamedProgramLocalParameterI(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static
            unsafe void GetNamedProgramLocalParameterI(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [OutAttribute] Int32* @params)
            {
                Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static
            void GetNamedProgramLocalParameterI(UInt32 program, int target, UInt32 index, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static
            void GetNamedProgramLocalParameterI(UInt32 program, int target, UInt32 index, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static
            unsafe void GetNamedProgramLocalParameterI(UInt32 program, int target, UInt32 index, [OutAttribute] Int32* @params)
            {
                Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIuivEXT")]
            public static
            void GetNamedProgramLocalParameterI(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [OutAttribute] UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIuivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIuivEXT")]
            public static
            void GetNamedProgramLocalParameterI(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [OutAttribute] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIuivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIuivEXT")]
            public static
            unsafe void GetNamedProgramLocalParameterI(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [OutAttribute] UInt32* @params)
            {
                Delegates.glGetNamedProgramLocalParameterIuivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIuivEXT")]
            public static
            void GetNamedProgramLocalParameterI(UInt32 program, int target, UInt32 index, [OutAttribute] UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIuivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIuivEXT")]
            public static
            void GetNamedProgramLocalParameterI(UInt32 program, int target, UInt32 index, [OutAttribute] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIuivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIuivEXT")]
            public static
            unsafe void GetNamedProgramLocalParameterI(UInt32 program, int target, UInt32 index, [OutAttribute] UInt32* @params)
            {
                Delegates.glGetNamedProgramLocalParameterIuivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (UInt32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static
            void GetNamedProgramString(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] IntPtr @string)
            {
                Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@string);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static
            void GetNamedProgramString<T3>(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [InAttribute, OutAttribute] T3[] @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static
            void GetNamedProgramString<T3>(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [InAttribute, OutAttribute] T3[,] @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static
            void GetNamedProgramString<T3>(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [InAttribute, OutAttribute] T3[,,] @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static
            void GetNamedProgramString<T3>(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [InAttribute, OutAttribute] ref T3 @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    @string = (T3)@string_ptr.Target;
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static
            void GetNamedProgramString(Int32 program, int target, int pname, [OutAttribute] IntPtr @string)
            {
                Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@string);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static
            void GetNamedProgramString<T3>(Int32 program, int target, int pname, [InAttribute, OutAttribute] T3[] @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static
            void GetNamedProgramString<T3>(Int32 program, int target, int pname, [InAttribute, OutAttribute] T3[,] @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static
            void GetNamedProgramString<T3>(Int32 program, int target, int pname, [InAttribute, OutAttribute] T3[,,] @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static
            void GetNamedProgramString<T3>(Int32 program, int target, int pname, [InAttribute, OutAttribute] ref T3 @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    @string = (T3)@string_ptr.Target;
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static
            void GetNamedProgramString(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [OutAttribute] IntPtr @string)
            {
                Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@string);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static
            void GetNamedProgramString<T3>(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [InAttribute, OutAttribute] T3[] @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static
            void GetNamedProgramString<T3>(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [InAttribute, OutAttribute] T3[,] @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static
            void GetNamedProgramString<T3>(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [InAttribute, OutAttribute] T3[,,] @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static
            void GetNamedProgramString<T3>(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access pname, [InAttribute, OutAttribute] ref T3 @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    @string = (T3)@string_ptr.Target;
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static
            void GetNamedProgramString(UInt32 program, int target, int pname, [OutAttribute] IntPtr @string)
            {
                Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@string);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static
            void GetNamedProgramString<T3>(UInt32 program, int target, int pname, [InAttribute, OutAttribute] T3[] @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static
            void GetNamedProgramString<T3>(UInt32 program, int target, int pname, [InAttribute, OutAttribute] T3[,] @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static
            void GetNamedProgramString<T3>(UInt32 program, int target, int pname, [InAttribute, OutAttribute] T3[,,] @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static
            void GetNamedProgramString<T3>(UInt32 program, int target, int pname, [InAttribute, OutAttribute] ref T3 @string)
                where T3 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    @string = (T3)@string_ptr.Target;
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static
            void GetNamedRenderbufferParameter(Int32 renderbuffer, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static
            void GetNamedRenderbufferParameter(Int32 renderbuffer, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static
            unsafe void GetNamedRenderbufferParameter(Int32 renderbuffer, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static
            void GetNamedRenderbufferParameter(Int32 renderbuffer, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static
            void GetNamedRenderbufferParameter(Int32 renderbuffer, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static
            unsafe void GetNamedRenderbufferParameter(Int32 renderbuffer, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static
            void GetNamedRenderbufferParameter(UInt32 renderbuffer, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static
            void GetNamedRenderbufferParameter(UInt32 renderbuffer, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static
            unsafe void GetNamedRenderbufferParameter(UInt32 renderbuffer, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static
            void GetNamedRenderbufferParameter(UInt32 renderbuffer, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static
            void GetNamedRenderbufferParameter(UInt32 renderbuffer, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static
            unsafe void GetNamedRenderbufferParameter(UInt32 renderbuffer, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static
            void GetPointerIndexed(OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, [OutAttribute] IntPtr data)
            {
                Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (IntPtr)data);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static
            void GetPointerIndexed<T2>(OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, [InAttribute, OutAttribute] T2[] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static
            void GetPointerIndexed<T2>(OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, [InAttribute, OutAttribute] T2[,] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static
            void GetPointerIndexed<T2>(OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, [InAttribute, OutAttribute] T2[,,] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static
            void GetPointerIndexed<T2>(OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, [InAttribute, OutAttribute] ref T2 data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T2)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static
            void GetPointerIndexed(OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [OutAttribute] IntPtr data)
            {
                Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (IntPtr)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static
            void GetPointerIndexed<T2>(OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [InAttribute, OutAttribute] T2[] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static
            void GetPointerIndexed<T2>(OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [InAttribute, OutAttribute] T2[,] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static
            void GetPointerIndexed<T2>(OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [InAttribute, OutAttribute] T2[,,] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static
            void GetPointerIndexed<T2>(OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, [InAttribute, OutAttribute] ref T2 data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T2)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static
            void GetPointerIndexed(int target, Int32 index, [OutAttribute] IntPtr data)
            {
                Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (IntPtr)data);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static
            void GetPointerIndexed<T2>(int target, Int32 index, [InAttribute, OutAttribute] T2[] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static
            void GetPointerIndexed<T2>(int target, Int32 index, [InAttribute, OutAttribute] T2[,] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static
            void GetPointerIndexed<T2>(int target, Int32 index, [InAttribute, OutAttribute] T2[,,] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static
            void GetPointerIndexed<T2>(int target, Int32 index, [InAttribute, OutAttribute] ref T2 data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T2)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static
            void GetPointerIndexed(int target, UInt32 index, [OutAttribute] IntPtr data)
            {
                Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (IntPtr)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static
            void GetPointerIndexed<T2>(int target, UInt32 index, [InAttribute, OutAttribute] T2[] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static
            void GetPointerIndexed<T2>(int target, UInt32 index, [InAttribute, OutAttribute] T2[,] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static
            void GetPointerIndexed<T2>(int target, UInt32 index, [InAttribute, OutAttribute] T2[,,] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static
            void GetPointerIndexed<T2>(int target, UInt32 index, [InAttribute, OutAttribute] ref T2 data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T2)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glGetPointervEXT")]
            public static
            void GetPointer(OpenTK.Graphics.OpenGL.GetPointervPName pname, [OutAttribute] IntPtr @params)
            {
                Delegates.glGetPointervEXT((OpenTK.Graphics.OpenGL.GetPointervPName)pname, (IntPtr)@params);
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glGetPointervEXT")]
            public static
            void GetPointer<T1>(OpenTK.Graphics.OpenGL.GetPointervPName pname, [InAttribute, OutAttribute] T1[] @params)
                where T1 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointervEXT((OpenTK.Graphics.OpenGL.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glGetPointervEXT")]
            public static
            void GetPointer<T1>(OpenTK.Graphics.OpenGL.GetPointervPName pname, [InAttribute, OutAttribute] T1[,] @params)
                where T1 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointervEXT((OpenTK.Graphics.OpenGL.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glGetPointervEXT")]
            public static
            void GetPointer<T1>(OpenTK.Graphics.OpenGL.GetPointervPName pname, [InAttribute, OutAttribute] T1[,,] @params)
                where T1 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointervEXT((OpenTK.Graphics.OpenGL.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glGetPointervEXT")]
            public static
            void GetPointer<T1>(OpenTK.Graphics.OpenGL.GetPointervPName pname, [InAttribute, OutAttribute] ref T1 @params)
                where T1 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointervEXT((OpenTK.Graphics.OpenGL.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    @params = (T1)@params_ptr.Target;
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glGetPointervEXT")]
            public static
            void GetPointer(int pname, [OutAttribute] IntPtr @params)
            {
                Delegates.glGetPointervEXT((OpenTK.Graphics.OpenGL.GetPointervPName)pname, (IntPtr)@params);
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glGetPointervEXT")]
            public static
            void GetPointer<T1>(int pname, [InAttribute, OutAttribute] T1[] @params)
                where T1 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointervEXT((OpenTK.Graphics.OpenGL.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glGetPointervEXT")]
            public static
            void GetPointer<T1>(int pname, [InAttribute, OutAttribute] T1[,] @params)
                where T1 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointervEXT((OpenTK.Graphics.OpenGL.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glGetPointervEXT")]
            public static
            void GetPointer<T1>(int pname, [InAttribute, OutAttribute] T1[,,] @params)
                where T1 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointervEXT((OpenTK.Graphics.OpenGL.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glGetPointervEXT")]
            public static
            void GetPointer<T1>(int pname, [InAttribute, OutAttribute] ref T1 @params)
                where T1 : struct
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointervEXT((OpenTK.Graphics.OpenGL.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    @params = (T1)@params_ptr.Target;
                }
                finally
                {
                    @params_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static
            void GetQueryObjecti64(Int32 id, OpenTK.Graphics.OpenGL.EXT_timer_query pname, [OutAttribute] Int64[] @params)
            {
                unsafe
                {
                    fixed (Int64* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (Int64*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static
            void GetQueryObjecti64(Int32 id, OpenTK.Graphics.OpenGL.EXT_timer_query pname, [OutAttribute] out Int64 @params)
            {
                unsafe
                {
                    fixed (Int64* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (Int64*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static
            unsafe void GetQueryObjecti64(Int32 id, OpenTK.Graphics.OpenGL.EXT_timer_query pname, [OutAttribute] Int64* @params)
            {
                Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (Int64*)@params);
            }

            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static
            void GetQueryObjecti64(Int32 id, int pname, [OutAttribute] Int64[] @params)
            {
                unsafe
                {
                    fixed (Int64* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (Int64*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static
            void GetQueryObjecti64(Int32 id, int pname, [OutAttribute] out Int64 @params)
            {
                unsafe
                {
                    fixed (Int64* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (Int64*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static
            unsafe void GetQueryObjecti64(Int32 id, int pname, [OutAttribute] Int64* @params)
            {
                Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (Int64*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static
            void GetQueryObjecti64(UInt32 id, OpenTK.Graphics.OpenGL.EXT_timer_query pname, [OutAttribute] Int64[] @params)
            {
                unsafe
                {
                    fixed (Int64* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (Int64*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static
            void GetQueryObjecti64(UInt32 id, OpenTK.Graphics.OpenGL.EXT_timer_query pname, [OutAttribute] out Int64 @params)
            {
                unsafe
                {
                    fixed (Int64* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (Int64*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static
            unsafe void GetQueryObjecti64(UInt32 id, OpenTK.Graphics.OpenGL.EXT_timer_query pname, [OutAttribute] Int64* @params)
            {
                Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (Int64*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static
            void GetQueryObjecti64(UInt32 id, int pname, [OutAttribute] Int64[] @params)
            {
                unsafe
                {
                    fixed (Int64* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (Int64*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static
            void GetQueryObjecti64(UInt32 id, int pname, [OutAttribute] out Int64 @params)
            {
                unsafe
                {
                    fixed (Int64* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (Int64*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static
            unsafe void GetQueryObjecti64(UInt32 id, int pname, [OutAttribute] Int64* @params)
            {
                Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (Int64*)@params);
            }

            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static
            void GetQueryObjectui64(Int32 id, OpenTK.Graphics.OpenGL.EXT_timer_query pname, [OutAttribute] Int64[] @params)
            {
                unsafe
                {
                    fixed (Int64* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (UInt64*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static
            void GetQueryObjectui64(Int32 id, OpenTK.Graphics.OpenGL.EXT_timer_query pname, [OutAttribute] out Int64 @params)
            {
                unsafe
                {
                    fixed (Int64* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (UInt64*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static
            unsafe void GetQueryObjectui64(Int32 id, OpenTK.Graphics.OpenGL.EXT_timer_query pname, [OutAttribute] Int64* @params)
            {
                Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (UInt64*)@params);
            }

            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static
            void GetQueryObjectui64(Int32 id, int pname, [OutAttribute] Int64[] @params)
            {
                unsafe
                {
                    fixed (Int64* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (UInt64*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static
            void GetQueryObjectui64(Int32 id, int pname, [OutAttribute] out Int64 @params)
            {
                unsafe
                {
                    fixed (Int64* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (UInt64*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static
            unsafe void GetQueryObjectui64(Int32 id, int pname, [OutAttribute] Int64* @params)
            {
                Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (UInt64*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static
            void GetQueryObjectui64(UInt32 id, OpenTK.Graphics.OpenGL.EXT_timer_query pname, [OutAttribute] UInt64[] @params)
            {
                unsafe
                {
                    fixed (UInt64* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (UInt64*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static
            void GetQueryObjectui64(UInt32 id, OpenTK.Graphics.OpenGL.EXT_timer_query pname, [OutAttribute] out UInt64 @params)
            {
                unsafe
                {
                    fixed (UInt64* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (UInt64*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static
            unsafe void GetQueryObjectui64(UInt32 id, OpenTK.Graphics.OpenGL.EXT_timer_query pname, [OutAttribute] UInt64* @params)
            {
                Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (UInt64*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static
            void GetQueryObjectui64(UInt32 id, int pname, [OutAttribute] UInt64[] @params)
            {
                unsafe
                {
                    fixed (UInt64* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (UInt64*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static
            void GetQueryObjectui64(UInt32 id, int pname, [OutAttribute] out UInt64 @params)
            {
                unsafe
                {
                    fixed (UInt64* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (UInt64*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_timer_query", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static
            unsafe void GetQueryObjectui64(UInt32 id, int pname, [OutAttribute] UInt64* @params)
            {
                Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_timer_query)pname, (UInt64*)@params);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGetRenderbufferParameterivEXT")]
            public static
            void GetRenderbufferParameter(int target, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetRenderbufferParameterivEXT((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGetRenderbufferParameterivEXT")]
            public static
            void GetRenderbufferParameter(int target, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetRenderbufferParameterivEXT((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGetRenderbufferParameterivEXT")]
            public static
            unsafe void GetRenderbufferParameter(int target, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetRenderbufferParameterivEXT((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGetRenderbufferParameterivEXT")]
            public static
            void GetRenderbufferParameter(OpenTK.Graphics.OpenGL.RenderbufferTarget target, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetRenderbufferParameterivEXT((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGetRenderbufferParameterivEXT")]
            public static
            void GetRenderbufferParameter(OpenTK.Graphics.OpenGL.RenderbufferTarget target, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetRenderbufferParameterivEXT((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGetRenderbufferParameterivEXT")]
            public static
            unsafe void GetRenderbufferParameter(OpenTK.Graphics.OpenGL.RenderbufferTarget target, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetRenderbufferParameterivEXT((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter(int target, int format, int type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [OutAttribute] IntPtr span)
            {
                Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T5>(int target, int format, int type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [InAttribute, OutAttribute] T5[] span)
                where T5 : struct
            {
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T5>(int target, int format, int type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [InAttribute, OutAttribute] T5[,] span)
                where T5 : struct
            {
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T5>(int target, int format, int type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [InAttribute, OutAttribute] T5[,,] span)
                where T5 : struct
            {
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T5>(int target, int format, int type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [InAttribute, OutAttribute] ref T5 span)
                where T5 : struct
            {
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
                    span = (T5)span_ptr.Target;
                }
                finally
                {
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T4,T5>(int target, int format, int type, [OutAttribute] IntPtr row, [InAttribute, OutAttribute] T4[] column, [InAttribute, OutAttribute] T5[,,] span)
                where T4 : struct
                where T5 : struct
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T4,T5>(int target, int format, int type, [OutAttribute] IntPtr row, [InAttribute, OutAttribute] T4[,] column, [InAttribute, OutAttribute] T5[,,] span)
                where T4 : struct
                where T5 : struct
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T4,T5>(int target, int format, int type, [OutAttribute] IntPtr row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
                where T4 : struct
                where T5 : struct
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T4,T5>(int target, int format, int type, [OutAttribute] IntPtr row, [InAttribute, OutAttribute] ref T4 column, [InAttribute, OutAttribute] T5[,,] span)
                where T4 : struct
                where T5 : struct
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                    column = (T4)column_ptr.Target;
                }
                finally
                {
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T3,T4,T5>(int target, int format, int type, [InAttribute, OutAttribute] T3[] row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
                where T3 : struct
                where T4 : struct
                where T5 : struct
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T3,T4,T5>(int target, int format, int type, [InAttribute, OutAttribute] T3[,] row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
                where T3 : struct
                where T4 : struct
                where T5 : struct
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T3,T4,T5>(int target, int format, int type, [InAttribute, OutAttribute] T3[,,] row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
                where T3 : struct
                where T4 : struct
                where T5 : struct
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T3,T4,T5>(int target, int format, int type, [InAttribute, OutAttribute] ref T3 row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
                where T3 : struct
                where T4 : struct
                where T5 : struct
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                    row = (T3)row_ptr.Target;
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter(OpenTK.Graphics.OpenGL.SeparableTargetEXT target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [OutAttribute] IntPtr span)
            {
                Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T5>(OpenTK.Graphics.OpenGL.SeparableTargetEXT target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [InAttribute, OutAttribute] T5[] span)
                where T5 : struct
            {
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T5>(OpenTK.Graphics.OpenGL.SeparableTargetEXT target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [InAttribute, OutAttribute] T5[,] span)
                where T5 : struct
            {
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T5>(OpenTK.Graphics.OpenGL.SeparableTargetEXT target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [InAttribute, OutAttribute] T5[,,] span)
                where T5 : struct
            {
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T5>(OpenTK.Graphics.OpenGL.SeparableTargetEXT target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [InAttribute, OutAttribute] ref T5 span)
                where T5 : struct
            {
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
                    span = (T5)span_ptr.Target;
                }
                finally
                {
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T4,T5>(OpenTK.Graphics.OpenGL.SeparableTargetEXT target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr row, [InAttribute, OutAttribute] T4[] column, [InAttribute, OutAttribute] T5[,,] span)
                where T4 : struct
                where T5 : struct
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T4,T5>(OpenTK.Graphics.OpenGL.SeparableTargetEXT target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr row, [InAttribute, OutAttribute] T4[,] column, [InAttribute, OutAttribute] T5[,,] span)
                where T4 : struct
                where T5 : struct
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T4,T5>(OpenTK.Graphics.OpenGL.SeparableTargetEXT target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
                where T4 : struct
                where T5 : struct
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T4,T5>(OpenTK.Graphics.OpenGL.SeparableTargetEXT target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr row, [InAttribute, OutAttribute] ref T4 column, [InAttribute, OutAttribute] T5[,,] span)
                where T4 : struct
                where T5 : struct
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                    column = (T4)column_ptr.Target;
                }
                finally
                {
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T3,T4,T5>(OpenTK.Graphics.OpenGL.SeparableTargetEXT target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T3[] row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
                where T3 : struct
                where T4 : struct
                where T5 : struct
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T3,T4,T5>(OpenTK.Graphics.OpenGL.SeparableTargetEXT target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T3[,] row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
                where T3 : struct
                where T4 : struct
                where T5 : struct
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T3,T4,T5>(OpenTK.Graphics.OpenGL.SeparableTargetEXT target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T3[,,] row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
                where T3 : struct
                where T4 : struct
                where T5 : struct
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static
            void GetSeparableFilter<T3,T4,T5>(OpenTK.Graphics.OpenGL.SeparableTargetEXT target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T3 row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
                where T3 : struct
                where T4 : struct
                where T5 : struct
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                    row = (T3)row_ptr.Target;
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glGetTexParameterIivEXT")]
            public static
            void GetTexParameterI(int target, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glGetTexParameterIivEXT")]
            public static
            void GetTexParameterI(int target, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glGetTexParameterIivEXT")]
            public static
            unsafe void GetTexParameterI(int target, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glGetTexParameterIivEXT")]
            public static
            void GetTexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glGetTexParameterIivEXT")]
            public static
            void GetTexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glGetTexParameterIivEXT")]
            public static
            unsafe void GetTexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glGetTexParameterIuivEXT")]
            public static
            void GetTexParameterI(int target, int pname, [OutAttribute] UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glGetTexParameterIuivEXT")]
            public static
            void GetTexParameterI(int target, int pname, [OutAttribute] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glGetTexParameterIuivEXT")]
            public static
            unsafe void GetTexParameterI(int target, int pname, [OutAttribute] UInt32* @params)
            {
                Delegates.glGetTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glGetTexParameterIuivEXT")]
            public static
            void GetTexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glGetTexParameterIuivEXT")]
            public static
            void GetTexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glGetTexParameterIuivEXT")]
            public static
            unsafe void GetTexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] UInt32* @params)
            {
                Delegates.glGetTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static
            void GetTextureImage(Int32 texture, int target, Int32 level, int format, int type, [OutAttribute] IntPtr pixels)
            {
                Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static
            void GetTextureImage<T5>(Int32 texture, int target, Int32 level, int format, int type, [InAttribute, OutAttribute] T5[] pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static
            void GetTextureImage<T5>(Int32 texture, int target, Int32 level, int format, int type, [InAttribute, OutAttribute] T5[,] pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static
            void GetTextureImage<T5>(Int32 texture, int target, Int32 level, int format, int type, [InAttribute, OutAttribute] T5[,,] pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static
            void GetTextureImage<T5>(Int32 texture, int target, Int32 level, int format, int type, [InAttribute, OutAttribute] ref T5 pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T5)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static
            void GetTextureImage(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr pixels)
            {
                Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static
            void GetTextureImage<T5>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[] pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static
            void GetTextureImage<T5>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[,] pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static
            void GetTextureImage<T5>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[,,] pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static
            void GetTextureImage<T5>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T5 pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T5)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static
            void GetTextureImage(UInt32 texture, int target, Int32 level, int format, int type, [OutAttribute] IntPtr pixels)
            {
                Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static
            void GetTextureImage<T5>(UInt32 texture, int target, Int32 level, int format, int type, [InAttribute, OutAttribute] T5[] pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static
            void GetTextureImage<T5>(UInt32 texture, int target, Int32 level, int format, int type, [InAttribute, OutAttribute] T5[,] pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static
            void GetTextureImage<T5>(UInt32 texture, int target, Int32 level, int format, int type, [InAttribute, OutAttribute] T5[,,] pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static
            void GetTextureImage<T5>(UInt32 texture, int target, Int32 level, int format, int type, [InAttribute, OutAttribute] ref T5 pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T5)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static
            void GetTextureImage(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr pixels)
            {
                Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static
            void GetTextureImage<T5>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[] pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static
            void GetTextureImage<T5>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[,] pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static
            void GetTextureImage<T5>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[,,] pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static
            void GetTextureImage<T5>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T5 pixels)
                where T5 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T5)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static
            void GetTextureLevelParameter(Int32 texture, int target, Int32 level, int pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static
            void GetTextureLevelParameter(Int32 texture, int target, Int32 level, int pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static
            unsafe void GetTextureLevelParameter(Int32 texture, int target, Int32 level, int pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static
            void GetTextureLevelParameter(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static
            void GetTextureLevelParameter(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static
            unsafe void GetTextureLevelParameter(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static
            void GetTextureLevelParameter(UInt32 texture, int target, Int32 level, int pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static
            void GetTextureLevelParameter(UInt32 texture, int target, Int32 level, int pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static
            unsafe void GetTextureLevelParameter(UInt32 texture, int target, Int32 level, int pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static
            void GetTextureLevelParameter(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static
            void GetTextureLevelParameter(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static
            unsafe void GetTextureLevelParameter(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static
            void GetTextureLevelParameter(Int32 texture, int target, Int32 level, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static
            void GetTextureLevelParameter(Int32 texture, int target, Int32 level, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static
            unsafe void GetTextureLevelParameter(Int32 texture, int target, Int32 level, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static
            void GetTextureLevelParameter(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static
            void GetTextureLevelParameter(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static
            unsafe void GetTextureLevelParameter(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static
            void GetTextureLevelParameter(UInt32 texture, int target, Int32 level, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static
            void GetTextureLevelParameter(UInt32 texture, int target, Int32 level, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static
            unsafe void GetTextureLevelParameter(UInt32 texture, int target, Int32 level, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static
            void GetTextureLevelParameter(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static
            void GetTextureLevelParameter(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static
            unsafe void GetTextureLevelParameter(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static
            void GetTextureParameter(Int32 texture, int target, int pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static
            void GetTextureParameter(Int32 texture, int target, int pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static
            unsafe void GetTextureParameter(Int32 texture, int target, int pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static
            void GetTextureParameter(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static
            void GetTextureParameter(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static
            unsafe void GetTextureParameter(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static
            void GetTextureParameter(UInt32 texture, int target, int pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static
            void GetTextureParameter(UInt32 texture, int target, int pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static
            unsafe void GetTextureParameter(UInt32 texture, int target, int pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static
            void GetTextureParameter(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static
            void GetTextureParameter(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static
            unsafe void GetTextureParameter(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static
            void GetTextureParameterI(Int32 texture, int target, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static
            void GetTextureParameterI(Int32 texture, int target, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static
            unsafe void GetTextureParameterI(Int32 texture, int target, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static
            void GetTextureParameterI(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static
            void GetTextureParameterI(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static
            unsafe void GetTextureParameterI(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static
            void GetTextureParameterI(UInt32 texture, int target, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static
            void GetTextureParameterI(UInt32 texture, int target, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static
            unsafe void GetTextureParameterI(UInt32 texture, int target, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static
            void GetTextureParameterI(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static
            void GetTextureParameterI(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static
            unsafe void GetTextureParameterI(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIuivEXT")]
            public static
            void GetTextureParameterI(UInt32 texture, int target, int pname, [OutAttribute] UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterIuivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIuivEXT")]
            public static
            void GetTextureParameterI(UInt32 texture, int target, int pname, [OutAttribute] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterIuivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIuivEXT")]
            public static
            unsafe void GetTextureParameterI(UInt32 texture, int target, int pname, [OutAttribute] UInt32* @params)
            {
                Delegates.glGetTextureParameterIuivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIuivEXT")]
            public static
            void GetTextureParameterI(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterIuivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIuivEXT")]
            public static
            void GetTextureParameterI(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterIuivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIuivEXT")]
            public static
            unsafe void GetTextureParameterI(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] UInt32* @params)
            {
                Delegates.glGetTextureParameterIuivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static
            void GetTextureParameter(Int32 texture, int target, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static
            void GetTextureParameter(Int32 texture, int target, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static
            unsafe void GetTextureParameter(Int32 texture, int target, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static
            void GetTextureParameter(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static
            void GetTextureParameter(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static
            unsafe void GetTextureParameter(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static
            void GetTextureParameter(UInt32 texture, int target, int pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static
            void GetTextureParameter(UInt32 texture, int target, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static
            unsafe void GetTextureParameter(UInt32 texture, int target, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static
            void GetTextureParameter(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static
            void GetTextureParameter(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static
            unsafe void GetTextureParameter(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glGetTransformFeedbackVaryingEXT")]
            public static
            void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL.EXT_transform_feedback type, [OutAttribute] StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (OpenTK.Graphics.OpenGL.EXT_transform_feedback* type_ptr = &type)
                    {
                        Delegates.glGetTransformFeedbackVaryingEXT((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.EXT_transform_feedback*)type_ptr, (StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glGetTransformFeedbackVaryingEXT")]
            public static
            void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out int type, [OutAttribute] StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (int* type_ptr = &type)
                    {
                        Delegates.glGetTransformFeedbackVaryingEXT((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.EXT_transform_feedback*)type_ptr, (StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glGetTransformFeedbackVaryingEXT")]
            public static
            unsafe void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL.EXT_transform_feedback* type, [OutAttribute] StringBuilder name)
            {
                Delegates.glGetTransformFeedbackVaryingEXT((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.EXT_transform_feedback*)type, (StringBuilder)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glGetTransformFeedbackVaryingEXT")]
            public static
            unsafe void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] int* type, [OutAttribute] StringBuilder name)
            {
                Delegates.glGetTransformFeedbackVaryingEXT((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.EXT_transform_feedback*)type, (StringBuilder)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glGetTransformFeedbackVaryingEXT")]
            public static
            void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL.EXT_transform_feedback type, [OutAttribute] StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (OpenTK.Graphics.OpenGL.EXT_transform_feedback* type_ptr = &type)
                    {
                        Delegates.glGetTransformFeedbackVaryingEXT((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.EXT_transform_feedback*)type_ptr, (StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glGetTransformFeedbackVaryingEXT")]
            public static
            void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out int type, [OutAttribute] StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (int* type_ptr = &type)
                    {
                        Delegates.glGetTransformFeedbackVaryingEXT((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.EXT_transform_feedback*)type_ptr, (StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glGetTransformFeedbackVaryingEXT")]
            public static
            unsafe void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL.EXT_transform_feedback* type, [OutAttribute] StringBuilder name)
            {
                Delegates.glGetTransformFeedbackVaryingEXT((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.EXT_transform_feedback*)type, (StringBuilder)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glGetTransformFeedbackVaryingEXT")]
            public static
            unsafe void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] int* type, [OutAttribute] StringBuilder name)
            {
                Delegates.glGetTransformFeedbackVaryingEXT((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.EXT_transform_feedback*)type, (StringBuilder)name);
            }

            [AutoGenerated(Category = "EXT_bindable_uniform", Version = "2.0", EntryPoint = "glGetUniformBufferSizeEXT")]
            public static
            Int32 GetUniformBufferSize(Int32 program, Int32 location)
            {
                return Delegates.glGetUniformBufferSizeEXT((UInt32)program, (Int32)location);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_bindable_uniform", Version = "2.0", EntryPoint = "glGetUniformBufferSizeEXT")]
            public static
            Int32 GetUniformBufferSize(UInt32 program, Int32 location)
            {
                return Delegates.glGetUniformBufferSizeEXT((UInt32)program, (Int32)location);
            }

            [AutoGenerated(Category = "EXT_bindable_uniform", Version = "2.0", EntryPoint = "glGetUniformOffsetEXT")]
            public static
            IntPtr GetUniformOffset(Int32 program, Int32 location)
            {
                return Delegates.glGetUniformOffsetEXT((UInt32)program, (Int32)location);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_bindable_uniform", Version = "2.0", EntryPoint = "glGetUniformOffsetEXT")]
            public static
            IntPtr GetUniformOffset(UInt32 program, Int32 location)
            {
                return Delegates.glGetUniformOffsetEXT((UInt32)program, (Int32)location);
            }

            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glGetUniformuivEXT")]
            public static
            void GetUniform(Int32 program, Int32 location, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glGetUniformuivEXT")]
            public static
            void GetUniform(Int32 program, Int32 location, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glGetUniformuivEXT")]
            public static
            unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute] Int32* @params)
            {
                Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glGetUniformuivEXT")]
            public static
            void GetUniform(UInt32 program, Int32 location, [OutAttribute] UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glGetUniformuivEXT")]
            public static
            void GetUniform(UInt32 program, Int32 location, [OutAttribute] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glGetUniformuivEXT")]
            public static
            unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute] UInt32* @params)
            {
                Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantBooleanvEXT")]
            public static
            void GetVariantBoolean(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetVariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantBooleanvEXT")]
            public static
            void GetVariantBoolean(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetVariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantBooleanvEXT")]
            public static
            unsafe void GetVariantBoolean(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] bool* data)
            {
                Delegates.glGetVariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantBooleanvEXT")]
            public static
            void GetVariantBoolean(Int32 id, int value, [OutAttribute] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetVariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantBooleanvEXT")]
            public static
            void GetVariantBoolean(Int32 id, int value, [OutAttribute] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetVariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantBooleanvEXT")]
            public static
            unsafe void GetVariantBoolean(Int32 id, int value, [OutAttribute] bool* data)
            {
                Delegates.glGetVariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantBooleanvEXT")]
            public static
            void GetVariantBoolean(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetVariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantBooleanvEXT")]
            public static
            void GetVariantBoolean(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetVariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantBooleanvEXT")]
            public static
            unsafe void GetVariantBoolean(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] bool* data)
            {
                Delegates.glGetVariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantBooleanvEXT")]
            public static
            void GetVariantBoolean(UInt32 id, int value, [OutAttribute] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetVariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantBooleanvEXT")]
            public static
            void GetVariantBoolean(UInt32 id, int value, [OutAttribute] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetVariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantBooleanvEXT")]
            public static
            unsafe void GetVariantBoolean(UInt32 id, int value, [OutAttribute] bool* data)
            {
                Delegates.glGetVariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (bool*)data);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantFloatvEXT")]
            public static
            void GetVariantFloat(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetVariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantFloatvEXT")]
            public static
            void GetVariantFloat(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetVariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantFloatvEXT")]
            public static
            unsafe void GetVariantFloat(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Single* data)
            {
                Delegates.glGetVariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantFloatvEXT")]
            public static
            void GetVariantFloat(Int32 id, int value, [OutAttribute] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetVariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantFloatvEXT")]
            public static
            void GetVariantFloat(Int32 id, int value, [OutAttribute] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetVariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantFloatvEXT")]
            public static
            unsafe void GetVariantFloat(Int32 id, int value, [OutAttribute] Single* data)
            {
                Delegates.glGetVariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantFloatvEXT")]
            public static
            void GetVariantFloat(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetVariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantFloatvEXT")]
            public static
            void GetVariantFloat(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetVariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantFloatvEXT")]
            public static
            unsafe void GetVariantFloat(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Single* data)
            {
                Delegates.glGetVariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantFloatvEXT")]
            public static
            void GetVariantFloat(UInt32 id, int value, [OutAttribute] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetVariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantFloatvEXT")]
            public static
            void GetVariantFloat(UInt32 id, int value, [OutAttribute] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetVariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantFloatvEXT")]
            public static
            unsafe void GetVariantFloat(UInt32 id, int value, [OutAttribute] Single* data)
            {
                Delegates.glGetVariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Single*)data);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantIntegervEXT")]
            public static
            void GetVariantInteger(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetVariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantIntegervEXT")]
            public static
            void GetVariantInteger(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetVariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantIntegervEXT")]
            public static
            unsafe void GetVariantInteger(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Int32* data)
            {
                Delegates.glGetVariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantIntegervEXT")]
            public static
            void GetVariantInteger(Int32 id, int value, [OutAttribute] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetVariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantIntegervEXT")]
            public static
            void GetVariantInteger(Int32 id, int value, [OutAttribute] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetVariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantIntegervEXT")]
            public static
            unsafe void GetVariantInteger(Int32 id, int value, [OutAttribute] Int32* data)
            {
                Delegates.glGetVariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantIntegervEXT")]
            public static
            void GetVariantInteger(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetVariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantIntegervEXT")]
            public static
            void GetVariantInteger(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetVariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantIntegervEXT")]
            public static
            unsafe void GetVariantInteger(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] Int32* data)
            {
                Delegates.glGetVariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantIntegervEXT")]
            public static
            void GetVariantInteger(UInt32 id, int value, [OutAttribute] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetVariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantIntegervEXT")]
            public static
            void GetVariantInteger(UInt32 id, int value, [OutAttribute] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetVariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantIntegervEXT")]
            public static
            unsafe void GetVariantInteger(UInt32 id, int value, [OutAttribute] Int32* data)
            {
                Delegates.glGetVariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (Int32*)data);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static
            void GetVariantPointer(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] IntPtr data)
            {
                Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (IntPtr)data);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static
            void GetVariantPointer<T2>(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [InAttribute, OutAttribute] T2[] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static
            void GetVariantPointer<T2>(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [InAttribute, OutAttribute] T2[,] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static
            void GetVariantPointer<T2>(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [InAttribute, OutAttribute] T2[,,] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static
            void GetVariantPointer<T2>(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [InAttribute, OutAttribute] ref T2 data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T2)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static
            void GetVariantPointer(Int32 id, int value, [OutAttribute] IntPtr data)
            {
                Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (IntPtr)data);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static
            void GetVariantPointer<T2>(Int32 id, int value, [InAttribute, OutAttribute] T2[] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static
            void GetVariantPointer<T2>(Int32 id, int value, [InAttribute, OutAttribute] T2[,] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static
            void GetVariantPointer<T2>(Int32 id, int value, [InAttribute, OutAttribute] T2[,,] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static
            void GetVariantPointer<T2>(Int32 id, int value, [InAttribute, OutAttribute] ref T2 data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T2)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static
            void GetVariantPointer(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [OutAttribute] IntPtr data)
            {
                Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (IntPtr)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static
            void GetVariantPointer<T2>(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [InAttribute, OutAttribute] T2[] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static
            void GetVariantPointer<T2>(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [InAttribute, OutAttribute] T2[,] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static
            void GetVariantPointer<T2>(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [InAttribute, OutAttribute] T2[,,] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static
            void GetVariantPointer<T2>(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader value, [InAttribute, OutAttribute] ref T2 data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T2)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static
            void GetVariantPointer(UInt32 id, int value, [OutAttribute] IntPtr data)
            {
                Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (IntPtr)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static
            void GetVariantPointer<T2>(UInt32 id, int value, [InAttribute, OutAttribute] T2[] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static
            void GetVariantPointer<T2>(UInt32 id, int value, [InAttribute, OutAttribute] T2[,] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static
            void GetVariantPointer<T2>(UInt32 id, int value, [InAttribute, OutAttribute] T2[,,] data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static
            void GetVariantPointer<T2>(UInt32 id, int value, [InAttribute, OutAttribute] ref T2 data)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T2)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glGetVertexAttribIivEXT")]
            public static
            void GetVertexAttribI(Int32 index, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribIivEXT((UInt32)index, (OpenTK.Graphics.OpenGL.NV_vertex_program4)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glGetVertexAttribIivEXT")]
            public static
            unsafe void GetVertexAttribI(Int32 index, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetVertexAttribIivEXT((UInt32)index, (OpenTK.Graphics.OpenGL.NV_vertex_program4)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glGetVertexAttribIivEXT")]
            public static
            void GetVertexAttribI(Int32 index, OpenTK.Graphics.OpenGL.NV_vertex_program4 pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribIivEXT((UInt32)index, (OpenTK.Graphics.OpenGL.NV_vertex_program4)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glGetVertexAttribIivEXT")]
            public static
            unsafe void GetVertexAttribI(Int32 index, OpenTK.Graphics.OpenGL.NV_vertex_program4 pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetVertexAttribIivEXT((UInt32)index, (OpenTK.Graphics.OpenGL.NV_vertex_program4)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glGetVertexAttribIivEXT")]
            public static
            void GetVertexAttribI(UInt32 index, int pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribIivEXT((UInt32)index, (OpenTK.Graphics.OpenGL.NV_vertex_program4)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glGetVertexAttribIivEXT")]
            public static
            unsafe void GetVertexAttribI(UInt32 index, int pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetVertexAttribIivEXT((UInt32)index, (OpenTK.Graphics.OpenGL.NV_vertex_program4)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glGetVertexAttribIivEXT")]
            public static
            void GetVertexAttribI(UInt32 index, OpenTK.Graphics.OpenGL.NV_vertex_program4 pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribIivEXT((UInt32)index, (OpenTK.Graphics.OpenGL.NV_vertex_program4)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glGetVertexAttribIivEXT")]
            public static
            unsafe void GetVertexAttribI(UInt32 index, OpenTK.Graphics.OpenGL.NV_vertex_program4 pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetVertexAttribIivEXT((UInt32)index, (OpenTK.Graphics.OpenGL.NV_vertex_program4)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glGetVertexAttribIuivEXT")]
            public static
            void GetVertexAttribI(UInt32 index, int pname, [OutAttribute] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribIuivEXT((UInt32)index, (OpenTK.Graphics.OpenGL.NV_vertex_program4)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glGetVertexAttribIuivEXT")]
            public static
            unsafe void GetVertexAttribI(UInt32 index, int pname, [OutAttribute] UInt32* @params)
            {
                Delegates.glGetVertexAttribIuivEXT((UInt32)index, (OpenTK.Graphics.OpenGL.NV_vertex_program4)pname, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glGetVertexAttribIuivEXT")]
            public static
            void GetVertexAttribI(UInt32 index, OpenTK.Graphics.OpenGL.NV_vertex_program4 pname, [OutAttribute] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribIuivEXT((UInt32)index, (OpenTK.Graphics.OpenGL.NV_vertex_program4)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glGetVertexAttribIuivEXT")]
            public static
            unsafe void GetVertexAttribI(UInt32 index, OpenTK.Graphics.OpenGL.NV_vertex_program4 pname, [OutAttribute] UInt32* @params)
            {
                Delegates.glGetVertexAttribIuivEXT((UInt32)index, (OpenTK.Graphics.OpenGL.NV_vertex_program4)pname, (UInt32*)@params);
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glHistogramEXT")]
            public static
            void Histogram(OpenTK.Graphics.OpenGL.HistogramTargetEXT target, Int32 width, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, bool sink)
            {
                Delegates.glHistogramEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (Int32)width, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (bool)sink);
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glHistogramEXT")]
            public static
            void Histogram(int target, Int32 width, int internalformat, bool sink)
            {
                Delegates.glHistogramEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target, (Int32)width, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (bool)sink);
            }

            [AutoGenerated(Category = "EXT_index_func", Version = "1.1", EntryPoint = "glIndexFuncEXT")]
            public static
            void IndexFunc(OpenTK.Graphics.OpenGL.EXT_index_func func, Single @ref)
            {
                Delegates.glIndexFuncEXT((OpenTK.Graphics.OpenGL.EXT_index_func)func, (Single)@ref);
            }

            [AutoGenerated(Category = "EXT_index_func", Version = "1.1", EntryPoint = "glIndexFuncEXT")]
            public static
            void IndexFunc(int func, Single @ref)
            {
                Delegates.glIndexFuncEXT((OpenTK.Graphics.OpenGL.EXT_index_func)func, (Single)@ref);
            }

            [AutoGenerated(Category = "EXT_index_material", Version = "1.1", EntryPoint = "glIndexMaterialEXT")]
            public static
            void IndexMaterial(int face, int mode)
            {
                Delegates.glIndexMaterialEXT((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.EXT_index_material)mode);
            }

            [AutoGenerated(Category = "EXT_index_material", Version = "1.1", EntryPoint = "glIndexMaterialEXT")]
            public static
            void IndexMaterial(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.EXT_index_material mode)
            {
                Delegates.glIndexMaterialEXT((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.EXT_index_material)mode);
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glIndexPointerEXT")]
            public static
            void IndexPointer(OpenTK.Graphics.OpenGL.IndexPointerType type, Int32 stride, Int32 count, IntPtr pointer)
            {
                Delegates.glIndexPointerEXT((OpenTK.Graphics.OpenGL.IndexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glIndexPointerEXT")]
            public static
            void IndexPointer<T3>(OpenTK.Graphics.OpenGL.IndexPointerType type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T3[] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glIndexPointerEXT((OpenTK.Graphics.OpenGL.IndexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glIndexPointerEXT")]
            public static
            void IndexPointer<T3>(OpenTK.Graphics.OpenGL.IndexPointerType type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T3[,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glIndexPointerEXT((OpenTK.Graphics.OpenGL.IndexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glIndexPointerEXT")]
            public static
            void IndexPointer<T3>(OpenTK.Graphics.OpenGL.IndexPointerType type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T3[,,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glIndexPointerEXT((OpenTK.Graphics.OpenGL.IndexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glIndexPointerEXT")]
            public static
            void IndexPointer<T3>(OpenTK.Graphics.OpenGL.IndexPointerType type, Int32 stride, Int32 count, [InAttribute, OutAttribute] ref T3 pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glIndexPointerEXT((OpenTK.Graphics.OpenGL.IndexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T3)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glIndexPointerEXT")]
            public static
            void IndexPointer(int type, Int32 stride, Int32 count, IntPtr pointer)
            {
                Delegates.glIndexPointerEXT((OpenTK.Graphics.OpenGL.IndexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glIndexPointerEXT")]
            public static
            void IndexPointer<T3>(int type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T3[] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glIndexPointerEXT((OpenTK.Graphics.OpenGL.IndexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glIndexPointerEXT")]
            public static
            void IndexPointer<T3>(int type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T3[,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glIndexPointerEXT((OpenTK.Graphics.OpenGL.IndexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glIndexPointerEXT")]
            public static
            void IndexPointer<T3>(int type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T3[,,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glIndexPointerEXT((OpenTK.Graphics.OpenGL.IndexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glIndexPointerEXT")]
            public static
            void IndexPointer<T3>(int type, Int32 stride, Int32 count, [InAttribute, OutAttribute] ref T3 pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glIndexPointerEXT((OpenTK.Graphics.OpenGL.IndexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T3)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glInsertComponentEXT")]
            public static
            void InsertComponent(Int32 res, Int32 src, Int32 num)
            {
                Delegates.glInsertComponentEXT((UInt32)res, (UInt32)src, (UInt32)num);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glInsertComponentEXT")]
            public static
            void InsertComponent(UInt32 res, UInt32 src, UInt32 num)
            {
                Delegates.glInsertComponentEXT((UInt32)res, (UInt32)src, (UInt32)num);
            }

            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glIsEnabledIndexedEXT")]
            public static
            bool IsEnabledIndexed(OpenTK.Graphics.OpenGL.EXT_draw_buffers2 target, Int32 index)
            {
                return Delegates.glIsEnabledIndexedEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glIsEnabledIndexedEXT")]
            public static
            bool IsEnabledIndexed(OpenTK.Graphics.OpenGL.EXT_draw_buffers2 target, UInt32 index)
            {
                return Delegates.glIsEnabledIndexedEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index);
            }

            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glIsEnabledIndexedEXT")]
            public static
            bool IsEnabledIndexed(int target, Int32 index)
            {
                return Delegates.glIsEnabledIndexedEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_draw_buffers2", Version = "2.0", EntryPoint = "glIsEnabledIndexedEXT")]
            public static
            bool IsEnabledIndexed(int target, UInt32 index)
            {
                return Delegates.glIsEnabledIndexedEXT((OpenTK.Graphics.OpenGL.EXT_draw_buffers2)target, (UInt32)index);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glIsFramebufferEXT")]
            public static
            bool IsFramebuffer(Int32 framebuffer)
            {
                return Delegates.glIsFramebufferEXT((UInt32)framebuffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glIsFramebufferEXT")]
            public static
            bool IsFramebuffer(UInt32 framebuffer)
            {
                return Delegates.glIsFramebufferEXT((UInt32)framebuffer);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glIsRenderbufferEXT")]
            public static
            bool IsRenderbuffer(Int32 renderbuffer)
            {
                return Delegates.glIsRenderbufferEXT((UInt32)renderbuffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glIsRenderbufferEXT")]
            public static
            bool IsRenderbuffer(UInt32 renderbuffer)
            {
                return Delegates.glIsRenderbufferEXT((UInt32)renderbuffer);
            }

            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glIsTextureEXT")]
            public static
            bool IsTexture(Int32 texture)
            {
                return Delegates.glIsTextureEXT((UInt32)texture);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glIsTextureEXT")]
            public static
            bool IsTexture(UInt32 texture)
            {
                return Delegates.glIsTextureEXT((UInt32)texture);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glIsVariantEnabledEXT")]
            public static
            bool IsVariantEnabled(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader cap)
            {
                return Delegates.glIsVariantEnabledEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)cap);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glIsVariantEnabledEXT")]
            public static
            bool IsVariantEnabled(Int32 id, int cap)
            {
                return Delegates.glIsVariantEnabledEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)cap);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glIsVariantEnabledEXT")]
            public static
            bool IsVariantEnabled(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader cap)
            {
                return Delegates.glIsVariantEnabledEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)cap);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glIsVariantEnabledEXT")]
            public static
            bool IsVariantEnabled(UInt32 id, int cap)
            {
                return Delegates.glIsVariantEnabledEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)cap);
            }

            [AutoGenerated(Category = "EXT_compiled_vertex_array", Version = "1.1", EntryPoint = "glLockArraysEXT")]
            public static
            void LockArrays(Int32 first, Int32 count)
            {
                Delegates.glLockArraysEXT((Int32)first, (Int32)count);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMapNamedBufferEXT")]
            public static
            unsafe System.IntPtr MapNamedBuffer(Int32 buffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access access)
            {
                return Delegates.glMapNamedBufferEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)access);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMapNamedBufferEXT")]
            public static
            unsafe System.IntPtr MapNamedBuffer(Int32 buffer, int access)
            {
                return Delegates.glMapNamedBufferEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)access);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMapNamedBufferEXT")]
            public static
            unsafe System.IntPtr MapNamedBuffer(UInt32 buffer, OpenTK.Graphics.OpenGL.EXT_direct_state_access access)
            {
                return Delegates.glMapNamedBufferEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)access);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMapNamedBufferEXT")]
            public static
            unsafe System.IntPtr MapNamedBuffer(UInt32 buffer, int access)
            {
                return Delegates.glMapNamedBufferEXT((UInt32)buffer, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)access);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixFrustumEXT")]
            public static
            void MatrixFrustum(int mode, Double left, Double right, Double bottom, Double top, Double zNear, Double zFar)
            {
                Delegates.glMatrixFrustumEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double)left, (Double)right, (Double)bottom, (Double)top, (Double)zNear, (Double)zFar);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixFrustumEXT")]
            public static
            void MatrixFrustum(OpenTK.Graphics.OpenGL.MatrixMode mode, Double left, Double right, Double bottom, Double top, Double zNear, Double zFar)
            {
                Delegates.glMatrixFrustumEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double)left, (Double)right, (Double)bottom, (Double)top, (Double)zNear, (Double)zFar);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoaddEXT")]
            public static
            void MatrixLoad(int mode, Double[] m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glMatrixLoaddEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoaddEXT")]
            public static
            void MatrixLoad(int mode, ref Double m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glMatrixLoaddEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoaddEXT")]
            public static
            unsafe void MatrixLoad(int mode, Double* m)
            {
                Delegates.glMatrixLoaddEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoaddEXT")]
            public static
            void MatrixLoad(OpenTK.Graphics.OpenGL.MatrixMode mode, Double[] m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glMatrixLoaddEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoaddEXT")]
            public static
            void MatrixLoad(OpenTK.Graphics.OpenGL.MatrixMode mode, ref Double m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glMatrixLoaddEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoaddEXT")]
            public static
            unsafe void MatrixLoad(OpenTK.Graphics.OpenGL.MatrixMode mode, Double* m)
            {
                Delegates.glMatrixLoaddEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoadfEXT")]
            public static
            void MatrixLoad(int mode, Single[] m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glMatrixLoadfEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoadfEXT")]
            public static
            void MatrixLoad(int mode, ref Single m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glMatrixLoadfEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoadfEXT")]
            public static
            unsafe void MatrixLoad(int mode, Single* m)
            {
                Delegates.glMatrixLoadfEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoadfEXT")]
            public static
            void MatrixLoad(OpenTK.Graphics.OpenGL.MatrixMode mode, Single[] m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glMatrixLoadfEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoadfEXT")]
            public static
            void MatrixLoad(OpenTK.Graphics.OpenGL.MatrixMode mode, ref Single m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glMatrixLoadfEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoadfEXT")]
            public static
            unsafe void MatrixLoad(OpenTK.Graphics.OpenGL.MatrixMode mode, Single* m)
            {
                Delegates.glMatrixLoadfEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoadIdentityEXT")]
            public static
            void MatrixLoadIdentity(int mode)
            {
                Delegates.glMatrixLoadIdentityEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoadIdentityEXT")]
            public static
            void MatrixLoadIdentity(OpenTK.Graphics.OpenGL.MatrixMode mode)
            {
                Delegates.glMatrixLoadIdentityEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoadTransposedEXT")]
            public static
            void MatrixLoadTranspose(int mode, Double[] m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glMatrixLoadTransposedEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoadTransposedEXT")]
            public static
            void MatrixLoadTranspose(int mode, ref Double m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glMatrixLoadTransposedEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoadTransposedEXT")]
            public static
            unsafe void MatrixLoadTranspose(int mode, Double* m)
            {
                Delegates.glMatrixLoadTransposedEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoadTransposedEXT")]
            public static
            void MatrixLoadTranspose(OpenTK.Graphics.OpenGL.MatrixMode mode, Double[] m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glMatrixLoadTransposedEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoadTransposedEXT")]
            public static
            void MatrixLoadTranspose(OpenTK.Graphics.OpenGL.MatrixMode mode, ref Double m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glMatrixLoadTransposedEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoadTransposedEXT")]
            public static
            unsafe void MatrixLoadTranspose(OpenTK.Graphics.OpenGL.MatrixMode mode, Double* m)
            {
                Delegates.glMatrixLoadTransposedEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoadTransposefEXT")]
            public static
            void MatrixLoadTranspose(int mode, Single[] m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glMatrixLoadTransposefEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoadTransposefEXT")]
            public static
            void MatrixLoadTranspose(int mode, ref Single m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glMatrixLoadTransposefEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoadTransposefEXT")]
            public static
            unsafe void MatrixLoadTranspose(int mode, Single* m)
            {
                Delegates.glMatrixLoadTransposefEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoadTransposefEXT")]
            public static
            void MatrixLoadTranspose(OpenTK.Graphics.OpenGL.MatrixMode mode, Single[] m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glMatrixLoadTransposefEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoadTransposefEXT")]
            public static
            void MatrixLoadTranspose(OpenTK.Graphics.OpenGL.MatrixMode mode, ref Single m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glMatrixLoadTransposefEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixLoadTransposefEXT")]
            public static
            unsafe void MatrixLoadTranspose(OpenTK.Graphics.OpenGL.MatrixMode mode, Single* m)
            {
                Delegates.glMatrixLoadTransposefEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultdEXT")]
            public static
            void MatrixMult(int mode, Double[] m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glMatrixMultdEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultdEXT")]
            public static
            void MatrixMult(int mode, ref Double m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glMatrixMultdEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultdEXT")]
            public static
            unsafe void MatrixMult(int mode, Double* m)
            {
                Delegates.glMatrixMultdEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultdEXT")]
            public static
            void MatrixMult(OpenTK.Graphics.OpenGL.MatrixMode mode, Double[] m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glMatrixMultdEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultdEXT")]
            public static
            void MatrixMult(OpenTK.Graphics.OpenGL.MatrixMode mode, ref Double m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glMatrixMultdEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultdEXT")]
            public static
            unsafe void MatrixMult(OpenTK.Graphics.OpenGL.MatrixMode mode, Double* m)
            {
                Delegates.glMatrixMultdEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultfEXT")]
            public static
            void MatrixMult(int mode, Single[] m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glMatrixMultfEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultfEXT")]
            public static
            void MatrixMult(int mode, ref Single m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glMatrixMultfEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultfEXT")]
            public static
            unsafe void MatrixMult(int mode, Single* m)
            {
                Delegates.glMatrixMultfEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultfEXT")]
            public static
            void MatrixMult(OpenTK.Graphics.OpenGL.MatrixMode mode, Single[] m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glMatrixMultfEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultfEXT")]
            public static
            void MatrixMult(OpenTK.Graphics.OpenGL.MatrixMode mode, ref Single m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glMatrixMultfEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultfEXT")]
            public static
            unsafe void MatrixMult(OpenTK.Graphics.OpenGL.MatrixMode mode, Single* m)
            {
                Delegates.glMatrixMultfEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultTransposedEXT")]
            public static
            void MatrixMultTranspose(int mode, Double[] m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glMatrixMultTransposedEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultTransposedEXT")]
            public static
            void MatrixMultTranspose(int mode, ref Double m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glMatrixMultTransposedEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultTransposedEXT")]
            public static
            unsafe void MatrixMultTranspose(int mode, Double* m)
            {
                Delegates.glMatrixMultTransposedEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultTransposedEXT")]
            public static
            void MatrixMultTranspose(OpenTK.Graphics.OpenGL.MatrixMode mode, Double[] m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glMatrixMultTransposedEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultTransposedEXT")]
            public static
            void MatrixMultTranspose(OpenTK.Graphics.OpenGL.MatrixMode mode, ref Double m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glMatrixMultTransposedEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultTransposedEXT")]
            public static
            unsafe void MatrixMultTranspose(OpenTK.Graphics.OpenGL.MatrixMode mode, Double* m)
            {
                Delegates.glMatrixMultTransposedEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double*)m);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultTransposefEXT")]
            public static
            void MatrixMultTranspose(int mode, Single[] m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glMatrixMultTransposefEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultTransposefEXT")]
            public static
            void MatrixMultTranspose(int mode, ref Single m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glMatrixMultTransposefEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultTransposefEXT")]
            public static
            unsafe void MatrixMultTranspose(int mode, Single* m)
            {
                Delegates.glMatrixMultTransposefEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultTransposefEXT")]
            public static
            void MatrixMultTranspose(OpenTK.Graphics.OpenGL.MatrixMode mode, Single[] m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glMatrixMultTransposefEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultTransposefEXT")]
            public static
            void MatrixMultTranspose(OpenTK.Graphics.OpenGL.MatrixMode mode, ref Single m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glMatrixMultTransposefEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixMultTransposefEXT")]
            public static
            unsafe void MatrixMultTranspose(OpenTK.Graphics.OpenGL.MatrixMode mode, Single* m)
            {
                Delegates.glMatrixMultTransposefEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single*)m);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixOrthoEXT")]
            public static
            void MatrixOrtho(int mode, Double left, Double right, Double bottom, Double top, Double zNear, Double zFar)
            {
                Delegates.glMatrixOrthoEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double)left, (Double)right, (Double)bottom, (Double)top, (Double)zNear, (Double)zFar);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixOrthoEXT")]
            public static
            void MatrixOrtho(OpenTK.Graphics.OpenGL.MatrixMode mode, Double left, Double right, Double bottom, Double top, Double zNear, Double zFar)
            {
                Delegates.glMatrixOrthoEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double)left, (Double)right, (Double)bottom, (Double)top, (Double)zNear, (Double)zFar);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixPopEXT")]
            public static
            void MatrixPop(int mode)
            {
                Delegates.glMatrixPopEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixPopEXT")]
            public static
            void MatrixPop(OpenTK.Graphics.OpenGL.MatrixMode mode)
            {
                Delegates.glMatrixPopEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixPushEXT")]
            public static
            void MatrixPush(int mode)
            {
                Delegates.glMatrixPushEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixPushEXT")]
            public static
            void MatrixPush(OpenTK.Graphics.OpenGL.MatrixMode mode)
            {
                Delegates.glMatrixPushEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixRotatedEXT")]
            public static
            void MatrixRotate(int mode, Double angle, Double x, Double y, Double z)
            {
                Delegates.glMatrixRotatedEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double)angle, (Double)x, (Double)y, (Double)z);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixRotatedEXT")]
            public static
            void MatrixRotate(OpenTK.Graphics.OpenGL.MatrixMode mode, Double angle, Double x, Double y, Double z)
            {
                Delegates.glMatrixRotatedEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double)angle, (Double)x, (Double)y, (Double)z);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixRotatefEXT")]
            public static
            void MatrixRotate(int mode, Single angle, Single x, Single y, Single z)
            {
                Delegates.glMatrixRotatefEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single)angle, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixRotatefEXT")]
            public static
            void MatrixRotate(OpenTK.Graphics.OpenGL.MatrixMode mode, Single angle, Single x, Single y, Single z)
            {
                Delegates.glMatrixRotatefEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single)angle, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixScaledEXT")]
            public static
            void MatrixScale(int mode, Double x, Double y, Double z)
            {
                Delegates.glMatrixScaledEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double)x, (Double)y, (Double)z);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixScaledEXT")]
            public static
            void MatrixScale(OpenTK.Graphics.OpenGL.MatrixMode mode, Double x, Double y, Double z)
            {
                Delegates.glMatrixScaledEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double)x, (Double)y, (Double)z);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixScalefEXT")]
            public static
            void MatrixScale(int mode, Single x, Single y, Single z)
            {
                Delegates.glMatrixScalefEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixScalefEXT")]
            public static
            void MatrixScale(OpenTK.Graphics.OpenGL.MatrixMode mode, Single x, Single y, Single z)
            {
                Delegates.glMatrixScalefEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixTranslatedEXT")]
            public static
            void MatrixTranslate(int mode, Double x, Double y, Double z)
            {
                Delegates.glMatrixTranslatedEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double)x, (Double)y, (Double)z);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixTranslatedEXT")]
            public static
            void MatrixTranslate(OpenTK.Graphics.OpenGL.MatrixMode mode, Double x, Double y, Double z)
            {
                Delegates.glMatrixTranslatedEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Double)x, (Double)y, (Double)z);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixTranslatefEXT")]
            public static
            void MatrixTranslate(int mode, Single x, Single y, Single z)
            {
                Delegates.glMatrixTranslatefEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMatrixTranslatefEXT")]
            public static
            void MatrixTranslate(OpenTK.Graphics.OpenGL.MatrixMode mode, Single x, Single y, Single z)
            {
                Delegates.glMatrixTranslatefEXT((OpenTK.Graphics.OpenGL.MatrixMode)mode, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glMinmaxEXT")]
            public static
            void Minmax(int target, int internalformat, bool sink)
            {
                Delegates.glMinmaxEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (bool)sink);
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glMinmaxEXT")]
            public static
            void Minmax(OpenTK.Graphics.OpenGL.MinmaxTargetEXT target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, bool sink)
            {
                Delegates.glMinmaxEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (bool)sink);
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawArraysEXT")]
            public static
            void MultiDrawArrays(OpenTK.Graphics.OpenGL.BeginMode mode, [OutAttribute] Int32[] first, [OutAttribute] Int32[] count, Int32 primcount)
            {
                unsafe
                {
                    fixed (Int32* first_ptr = first)
                    fixed (Int32* count_ptr = count)
                    {
                        Delegates.glMultiDrawArraysEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawArraysEXT")]
            public static
            void MultiDrawArrays(OpenTK.Graphics.OpenGL.BeginMode mode, [OutAttribute] out Int32 first, [OutAttribute] out Int32 count, Int32 primcount)
            {
                unsafe
                {
                    fixed (Int32* first_ptr = &first)
                    fixed (Int32* count_ptr = &count)
                    {
                        Delegates.glMultiDrawArraysEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                        first = *first_ptr;
                        count = *count_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawArraysEXT")]
            public static
            unsafe void MultiDrawArrays(OpenTK.Graphics.OpenGL.BeginMode mode, [OutAttribute] Int32* first, [OutAttribute] Int32* count, Int32 primcount)
            {
                Delegates.glMultiDrawArraysEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)first, (Int32*)count, (Int32)primcount);
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawArraysEXT")]
            public static
            void MultiDrawArrays(int mode, [OutAttribute] Int32[] first, [OutAttribute] Int32[] count, Int32 primcount)
            {
                unsafe
                {
                    fixed (Int32* first_ptr = first)
                    fixed (Int32* count_ptr = count)
                    {
                        Delegates.glMultiDrawArraysEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawArraysEXT")]
            public static
            void MultiDrawArrays(int mode, [OutAttribute] out Int32 first, [OutAttribute] out Int32 count, Int32 primcount)
            {
                unsafe
                {
                    fixed (Int32* first_ptr = &first)
                    fixed (Int32* count_ptr = &count)
                    {
                        Delegates.glMultiDrawArraysEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                        first = *first_ptr;
                        count = *count_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawArraysEXT")]
            public static
            unsafe void MultiDrawArrays(int mode, [OutAttribute] Int32* first, [OutAttribute] Int32* count, Int32 primcount)
            {
                Delegates.glMultiDrawArraysEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)first, (Int32*)count, (Int32)primcount);
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            void MultiDrawElements(OpenTK.Graphics.OpenGL.BeginMode mode, Int32[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    {
                        Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
            {
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
            {
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
            {
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
            {
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                            indices = (T3)indices_ptr.Target;
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            void MultiDrawElements(OpenTK.Graphics.OpenGL.BeginMode mode, ref Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    {
                        Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, ref Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
            {
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, ref Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
            {
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, ref Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
            {
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, ref Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
            {
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                            indices = (T3)indices_ptr.Target;
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            unsafe void MultiDrawElements(OpenTK.Graphics.OpenGL.BeginMode mode, Int32* count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices, Int32 primcount)
            {
                Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32* count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32* count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32* count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32* count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    indices = (T3)indices_ptr.Target;
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            void MultiDrawElements(int mode, Int32[] count, int type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    {
                        Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            void MultiDrawElements<T3>(int mode, Int32[] count, int type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
            {
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            void MultiDrawElements<T3>(int mode, Int32[] count, int type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
            {
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            void MultiDrawElements<T3>(int mode, Int32[] count, int type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
            {
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            void MultiDrawElements<T3>(int mode, Int32[] count, int type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
            {
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                            indices = (T3)indices_ptr.Target;
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            void MultiDrawElements(int mode, ref Int32 count, int type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    {
                        Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            void MultiDrawElements<T3>(int mode, ref Int32 count, int type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
            {
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            void MultiDrawElements<T3>(int mode, ref Int32 count, int type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
            {
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            void MultiDrawElements<T3>(int mode, ref Int32 count, int type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
            {
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
            }

            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            void MultiDrawElements<T3>(int mode, ref Int32 count, int type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
            {
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                            indices = (T3)indices_ptr.Target;
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            unsafe void MultiDrawElements(int mode, Int32* count, int type, IntPtr indices, Int32 primcount)
            {
                Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            unsafe void MultiDrawElements<T3>(int mode, Int32* count, int type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            unsafe void MultiDrawElements<T3>(int mode, Int32* count, int type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            unsafe void MultiDrawElements<T3>(int mode, Int32* count, int type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static
            unsafe void MultiDrawElements<T3>(int mode, Int32* count, int type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    indices = (T3)indices_ptr.Target;
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexBufferEXT")]
            public static
            void MultiTexBuffer(int texunit, int target, int internalformat, Int32 buffer)
            {
                Delegates.glMultiTexBufferEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexBufferEXT")]
            public static
            void MultiTexBuffer(int texunit, int target, int internalformat, UInt32 buffer)
            {
                Delegates.glMultiTexBufferEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (UInt32)buffer);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexBufferEXT")]
            public static
            void MultiTexBuffer(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 buffer)
            {
                Delegates.glMultiTexBufferEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexBufferEXT")]
            public static
            void MultiTexBuffer(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, UInt32 buffer)
            {
                Delegates.glMultiTexBufferEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (UInt32)buffer);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexCoordPointerEXT")]
            public static
            void MultiTexCoordPointer(int texunit, Int32 size, int type, Int32 stride, IntPtr pointer)
            {
                Delegates.glMultiTexCoordPointerEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexCoordPointerEXT")]
            public static
            void MultiTexCoordPointer<T4>(int texunit, Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexCoordPointerEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexCoordPointerEXT")]
            public static
            void MultiTexCoordPointer<T4>(int texunit, Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexCoordPointerEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexCoordPointerEXT")]
            public static
            void MultiTexCoordPointer<T4>(int texunit, Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexCoordPointerEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexCoordPointerEXT")]
            public static
            void MultiTexCoordPointer<T4>(int texunit, Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexCoordPointerEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T4)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexCoordPointerEXT")]
            public static
            void MultiTexCoordPointer(OpenTK.Graphics.OpenGL.TextureUnit texunit, Int32 size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, Int32 stride, IntPtr pointer)
            {
                Delegates.glMultiTexCoordPointerEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexCoordPointerEXT")]
            public static
            void MultiTexCoordPointer<T4>(OpenTK.Graphics.OpenGL.TextureUnit texunit, Int32 size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexCoordPointerEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexCoordPointerEXT")]
            public static
            void MultiTexCoordPointer<T4>(OpenTK.Graphics.OpenGL.TextureUnit texunit, Int32 size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexCoordPointerEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexCoordPointerEXT")]
            public static
            void MultiTexCoordPointer<T4>(OpenTK.Graphics.OpenGL.TextureUnit texunit, Int32 size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexCoordPointerEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexCoordPointerEXT")]
            public static
            void MultiTexCoordPointer<T4>(OpenTK.Graphics.OpenGL.TextureUnit texunit, Int32 size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexCoordPointerEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T4)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvfEXT")]
            public static
            void MultiTexEnv(int texunit, int target, int pname, Single param)
            {
                Delegates.glMultiTexEnvfEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single)param);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvfEXT")]
            public static
            void MultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, Single param)
            {
                Delegates.glMultiTexEnvfEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single)param);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvfvEXT")]
            public static
            void MultiTexEnv(int texunit, int target, int pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glMultiTexEnvfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvfvEXT")]
            public static
            unsafe void MultiTexEnv(int texunit, int target, int pname, Single* @params)
            {
                Delegates.glMultiTexEnvfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvfvEXT")]
            public static
            void MultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glMultiTexEnvfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvfvEXT")]
            public static
            unsafe void MultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, Single* @params)
            {
                Delegates.glMultiTexEnvfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnviEXT")]
            public static
            void MultiTexEnv(int texunit, int target, int pname, Int32 param)
            {
                Delegates.glMultiTexEnviEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32)param);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnviEXT")]
            public static
            void MultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, Int32 param)
            {
                Delegates.glMultiTexEnviEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32)param);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvivEXT")]
            public static
            void MultiTexEnv(int texunit, int target, int pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glMultiTexEnvivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvivEXT")]
            public static
            unsafe void MultiTexEnv(int texunit, int target, int pname, Int32* @params)
            {
                Delegates.glMultiTexEnvivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvivEXT")]
            public static
            void MultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glMultiTexEnvivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvivEXT")]
            public static
            unsafe void MultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, Int32* @params)
            {
                Delegates.glMultiTexEnvivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureEnvTarget)target, (OpenTK.Graphics.OpenGL.TextureEnvParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGendEXT")]
            public static
            void MultiTexGend(int texunit, int coord, int pname, Double param)
            {
                Delegates.glMultiTexGendEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double)param);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGendEXT")]
            public static
            void MultiTexGend(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, Double param)
            {
                Delegates.glMultiTexGendEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double)param);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGendvEXT")]
            public static
            void MultiTexGen(int texunit, int coord, int pname, Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glMultiTexGendvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGendvEXT")]
            public static
            void MultiTexGen(int texunit, int coord, int pname, ref Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glMultiTexGendvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGendvEXT")]
            public static
            unsafe void MultiTexGen(int texunit, int coord, int pname, Double* @params)
            {
                Delegates.glMultiTexGendvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGendvEXT")]
            public static
            void MultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glMultiTexGendvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGendvEXT")]
            public static
            void MultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, ref Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glMultiTexGendvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGendvEXT")]
            public static
            unsafe void MultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, Double* @params)
            {
                Delegates.glMultiTexGendvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Double*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenfEXT")]
            public static
            void MultiTexGen(int texunit, int coord, int pname, Single param)
            {
                Delegates.glMultiTexGenfEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single)param);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenfEXT")]
            public static
            void MultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, Single param)
            {
                Delegates.glMultiTexGenfEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single)param);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenfvEXT")]
            public static
            void MultiTexGen(int texunit, int coord, int pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glMultiTexGenfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenfvEXT")]
            public static
            unsafe void MultiTexGen(int texunit, int coord, int pname, Single* @params)
            {
                Delegates.glMultiTexGenfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenfvEXT")]
            public static
            void MultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glMultiTexGenfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenfvEXT")]
            public static
            unsafe void MultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, Single* @params)
            {
                Delegates.glMultiTexGenfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGeniEXT")]
            public static
            void MultiTexGen(int texunit, int coord, int pname, Int32 param)
            {
                Delegates.glMultiTexGeniEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32)param);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGeniEXT")]
            public static
            void MultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, Int32 param)
            {
                Delegates.glMultiTexGeniEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32)param);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenivEXT")]
            public static
            void MultiTexGen(int texunit, int coord, int pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glMultiTexGenivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenivEXT")]
            public static
            unsafe void MultiTexGen(int texunit, int coord, int pname, Int32* @params)
            {
                Delegates.glMultiTexGenivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenivEXT")]
            public static
            void MultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glMultiTexGenivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenivEXT")]
            public static
            unsafe void MultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, Int32* @params)
            {
                Delegates.glMultiTexGenivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureCoordName)coord, (OpenTK.Graphics.OpenGL.TextureGenParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage1DEXT")]
            public static
            void MultiTexImage1D(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 border, int format, int type, IntPtr pixels)
            {
                Delegates.glMultiTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage1DEXT")]
            public static
            void MultiTexImage1D<T8>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 border, int format, int type, [InAttribute, OutAttribute] T8[] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage1DEXT")]
            public static
            void MultiTexImage1D<T8>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 border, int format, int type, [InAttribute, OutAttribute] T8[,] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage1DEXT")]
            public static
            void MultiTexImage1D<T8>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 border, int format, int type, [InAttribute, OutAttribute] T8[,,] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage1DEXT")]
            public static
            void MultiTexImage1D<T8>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 border, int format, int type, [InAttribute, OutAttribute] ref T8 pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T8)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage1DEXT")]
            public static
            void MultiTexImage1D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
            {
                Delegates.glMultiTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage1DEXT")]
            public static
            void MultiTexImage1D<T8>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage1DEXT")]
            public static
            void MultiTexImage1D<T8>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage1DEXT")]
            public static
            void MultiTexImage1D<T8>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage1DEXT")]
            public static
            void MultiTexImage1D<T8>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T8)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage2DEXT")]
            public static
            void MultiTexImage2D(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, int format, int type, IntPtr pixels)
            {
                Delegates.glMultiTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage2DEXT")]
            public static
            void MultiTexImage2D<T9>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, int format, int type, [InAttribute, OutAttribute] T9[] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage2DEXT")]
            public static
            void MultiTexImage2D<T9>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, int format, int type, [InAttribute, OutAttribute] T9[,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage2DEXT")]
            public static
            void MultiTexImage2D<T9>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, int format, int type, [InAttribute, OutAttribute] T9[,,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage2DEXT")]
            public static
            void MultiTexImage2D<T9>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, int format, int type, [InAttribute, OutAttribute] ref T9 pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T9)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage2DEXT")]
            public static
            void MultiTexImage2D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
            {
                Delegates.glMultiTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage2DEXT")]
            public static
            void MultiTexImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage2DEXT")]
            public static
            void MultiTexImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage2DEXT")]
            public static
            void MultiTexImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[,,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage2DEXT")]
            public static
            void MultiTexImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T9 pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T9)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage3DEXT")]
            public static
            void MultiTexImage3D(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, IntPtr pixels)
            {
                Delegates.glMultiTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage3DEXT")]
            public static
            void MultiTexImage3D<T10>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, [InAttribute, OutAttribute] T10[] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage3DEXT")]
            public static
            void MultiTexImage3D<T10>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, [InAttribute, OutAttribute] T10[,] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage3DEXT")]
            public static
            void MultiTexImage3D<T10>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, [InAttribute, OutAttribute] T10[,,] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage3DEXT")]
            public static
            void MultiTexImage3D<T10>(int texunit, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, [InAttribute, OutAttribute] ref T10 pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T10)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage3DEXT")]
            public static
            void MultiTexImage3D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
            {
                Delegates.glMultiTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage3DEXT")]
            public static
            void MultiTexImage3D<T10>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T10[] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage3DEXT")]
            public static
            void MultiTexImage3D<T10>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T10[,] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage3DEXT")]
            public static
            void MultiTexImage3D<T10>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T10[,,] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage3DEXT")]
            public static
            void MultiTexImage3D<T10>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T10 pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T10)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterfEXT")]
            public static
            void MultiTexParameter(int texunit, int target, int pname, Single param)
            {
                Delegates.glMultiTexParameterfEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single)param);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterfEXT")]
            public static
            void MultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Single param)
            {
                Delegates.glMultiTexParameterfEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single)param);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterfvEXT")]
            public static
            void MultiTexParameter(int texunit, int target, int pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glMultiTexParameterfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterfvEXT")]
            public static
            unsafe void MultiTexParameter(int texunit, int target, int pname, Single* @params)
            {
                Delegates.glMultiTexParameterfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterfvEXT")]
            public static
            void MultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glMultiTexParameterfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterfvEXT")]
            public static
            unsafe void MultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Single* @params)
            {
                Delegates.glMultiTexParameterfvEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameteriEXT")]
            public static
            void MultiTexParameter(int texunit, int target, int pname, Int32 param)
            {
                Delegates.glMultiTexParameteriEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32)param);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameteriEXT")]
            public static
            void MultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32 param)
            {
                Delegates.glMultiTexParameteriEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32)param);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIivEXT")]
            public static
            void MultiTexParameterI(int texunit, int target, int pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glMultiTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIivEXT")]
            public static
            void MultiTexParameterI(int texunit, int target, int pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glMultiTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIivEXT")]
            public static
            unsafe void MultiTexParameterI(int texunit, int target, int pname, Int32* @params)
            {
                Delegates.glMultiTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIivEXT")]
            public static
            void MultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glMultiTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIivEXT")]
            public static
            void MultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glMultiTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIivEXT")]
            public static
            unsafe void MultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32* @params)
            {
                Delegates.glMultiTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIuivEXT")]
            public static
            void MultiTexParameterI(int texunit, int target, int pname, UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glMultiTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIuivEXT")]
            public static
            void MultiTexParameterI(int texunit, int target, int pname, ref UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glMultiTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIuivEXT")]
            public static
            unsafe void MultiTexParameterI(int texunit, int target, int pname, UInt32* @params)
            {
                Delegates.glMultiTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIuivEXT")]
            public static
            void MultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glMultiTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIuivEXT")]
            public static
            void MultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, ref UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glMultiTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIuivEXT")]
            public static
            unsafe void MultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, UInt32* @params)
            {
                Delegates.glMultiTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterivEXT")]
            public static
            void MultiTexParameter(int texunit, int target, int pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glMultiTexParameterivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterivEXT")]
            public static
            unsafe void MultiTexParameter(int texunit, int target, int pname, Int32* @params)
            {
                Delegates.glMultiTexParameterivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterivEXT")]
            public static
            void MultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glMultiTexParameterivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterivEXT")]
            public static
            unsafe void MultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32* @params)
            {
                Delegates.glMultiTexParameterivEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexRenderbufferEXT")]
            public static
            void MultiTexRenderbuffer(int texunit, int target, Int32 renderbuffer)
            {
                Delegates.glMultiTexRenderbufferEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (UInt32)renderbuffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexRenderbufferEXT")]
            public static
            void MultiTexRenderbuffer(int texunit, int target, UInt32 renderbuffer)
            {
                Delegates.glMultiTexRenderbufferEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (UInt32)renderbuffer);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexRenderbufferEXT")]
            public static
            void MultiTexRenderbuffer(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 renderbuffer)
            {
                Delegates.glMultiTexRenderbufferEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (UInt32)renderbuffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexRenderbufferEXT")]
            public static
            void MultiTexRenderbuffer(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, UInt32 renderbuffer)
            {
                Delegates.glMultiTexRenderbufferEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (UInt32)renderbuffer);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage1DEXT")]
            public static
            void MultiTexSubImage1D(int texunit, int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, IntPtr pixels)
            {
                Delegates.glMultiTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage1DEXT")]
            public static
            void MultiTexSubImage1D<T7>(int texunit, int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, [InAttribute, OutAttribute] T7[] pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage1DEXT")]
            public static
            void MultiTexSubImage1D<T7>(int texunit, int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, [InAttribute, OutAttribute] T7[,] pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage1DEXT")]
            public static
            void MultiTexSubImage1D<T7>(int texunit, int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, [InAttribute, OutAttribute] T7[,,] pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage1DEXT")]
            public static
            void MultiTexSubImage1D<T7>(int texunit, int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, [InAttribute, OutAttribute] ref T7 pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T7)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage1DEXT")]
            public static
            void MultiTexSubImage1D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
            {
                Delegates.glMultiTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage1DEXT")]
            public static
            void MultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T7[] pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage1DEXT")]
            public static
            void MultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T7[,] pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage1DEXT")]
            public static
            void MultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T7[,,] pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage1DEXT")]
            public static
            void MultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T7 pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T7)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage2DEXT")]
            public static
            void MultiTexSubImage2D(int texunit, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, IntPtr pixels)
            {
                Delegates.glMultiTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage2DEXT")]
            public static
            void MultiTexSubImage2D<T9>(int texunit, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T9[] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage2DEXT")]
            public static
            void MultiTexSubImage2D<T9>(int texunit, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T9[,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage2DEXT")]
            public static
            void MultiTexSubImage2D<T9>(int texunit, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T9[,,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage2DEXT")]
            public static
            void MultiTexSubImage2D<T9>(int texunit, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] ref T9 pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T9)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage2DEXT")]
            public static
            void MultiTexSubImage2D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
            {
                Delegates.glMultiTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage2DEXT")]
            public static
            void MultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage2DEXT")]
            public static
            void MultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage2DEXT")]
            public static
            void MultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[,,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage2DEXT")]
            public static
            void MultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T9 pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T9)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage3DEXT")]
            public static
            void MultiTexSubImage3D(int texunit, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, IntPtr pixels)
            {
                Delegates.glMultiTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage3DEXT")]
            public static
            void MultiTexSubImage3D<T11>(int texunit, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, [InAttribute, OutAttribute] T11[] pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage3DEXT")]
            public static
            void MultiTexSubImage3D<T11>(int texunit, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, [InAttribute, OutAttribute] T11[,] pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage3DEXT")]
            public static
            void MultiTexSubImage3D<T11>(int texunit, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, [InAttribute, OutAttribute] T11[,,] pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage3DEXT")]
            public static
            void MultiTexSubImage3D<T11>(int texunit, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, [InAttribute, OutAttribute] ref T11 pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T11)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage3DEXT")]
            public static
            void MultiTexSubImage3D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
            {
                Delegates.glMultiTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage3DEXT")]
            public static
            void MultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T11[] pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage3DEXT")]
            public static
            void MultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T11[,] pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage3DEXT")]
            public static
            void MultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T11[,,] pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage3DEXT")]
            public static
            void MultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T11 pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureUnit)texunit, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T11)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static
            void NamedBufferData(Int32 buffer, IntPtr size, IntPtr data, OpenTK.Graphics.OpenGL.EXT_direct_state_access usage)
            {
                Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)usage);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static
            void NamedBufferData(Int32 buffer, IntPtr size, IntPtr data, int usage)
            {
                Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)usage);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static
            void NamedBufferData<T2>(Int32 buffer, IntPtr size, [InAttribute, OutAttribute] T2[] data, OpenTK.Graphics.OpenGL.EXT_direct_state_access usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.EXT_direct_state_access)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static
            void NamedBufferData<T2>(Int32 buffer, IntPtr size, [InAttribute, OutAttribute] T2[] data, int usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.EXT_direct_state_access)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static
            void NamedBufferData<T2>(Int32 buffer, IntPtr size, [InAttribute, OutAttribute] T2[,] data, OpenTK.Graphics.OpenGL.EXT_direct_state_access usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.EXT_direct_state_access)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static
            void NamedBufferData<T2>(Int32 buffer, IntPtr size, [InAttribute, OutAttribute] T2[,] data, int usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.EXT_direct_state_access)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static
            void NamedBufferData<T2>(Int32 buffer, IntPtr size, [InAttribute, OutAttribute] T2[,,] data, OpenTK.Graphics.OpenGL.EXT_direct_state_access usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.EXT_direct_state_access)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static
            void NamedBufferData<T2>(Int32 buffer, IntPtr size, [InAttribute, OutAttribute] T2[,,] data, int usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.EXT_direct_state_access)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static
            void NamedBufferData<T2>(Int32 buffer, IntPtr size, [InAttribute, OutAttribute] ref T2 data, OpenTK.Graphics.OpenGL.EXT_direct_state_access usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.EXT_direct_state_access)usage);
                    data = (T2)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static
            void NamedBufferData<T2>(Int32 buffer, IntPtr size, [InAttribute, OutAttribute] ref T2 data, int usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.EXT_direct_state_access)usage);
                    data = (T2)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static
            void NamedBufferData(UInt32 buffer, IntPtr size, IntPtr data, OpenTK.Graphics.OpenGL.EXT_direct_state_access usage)
            {
                Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)usage);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static
            void NamedBufferData(UInt32 buffer, IntPtr size, IntPtr data, int usage)
            {
                Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)usage);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static
            void NamedBufferData<T2>(UInt32 buffer, IntPtr size, [InAttribute, OutAttribute] T2[] data, OpenTK.Graphics.OpenGL.EXT_direct_state_access usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.EXT_direct_state_access)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static
            void NamedBufferData<T2>(UInt32 buffer, IntPtr size, [InAttribute, OutAttribute] T2[] data, int usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.EXT_direct_state_access)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static
            void NamedBufferData<T2>(UInt32 buffer, IntPtr size, [InAttribute, OutAttribute] T2[,] data, OpenTK.Graphics.OpenGL.EXT_direct_state_access usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.EXT_direct_state_access)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static
            void NamedBufferData<T2>(UInt32 buffer, IntPtr size, [InAttribute, OutAttribute] T2[,] data, int usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.EXT_direct_state_access)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static
            void NamedBufferData<T2>(UInt32 buffer, IntPtr size, [InAttribute, OutAttribute] T2[,,] data, OpenTK.Graphics.OpenGL.EXT_direct_state_access usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.EXT_direct_state_access)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static
            void NamedBufferData<T2>(UInt32 buffer, IntPtr size, [InAttribute, OutAttribute] T2[,,] data, int usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.EXT_direct_state_access)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static
            void NamedBufferData<T2>(UInt32 buffer, IntPtr size, [InAttribute, OutAttribute] ref T2 data, OpenTK.Graphics.OpenGL.EXT_direct_state_access usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.EXT_direct_state_access)usage);
                    data = (T2)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static
            void NamedBufferData<T2>(UInt32 buffer, IntPtr size, [InAttribute, OutAttribute] ref T2 data, int usage)
                where T2 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.EXT_direct_state_access)usage);
                    data = (T2)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static
            void NamedBufferSubData(Int32 buffer, IntPtr offset, IntPtr size, IntPtr data)
            {
                Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static
            void NamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static
            void NamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static
            void NamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static
            void NamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T3)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static
            void NamedBufferSubData(UInt32 buffer, IntPtr offset, IntPtr size, IntPtr data)
            {
                Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static
            void NamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static
            void NamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static
            void NamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static
            void NamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
                where T3 : struct
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T3)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferRenderbufferEXT")]
            public static
            void NamedFramebufferRenderbuffer(Int32 framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.RenderbufferTarget renderbuffertarget, Int32 renderbuffer)
            {
                Delegates.glNamedFramebufferRenderbufferEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferRenderbufferEXT")]
            public static
            void NamedFramebufferRenderbuffer(Int32 framebuffer, int attachment, int renderbuffertarget, Int32 renderbuffer)
            {
                Delegates.glNamedFramebufferRenderbufferEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferRenderbufferEXT")]
            public static
            void NamedFramebufferRenderbuffer(UInt32 framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.RenderbufferTarget renderbuffertarget, UInt32 renderbuffer)
            {
                Delegates.glNamedFramebufferRenderbufferEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferRenderbufferEXT")]
            public static
            void NamedFramebufferRenderbuffer(UInt32 framebuffer, int attachment, int renderbuffertarget, UInt32 renderbuffer)
            {
                Delegates.glNamedFramebufferRenderbufferEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTexture1DEXT")]
            public static
            void NamedFramebufferTexture1D(Int32 framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, Int32 texture, Int32 level)
            {
                Delegates.glNamedFramebufferTexture1DEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTexture1DEXT")]
            public static
            void NamedFramebufferTexture1D(Int32 framebuffer, int attachment, int textarget, Int32 texture, Int32 level)
            {
                Delegates.glNamedFramebufferTexture1DEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTexture1DEXT")]
            public static
            void NamedFramebufferTexture1D(UInt32 framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, UInt32 texture, Int32 level)
            {
                Delegates.glNamedFramebufferTexture1DEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTexture1DEXT")]
            public static
            void NamedFramebufferTexture1D(UInt32 framebuffer, int attachment, int textarget, UInt32 texture, Int32 level)
            {
                Delegates.glNamedFramebufferTexture1DEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTexture2DEXT")]
            public static
            void NamedFramebufferTexture2D(Int32 framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, Int32 texture, Int32 level)
            {
                Delegates.glNamedFramebufferTexture2DEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTexture2DEXT")]
            public static
            void NamedFramebufferTexture2D(Int32 framebuffer, int attachment, int textarget, Int32 texture, Int32 level)
            {
                Delegates.glNamedFramebufferTexture2DEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTexture2DEXT")]
            public static
            void NamedFramebufferTexture2D(UInt32 framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, UInt32 texture, Int32 level)
            {
                Delegates.glNamedFramebufferTexture2DEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTexture2DEXT")]
            public static
            void NamedFramebufferTexture2D(UInt32 framebuffer, int attachment, int textarget, UInt32 texture, Int32 level)
            {
                Delegates.glNamedFramebufferTexture2DEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTexture3DEXT")]
            public static
            void NamedFramebufferTexture3D(Int32 framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, Int32 texture, Int32 level, Int32 zoffset)
            {
                Delegates.glNamedFramebufferTexture3DEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTexture3DEXT")]
            public static
            void NamedFramebufferTexture3D(Int32 framebuffer, int attachment, int textarget, Int32 texture, Int32 level, Int32 zoffset)
            {
                Delegates.glNamedFramebufferTexture3DEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTexture3DEXT")]
            public static
            void NamedFramebufferTexture3D(UInt32 framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, UInt32 texture, Int32 level, Int32 zoffset)
            {
                Delegates.glNamedFramebufferTexture3DEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTexture3DEXT")]
            public static
            void NamedFramebufferTexture3D(UInt32 framebuffer, int attachment, int textarget, UInt32 texture, Int32 level, Int32 zoffset)
            {
                Delegates.glNamedFramebufferTexture3DEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTextureEXT")]
            public static
            void NamedFramebufferTexture(Int32 framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, Int32 texture, Int32 level)
            {
                Delegates.glNamedFramebufferTextureEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTextureEXT")]
            public static
            void NamedFramebufferTexture(Int32 framebuffer, int attachment, Int32 texture, Int32 level)
            {
                Delegates.glNamedFramebufferTextureEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTextureEXT")]
            public static
            void NamedFramebufferTexture(UInt32 framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, UInt32 texture, Int32 level)
            {
                Delegates.glNamedFramebufferTextureEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTextureEXT")]
            public static
            void NamedFramebufferTexture(UInt32 framebuffer, int attachment, UInt32 texture, Int32 level)
            {
                Delegates.glNamedFramebufferTextureEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTextureFaceEXT")]
            public static
            void NamedFramebufferTextureFace(Int32 framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, Int32 texture, Int32 level, OpenTK.Graphics.OpenGL.TextureTarget face)
            {
                Delegates.glNamedFramebufferTextureFaceEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (OpenTK.Graphics.OpenGL.TextureTarget)face);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTextureFaceEXT")]
            public static
            void NamedFramebufferTextureFace(Int32 framebuffer, int attachment, Int32 texture, Int32 level, int face)
            {
                Delegates.glNamedFramebufferTextureFaceEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (OpenTK.Graphics.OpenGL.TextureTarget)face);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTextureFaceEXT")]
            public static
            void NamedFramebufferTextureFace(UInt32 framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, UInt32 texture, Int32 level, OpenTK.Graphics.OpenGL.TextureTarget face)
            {
                Delegates.glNamedFramebufferTextureFaceEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (OpenTK.Graphics.OpenGL.TextureTarget)face);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTextureFaceEXT")]
            public static
            void NamedFramebufferTextureFace(UInt32 framebuffer, int attachment, UInt32 texture, Int32 level, int face)
            {
                Delegates.glNamedFramebufferTextureFaceEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (OpenTK.Graphics.OpenGL.TextureTarget)face);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTextureLayerEXT")]
            public static
            void NamedFramebufferTextureLayer(Int32 framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, Int32 texture, Int32 level, Int32 layer)
            {
                Delegates.glNamedFramebufferTextureLayerEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTextureLayerEXT")]
            public static
            void NamedFramebufferTextureLayer(Int32 framebuffer, int attachment, Int32 texture, Int32 level, Int32 layer)
            {
                Delegates.glNamedFramebufferTextureLayerEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTextureLayerEXT")]
            public static
            void NamedFramebufferTextureLayer(UInt32 framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 layer)
            {
                Delegates.glNamedFramebufferTextureLayerEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTextureLayerEXT")]
            public static
            void NamedFramebufferTextureLayer(UInt32 framebuffer, int attachment, UInt32 texture, Int32 level, Int32 layer)
            {
                Delegates.glNamedFramebufferTextureLayerEXT((UInt32)framebuffer, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dEXT")]
            public static
            void NamedProgramLocalParameter4(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glNamedProgramLocalParameter4dEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dEXT")]
            public static
            void NamedProgramLocalParameter4(Int32 program, int target, Int32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glNamedProgramLocalParameter4dEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dEXT")]
            public static
            void NamedProgramLocalParameter4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glNamedProgramLocalParameter4dEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dEXT")]
            public static
            void NamedProgramLocalParameter4(UInt32 program, int target, UInt32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glNamedProgramLocalParameter4dEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static
            void NamedProgramLocalParameter4(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static
            void NamedProgramLocalParameter4(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, ref Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static
            unsafe void NamedProgramLocalParameter4(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, Double* @params)
            {
                Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static
            void NamedProgramLocalParameter4(Int32 program, int target, Int32 index, Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static
            void NamedProgramLocalParameter4(Int32 program, int target, Int32 index, ref Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static
            unsafe void NamedProgramLocalParameter4(Int32 program, int target, Int32 index, Double* @params)
            {
                Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static
            void NamedProgramLocalParameter4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static
            void NamedProgramLocalParameter4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, ref Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static
            unsafe void NamedProgramLocalParameter4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, Double* @params)
            {
                Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static
            void NamedProgramLocalParameter4(UInt32 program, int target, UInt32 index, Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static
            void NamedProgramLocalParameter4(UInt32 program, int target, UInt32 index, ref Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static
            unsafe void NamedProgramLocalParameter4(UInt32 program, int target, UInt32 index, Double* @params)
            {
                Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Double*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fEXT")]
            public static
            void NamedProgramLocalParameter4(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glNamedProgramLocalParameter4fEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fEXT")]
            public static
            void NamedProgramLocalParameter4(Int32 program, int target, Int32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glNamedProgramLocalParameter4fEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fEXT")]
            public static
            void NamedProgramLocalParameter4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glNamedProgramLocalParameter4fEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fEXT")]
            public static
            void NamedProgramLocalParameter4(UInt32 program, int target, UInt32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glNamedProgramLocalParameter4fEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static
            void NamedProgramLocalParameter4(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static
            void NamedProgramLocalParameter4(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static
            unsafe void NamedProgramLocalParameter4(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, Single* @params)
            {
                Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static
            void NamedProgramLocalParameter4(Int32 program, int target, Int32 index, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static
            void NamedProgramLocalParameter4(Int32 program, int target, Int32 index, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static
            unsafe void NamedProgramLocalParameter4(Int32 program, int target, Int32 index, Single* @params)
            {
                Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static
            void NamedProgramLocalParameter4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static
            void NamedProgramLocalParameter4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static
            unsafe void NamedProgramLocalParameter4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, Single* @params)
            {
                Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static
            void NamedProgramLocalParameter4(UInt32 program, int target, UInt32 index, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static
            void NamedProgramLocalParameter4(UInt32 program, int target, UInt32 index, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static
            unsafe void NamedProgramLocalParameter4(UInt32 program, int target, UInt32 index, Single* @params)
            {
                Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4iEXT")]
            public static
            void NamedProgramLocalParameterI4(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                Delegates.glNamedProgramLocalParameterI4iEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4iEXT")]
            public static
            void NamedProgramLocalParameterI4(Int32 program, int target, Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                Delegates.glNamedProgramLocalParameterI4iEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4iEXT")]
            public static
            void NamedProgramLocalParameterI4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                Delegates.glNamedProgramLocalParameterI4iEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4iEXT")]
            public static
            void NamedProgramLocalParameterI4(UInt32 program, int target, UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                Delegates.glNamedProgramLocalParameterI4iEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static
            void NamedProgramLocalParameterI4(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static
            void NamedProgramLocalParameterI4(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static
            unsafe void NamedProgramLocalParameterI4(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, Int32* @params)
            {
                Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static
            void NamedProgramLocalParameterI4(Int32 program, int target, Int32 index, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static
            void NamedProgramLocalParameterI4(Int32 program, int target, Int32 index, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static
            unsafe void NamedProgramLocalParameterI4(Int32 program, int target, Int32 index, Int32* @params)
            {
                Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static
            void NamedProgramLocalParameterI4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static
            void NamedProgramLocalParameterI4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static
            unsafe void NamedProgramLocalParameterI4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, Int32* @params)
            {
                Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static
            void NamedProgramLocalParameterI4(UInt32 program, int target, UInt32 index, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static
            void NamedProgramLocalParameterI4(UInt32 program, int target, UInt32 index, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static
            unsafe void NamedProgramLocalParameterI4(UInt32 program, int target, UInt32 index, Int32* @params)
            {
                Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4uiEXT")]
            public static
            void NamedProgramLocalParameterI4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w)
            {
                Delegates.glNamedProgramLocalParameterI4uiEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4uiEXT")]
            public static
            void NamedProgramLocalParameterI4(UInt32 program, int target, UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w)
            {
                Delegates.glNamedProgramLocalParameterI4uiEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4uivEXT")]
            public static
            void NamedProgramLocalParameterI4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameterI4uivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4uivEXT")]
            public static
            void NamedProgramLocalParameterI4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, ref UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameterI4uivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4uivEXT")]
            public static
            unsafe void NamedProgramLocalParameterI4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, UInt32* @params)
            {
                Delegates.glNamedProgramLocalParameterI4uivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4uivEXT")]
            public static
            void NamedProgramLocalParameterI4(UInt32 program, int target, UInt32 index, UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameterI4uivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4uivEXT")]
            public static
            void NamedProgramLocalParameterI4(UInt32 program, int target, UInt32 index, ref UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameterI4uivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4uivEXT")]
            public static
            unsafe void NamedProgramLocalParameterI4(UInt32 program, int target, UInt32 index, UInt32* @params)
            {
                Delegates.glNamedProgramLocalParameterI4uivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (UInt32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static
            void NamedProgramLocalParameters4(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, Int32 count, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static
            void NamedProgramLocalParameters4(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, Int32 count, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static
            unsafe void NamedProgramLocalParameters4(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, Int32 count, Single* @params)
            {
                Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static
            void NamedProgramLocalParameters4(Int32 program, int target, Int32 index, Int32 count, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static
            void NamedProgramLocalParameters4(Int32 program, int target, Int32 index, Int32 count, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static
            unsafe void NamedProgramLocalParameters4(Int32 program, int target, Int32 index, Int32 count, Single* @params)
            {
                Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static
            void NamedProgramLocalParameters4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, Int32 count, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static
            void NamedProgramLocalParameters4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, Int32 count, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static
            unsafe void NamedProgramLocalParameters4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, Int32 count, Single* @params)
            {
                Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static
            void NamedProgramLocalParameters4(UInt32 program, int target, UInt32 index, Int32 count, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static
            void NamedProgramLocalParameters4(UInt32 program, int target, UInt32 index, Int32 count, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static
            unsafe void NamedProgramLocalParameters4(UInt32 program, int target, UInt32 index, Int32 count, Single* @params)
            {
                Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static
            void NamedProgramLocalParametersI4(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, Int32 count, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static
            void NamedProgramLocalParametersI4(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, Int32 count, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static
            unsafe void NamedProgramLocalParametersI4(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, Int32 index, Int32 count, Int32* @params)
            {
                Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static
            void NamedProgramLocalParametersI4(Int32 program, int target, Int32 index, Int32 count, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static
            void NamedProgramLocalParametersI4(Int32 program, int target, Int32 index, Int32 count, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static
            unsafe void NamedProgramLocalParametersI4(Int32 program, int target, Int32 index, Int32 count, Int32* @params)
            {
                Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static
            void NamedProgramLocalParametersI4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, Int32 count, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static
            void NamedProgramLocalParametersI4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, Int32 count, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static
            unsafe void NamedProgramLocalParametersI4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, Int32 count, Int32* @params)
            {
                Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static
            void NamedProgramLocalParametersI4(UInt32 program, int target, UInt32 index, Int32 count, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static
            void NamedProgramLocalParametersI4(UInt32 program, int target, UInt32 index, Int32 count, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static
            unsafe void NamedProgramLocalParametersI4(UInt32 program, int target, UInt32 index, Int32 count, Int32* @params)
            {
                Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4uivEXT")]
            public static
            void NamedProgramLocalParametersI4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, Int32 count, UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParametersI4uivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4uivEXT")]
            public static
            void NamedProgramLocalParametersI4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, Int32 count, ref UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParametersI4uivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4uivEXT")]
            public static
            unsafe void NamedProgramLocalParametersI4(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, UInt32 index, Int32 count, UInt32* @params)
            {
                Delegates.glNamedProgramLocalParametersI4uivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4uivEXT")]
            public static
            void NamedProgramLocalParametersI4(UInt32 program, int target, UInt32 index, Int32 count, UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParametersI4uivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4uivEXT")]
            public static
            void NamedProgramLocalParametersI4(UInt32 program, int target, UInt32 index, Int32 count, ref UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParametersI4uivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4uivEXT")]
            public static
            unsafe void NamedProgramLocalParametersI4(UInt32 program, int target, UInt32 index, Int32 count, UInt32* @params)
            {
                Delegates.glNamedProgramLocalParametersI4uivEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (UInt32)index, (Int32)count, (UInt32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static
            void NamedProgramString(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access format, Int32 len, IntPtr @string)
            {
                Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)format, (Int32)len, (IntPtr)@string);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static
            void NamedProgramString<T4>(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access format, Int32 len, [InAttribute, OutAttribute] T4[] @string)
                where T4 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static
            void NamedProgramString<T4>(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access format, Int32 len, [InAttribute, OutAttribute] T4[,] @string)
                where T4 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static
            void NamedProgramString<T4>(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access format, Int32 len, [InAttribute, OutAttribute] T4[,,] @string)
                where T4 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static
            void NamedProgramString<T4>(Int32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access format, Int32 len, [InAttribute, OutAttribute] ref T4 @string)
                where T4 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    @string = (T4)@string_ptr.Target;
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static
            void NamedProgramString(Int32 program, int target, int format, Int32 len, IntPtr @string)
            {
                Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)format, (Int32)len, (IntPtr)@string);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static
            void NamedProgramString<T4>(Int32 program, int target, int format, Int32 len, [InAttribute, OutAttribute] T4[] @string)
                where T4 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static
            void NamedProgramString<T4>(Int32 program, int target, int format, Int32 len, [InAttribute, OutAttribute] T4[,] @string)
                where T4 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static
            void NamedProgramString<T4>(Int32 program, int target, int format, Int32 len, [InAttribute, OutAttribute] T4[,,] @string)
                where T4 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static
            void NamedProgramString<T4>(Int32 program, int target, int format, Int32 len, [InAttribute, OutAttribute] ref T4 @string)
                where T4 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    @string = (T4)@string_ptr.Target;
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static
            void NamedProgramString(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access format, Int32 len, IntPtr @string)
            {
                Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)format, (Int32)len, (IntPtr)@string);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static
            void NamedProgramString<T4>(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access format, Int32 len, [InAttribute, OutAttribute] T4[] @string)
                where T4 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static
            void NamedProgramString<T4>(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access format, Int32 len, [InAttribute, OutAttribute] T4[,] @string)
                where T4 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static
            void NamedProgramString<T4>(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access format, Int32 len, [InAttribute, OutAttribute] T4[,,] @string)
                where T4 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static
            void NamedProgramString<T4>(UInt32 program, OpenTK.Graphics.OpenGL.EXT_direct_state_access target, OpenTK.Graphics.OpenGL.EXT_direct_state_access format, Int32 len, [InAttribute, OutAttribute] ref T4 @string)
                where T4 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    @string = (T4)@string_ptr.Target;
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static
            void NamedProgramString(UInt32 program, int target, int format, Int32 len, IntPtr @string)
            {
                Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)format, (Int32)len, (IntPtr)@string);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static
            void NamedProgramString<T4>(UInt32 program, int target, int format, Int32 len, [InAttribute, OutAttribute] T4[] @string)
                where T4 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static
            void NamedProgramString<T4>(UInt32 program, int target, int format, Int32 len, [InAttribute, OutAttribute] T4[,] @string)
                where T4 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static
            void NamedProgramString<T4>(UInt32 program, int target, int format, Int32 len, [InAttribute, OutAttribute] T4[,,] @string)
                where T4 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static
            void NamedProgramString<T4>(UInt32 program, int target, int format, Int32 len, [InAttribute, OutAttribute] ref T4 @string)
                where T4 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    @string = (T4)@string_ptr.Target;
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageEXT")]
            public static
            void NamedRenderbufferStorage(Int32 renderbuffer, int internalformat, Int32 width, Int32 height)
            {
                Delegates.glNamedRenderbufferStorageEXT((UInt32)renderbuffer, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageEXT")]
            public static
            void NamedRenderbufferStorage(Int32 renderbuffer, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height)
            {
                Delegates.glNamedRenderbufferStorageEXT((UInt32)renderbuffer, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageEXT")]
            public static
            void NamedRenderbufferStorage(UInt32 renderbuffer, int internalformat, Int32 width, Int32 height)
            {
                Delegates.glNamedRenderbufferStorageEXT((UInt32)renderbuffer, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageEXT")]
            public static
            void NamedRenderbufferStorage(UInt32 renderbuffer, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height)
            {
                Delegates.glNamedRenderbufferStorageEXT((UInt32)renderbuffer, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageMultisampleCoverageEXT")]
            public static
            void NamedRenderbufferStorageMultisampleCoverage(Int32 renderbuffer, Int32 coverageSamples, Int32 colorSamples, int internalformat, Int32 width, Int32 height)
            {
                Delegates.glNamedRenderbufferStorageMultisampleCoverageEXT((UInt32)renderbuffer, (Int32)coverageSamples, (Int32)colorSamples, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageMultisampleCoverageEXT")]
            public static
            void NamedRenderbufferStorageMultisampleCoverage(Int32 renderbuffer, Int32 coverageSamples, Int32 colorSamples, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height)
            {
                Delegates.glNamedRenderbufferStorageMultisampleCoverageEXT((UInt32)renderbuffer, (Int32)coverageSamples, (Int32)colorSamples, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageMultisampleCoverageEXT")]
            public static
            void NamedRenderbufferStorageMultisampleCoverage(UInt32 renderbuffer, Int32 coverageSamples, Int32 colorSamples, int internalformat, Int32 width, Int32 height)
            {
                Delegates.glNamedRenderbufferStorageMultisampleCoverageEXT((UInt32)renderbuffer, (Int32)coverageSamples, (Int32)colorSamples, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageMultisampleCoverageEXT")]
            public static
            void NamedRenderbufferStorageMultisampleCoverage(UInt32 renderbuffer, Int32 coverageSamples, Int32 colorSamples, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height)
            {
                Delegates.glNamedRenderbufferStorageMultisampleCoverageEXT((UInt32)renderbuffer, (Int32)coverageSamples, (Int32)colorSamples, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageMultisampleEXT")]
            public static
            void NamedRenderbufferStorageMultisample(Int32 renderbuffer, Int32 samples, int internalformat, Int32 width, Int32 height)
            {
                Delegates.glNamedRenderbufferStorageMultisampleEXT((UInt32)renderbuffer, (Int32)samples, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageMultisampleEXT")]
            public static
            void NamedRenderbufferStorageMultisample(Int32 renderbuffer, Int32 samples, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height)
            {
                Delegates.glNamedRenderbufferStorageMultisampleEXT((UInt32)renderbuffer, (Int32)samples, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageMultisampleEXT")]
            public static
            void NamedRenderbufferStorageMultisample(UInt32 renderbuffer, Int32 samples, int internalformat, Int32 width, Int32 height)
            {
                Delegates.glNamedRenderbufferStorageMultisampleEXT((UInt32)renderbuffer, (Int32)samples, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageMultisampleEXT")]
            public static
            void NamedRenderbufferStorageMultisample(UInt32 renderbuffer, Int32 samples, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height)
            {
                Delegates.glNamedRenderbufferStorageMultisampleEXT((UInt32)renderbuffer, (Int32)samples, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glNormalPointerEXT")]
            public static
            void NormalPointer(int type, Int32 stride, Int32 count, IntPtr pointer)
            {
                Delegates.glNormalPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glNormalPointerEXT")]
            public static
            void NormalPointer<T3>(int type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T3[] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glNormalPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glNormalPointerEXT")]
            public static
            void NormalPointer<T3>(int type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T3[,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glNormalPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glNormalPointerEXT")]
            public static
            void NormalPointer<T3>(int type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T3[,,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glNormalPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glNormalPointerEXT")]
            public static
            void NormalPointer<T3>(int type, Int32 stride, Int32 count, [InAttribute, OutAttribute] ref T3 pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glNormalPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T3)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glNormalPointerEXT")]
            public static
            void NormalPointer(OpenTK.Graphics.OpenGL.NormalPointerType type, Int32 stride, Int32 count, IntPtr pointer)
            {
                Delegates.glNormalPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glNormalPointerEXT")]
            public static
            void NormalPointer<T3>(OpenTK.Graphics.OpenGL.NormalPointerType type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T3[] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glNormalPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glNormalPointerEXT")]
            public static
            void NormalPointer<T3>(OpenTK.Graphics.OpenGL.NormalPointerType type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T3[,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glNormalPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glNormalPointerEXT")]
            public static
            void NormalPointer<T3>(OpenTK.Graphics.OpenGL.NormalPointerType type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T3[,,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glNormalPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glNormalPointerEXT")]
            public static
            void NormalPointer<T3>(OpenTK.Graphics.OpenGL.NormalPointerType type, Int32 stride, Int32 count, [InAttribute, OutAttribute] ref T3 pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glNormalPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T3)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_pixel_transform", Version = "1.1", EntryPoint = "glPixelTransformParameterfEXT")]
            public static
            void PixelTransformParameter(OpenTK.Graphics.OpenGL.EXT_pixel_transform target, OpenTK.Graphics.OpenGL.EXT_pixel_transform pname, Single param)
            {
                Delegates.glPixelTransformParameterfEXT((OpenTK.Graphics.OpenGL.EXT_pixel_transform)target, (OpenTK.Graphics.OpenGL.EXT_pixel_transform)pname, (Single)param);
            }

            [AutoGenerated(Category = "EXT_pixel_transform", Version = "1.1", EntryPoint = "glPixelTransformParameterfEXT")]
            public static
            void PixelTransformParameter(int target, int pname, Single param)
            {
                Delegates.glPixelTransformParameterfEXT((OpenTK.Graphics.OpenGL.EXT_pixel_transform)target, (OpenTK.Graphics.OpenGL.EXT_pixel_transform)pname, (Single)param);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_pixel_transform", Version = "1.1", EntryPoint = "glPixelTransformParameterfvEXT")]
            public static
            unsafe void PixelTransformParameter(OpenTK.Graphics.OpenGL.EXT_pixel_transform target, OpenTK.Graphics.OpenGL.EXT_pixel_transform pname, Single* @params)
            {
                Delegates.glPixelTransformParameterfvEXT((OpenTK.Graphics.OpenGL.EXT_pixel_transform)target, (OpenTK.Graphics.OpenGL.EXT_pixel_transform)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_pixel_transform", Version = "1.1", EntryPoint = "glPixelTransformParameterfvEXT")]
            public static
            unsafe void PixelTransformParameter(int target, int pname, Single* @params)
            {
                Delegates.glPixelTransformParameterfvEXT((OpenTK.Graphics.OpenGL.EXT_pixel_transform)target, (OpenTK.Graphics.OpenGL.EXT_pixel_transform)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_pixel_transform", Version = "1.1", EntryPoint = "glPixelTransformParameteriEXT")]
            public static
            void PixelTransformParameter(OpenTK.Graphics.OpenGL.EXT_pixel_transform target, OpenTK.Graphics.OpenGL.EXT_pixel_transform pname, Int32 param)
            {
                Delegates.glPixelTransformParameteriEXT((OpenTK.Graphics.OpenGL.EXT_pixel_transform)target, (OpenTK.Graphics.OpenGL.EXT_pixel_transform)pname, (Int32)param);
            }

            [AutoGenerated(Category = "EXT_pixel_transform", Version = "1.1", EntryPoint = "glPixelTransformParameteriEXT")]
            public static
            void PixelTransformParameter(int target, int pname, Int32 param)
            {
                Delegates.glPixelTransformParameteriEXT((OpenTK.Graphics.OpenGL.EXT_pixel_transform)target, (OpenTK.Graphics.OpenGL.EXT_pixel_transform)pname, (Int32)param);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_pixel_transform", Version = "1.1", EntryPoint = "glPixelTransformParameterivEXT")]
            public static
            unsafe void PixelTransformParameter(OpenTK.Graphics.OpenGL.EXT_pixel_transform target, OpenTK.Graphics.OpenGL.EXT_pixel_transform pname, Int32* @params)
            {
                Delegates.glPixelTransformParameterivEXT((OpenTK.Graphics.OpenGL.EXT_pixel_transform)target, (OpenTK.Graphics.OpenGL.EXT_pixel_transform)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_pixel_transform", Version = "1.1", EntryPoint = "glPixelTransformParameterivEXT")]
            public static
            unsafe void PixelTransformParameter(int target, int pname, Int32* @params)
            {
                Delegates.glPixelTransformParameterivEXT((OpenTK.Graphics.OpenGL.EXT_pixel_transform)target, (OpenTK.Graphics.OpenGL.EXT_pixel_transform)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_point_parameters", Version = "1.0", EntryPoint = "glPointParameterfEXT")]
            public static
            void PointParameter(OpenTK.Graphics.OpenGL.EXT_point_parameters pname, Single param)
            {
                Delegates.glPointParameterfEXT((OpenTK.Graphics.OpenGL.EXT_point_parameters)pname, (Single)param);
            }

            [AutoGenerated(Category = "EXT_point_parameters", Version = "1.0", EntryPoint = "glPointParameterfEXT")]
            public static
            void PointParameter(int pname, Single param)
            {
                Delegates.glPointParameterfEXT((OpenTK.Graphics.OpenGL.EXT_point_parameters)pname, (Single)param);
            }

            [AutoGenerated(Category = "EXT_point_parameters", Version = "1.0", EntryPoint = "glPointParameterfvEXT")]
            public static
            void PointParameter(OpenTK.Graphics.OpenGL.EXT_point_parameters pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glPointParameterfvEXT((OpenTK.Graphics.OpenGL.EXT_point_parameters)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_point_parameters", Version = "1.0", EntryPoint = "glPointParameterfvEXT")]
            public static
            unsafe void PointParameter(OpenTK.Graphics.OpenGL.EXT_point_parameters pname, Single* @params)
            {
                Delegates.glPointParameterfvEXT((OpenTK.Graphics.OpenGL.EXT_point_parameters)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_point_parameters", Version = "1.0", EntryPoint = "glPointParameterfvEXT")]
            public static
            void PointParameter(int pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glPointParameterfvEXT((OpenTK.Graphics.OpenGL.EXT_point_parameters)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_point_parameters", Version = "1.0", EntryPoint = "glPointParameterfvEXT")]
            public static
            unsafe void PointParameter(int pname, Single* @params)
            {
                Delegates.glPointParameterfvEXT((OpenTK.Graphics.OpenGL.EXT_point_parameters)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_polygon_offset", Version = "1.0", EntryPoint = "glPolygonOffsetEXT")]
            public static
            void PolygonOffset(Single factor, Single bias)
            {
                Delegates.glPolygonOffsetEXT((Single)factor, (Single)bias);
            }

            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glPrioritizeTexturesEXT")]
            public static
            void PrioritizeTextures(Int32 n, Int32[] textures, Single[] priorities)
            {
                unsafe
                {
                    fixed (Int32* textures_ptr = textures)
                    fixed (Single* priorities_ptr = priorities)
                    {
                        Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glPrioritizeTexturesEXT")]
            public static
            void PrioritizeTextures(Int32 n, ref Int32 textures, ref Single priorities)
            {
                unsafe
                {
                    fixed (Int32* textures_ptr = &textures)
                    fixed (Single* priorities_ptr = &priorities)
                    {
                        Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glPrioritizeTexturesEXT")]
            public static
            unsafe void PrioritizeTextures(Int32 n, Int32* textures, Single* priorities)
            {
                Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures, (Single*)priorities);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glPrioritizeTexturesEXT")]
            public static
            void PrioritizeTextures(Int32 n, UInt32[] textures, Single[] priorities)
            {
                unsafe
                {
                    fixed (UInt32* textures_ptr = textures)
                    fixed (Single* priorities_ptr = priorities)
                    {
                        Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glPrioritizeTexturesEXT")]
            public static
            void PrioritizeTextures(Int32 n, ref UInt32 textures, ref Single priorities)
            {
                unsafe
                {
                    fixed (UInt32* textures_ptr = &textures)
                    fixed (Single* priorities_ptr = &priorities)
                    {
                        Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_object", Version = "1.0", EntryPoint = "glPrioritizeTexturesEXT")]
            public static
            unsafe void PrioritizeTextures(Int32 n, UInt32* textures, Single* priorities)
            {
                Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures, (Single*)priorities);
            }

            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramEnvParameters4fvEXT")]
            public static
            void ProgramEnvParameters4(OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters target, Int32 index, Int32 count, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramEnvParameters4fvEXT")]
            public static
            void ProgramEnvParameters4(OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters target, Int32 index, Int32 count, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramEnvParameters4fvEXT")]
            public static
            unsafe void ProgramEnvParameters4(OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters target, Int32 index, Int32 count, Single* @params)
            {
                Delegates.glProgramEnvParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramEnvParameters4fvEXT")]
            public static
            void ProgramEnvParameters4(OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters target, UInt32 index, Int32 count, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramEnvParameters4fvEXT")]
            public static
            void ProgramEnvParameters4(OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters target, UInt32 index, Int32 count, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramEnvParameters4fvEXT")]
            public static
            unsafe void ProgramEnvParameters4(OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters target, UInt32 index, Int32 count, Single* @params)
            {
                Delegates.glProgramEnvParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramEnvParameters4fvEXT")]
            public static
            void ProgramEnvParameters4(int target, Int32 index, Int32 count, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramEnvParameters4fvEXT")]
            public static
            void ProgramEnvParameters4(int target, Int32 index, Int32 count, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramEnvParameters4fvEXT")]
            public static
            unsafe void ProgramEnvParameters4(int target, Int32 index, Int32 count, Single* @params)
            {
                Delegates.glProgramEnvParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramEnvParameters4fvEXT")]
            public static
            void ProgramEnvParameters4(int target, UInt32 index, Int32 count, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramEnvParameters4fvEXT")]
            public static
            void ProgramEnvParameters4(int target, UInt32 index, Int32 count, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramEnvParameters4fvEXT")]
            public static
            unsafe void ProgramEnvParameters4(int target, UInt32 index, Int32 count, Single* @params)
            {
                Delegates.glProgramEnvParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramLocalParameters4fvEXT")]
            public static
            void ProgramLocalParameters4(OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters target, Int32 index, Int32 count, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramLocalParameters4fvEXT")]
            public static
            void ProgramLocalParameters4(OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters target, Int32 index, Int32 count, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramLocalParameters4fvEXT")]
            public static
            unsafe void ProgramLocalParameters4(OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters target, Int32 index, Int32 count, Single* @params)
            {
                Delegates.glProgramLocalParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramLocalParameters4fvEXT")]
            public static
            void ProgramLocalParameters4(OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters target, UInt32 index, Int32 count, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramLocalParameters4fvEXT")]
            public static
            void ProgramLocalParameters4(OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters target, UInt32 index, Int32 count, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramLocalParameters4fvEXT")]
            public static
            unsafe void ProgramLocalParameters4(OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters target, UInt32 index, Int32 count, Single* @params)
            {
                Delegates.glProgramLocalParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramLocalParameters4fvEXT")]
            public static
            void ProgramLocalParameters4(int target, Int32 index, Int32 count, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramLocalParameters4fvEXT")]
            public static
            void ProgramLocalParameters4(int target, Int32 index, Int32 count, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramLocalParameters4fvEXT")]
            public static
            unsafe void ProgramLocalParameters4(int target, Int32 index, Int32 count, Single* @params)
            {
                Delegates.glProgramLocalParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramLocalParameters4fvEXT")]
            public static
            void ProgramLocalParameters4(int target, UInt32 index, Int32 count, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramLocalParameters4fvEXT")]
            public static
            void ProgramLocalParameters4(int target, UInt32 index, Int32 count, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_program_parameters", Version = "1.2", EntryPoint = "glProgramLocalParameters4fvEXT")]
            public static
            unsafe void ProgramLocalParameters4(int target, UInt32 index, Int32 count, Single* @params)
            {
                Delegates.glProgramLocalParameters4fvEXT((OpenTK.Graphics.OpenGL.EXT_gpu_program_parameters)target, (UInt32)index, (Int32)count, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_geometry_shader4", Version = "2.0", EntryPoint = "glProgramParameteriEXT")]
            public static
            void ProgramParameter(Int32 program, OpenTK.Graphics.OpenGL.EXT_geometry_shader4 pname, Int32 value)
            {
                Delegates.glProgramParameteriEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_geometry_shader4)pname, (Int32)value);
            }

            [AutoGenerated(Category = "EXT_geometry_shader4", Version = "2.0", EntryPoint = "glProgramParameteriEXT")]
            public static
            void ProgramParameter(Int32 program, int pname, Int32 value)
            {
                Delegates.glProgramParameteriEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_geometry_shader4)pname, (Int32)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_geometry_shader4", Version = "2.0", EntryPoint = "glProgramParameteriEXT")]
            public static
            void ProgramParameter(UInt32 program, OpenTK.Graphics.OpenGL.EXT_geometry_shader4 pname, Int32 value)
            {
                Delegates.glProgramParameteriEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_geometry_shader4)pname, (Int32)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_geometry_shader4", Version = "2.0", EntryPoint = "glProgramParameteriEXT")]
            public static
            void ProgramParameter(UInt32 program, int pname, Int32 value)
            {
                Delegates.glProgramParameteriEXT((UInt32)program, (OpenTK.Graphics.OpenGL.EXT_geometry_shader4)pname, (Int32)value);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1fEXT")]
            public static
            void ProgramUniform1(Int32 program, Int32 location, Single v0)
            {
                Delegates.glProgramUniform1fEXT((UInt32)program, (Int32)location, (Single)v0);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1fEXT")]
            public static
            void ProgramUniform1(UInt32 program, Int32 location, Single v0)
            {
                Delegates.glProgramUniform1fEXT((UInt32)program, (Int32)location, (Single)v0);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            public static
            void ProgramUniform1(Int32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform1fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            public static
            void ProgramUniform1(Int32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform1fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            public static
            unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, Single* value)
            {
                Delegates.glProgramUniform1fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            public static
            void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform1fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            public static
            void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform1fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            public static
            unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Single* value)
            {
                Delegates.glProgramUniform1fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1iEXT")]
            public static
            void ProgramUniform1(Int32 program, Int32 location, Int32 v0)
            {
                Delegates.glProgramUniform1iEXT((UInt32)program, (Int32)location, (Int32)v0);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1iEXT")]
            public static
            void ProgramUniform1(UInt32 program, Int32 location, Int32 v0)
            {
                Delegates.glProgramUniform1iEXT((UInt32)program, (Int32)location, (Int32)v0);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            public static
            void ProgramUniform1(Int32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform1ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            public static
            void ProgramUniform1(Int32 program, Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform1ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            public static
            unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, Int32* value)
            {
                Delegates.glProgramUniform1ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            public static
            void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform1ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            public static
            void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform1ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            public static
            unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Int32* value)
            {
                Delegates.glProgramUniform1ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1uiEXT")]
            public static
            void ProgramUniform1(UInt32 program, Int32 location, UInt32 v0)
            {
                Delegates.glProgramUniform1uiEXT((UInt32)program, (Int32)location, (UInt32)v0);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1uivEXT")]
            public static
            void ProgramUniform1(UInt32 program, Int32 location, Int32 count, UInt32[] value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glProgramUniform1uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1uivEXT")]
            public static
            void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref UInt32 value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform1uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1uivEXT")]
            public static
            unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, UInt32* value)
            {
                Delegates.glProgramUniform1uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2fEXT")]
            public static
            void ProgramUniform2(Int32 program, Int32 location, Single v0, Single v1)
            {
                Delegates.glProgramUniform2fEXT((UInt32)program, (Int32)location, (Single)v0, (Single)v1);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2fEXT")]
            public static
            void ProgramUniform2(UInt32 program, Int32 location, Single v0, Single v1)
            {
                Delegates.glProgramUniform2fEXT((UInt32)program, (Int32)location, (Single)v0, (Single)v1);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            public static
            void ProgramUniform2(Int32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform2fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            public static
            void ProgramUniform2(Int32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform2fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            public static
            unsafe void ProgramUniform2(Int32 program, Int32 location, Int32 count, Single* value)
            {
                Delegates.glProgramUniform2fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            public static
            void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform2fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            public static
            void ProgramUniform2(UInt32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform2fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            public static
            unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Single* value)
            {
                Delegates.glProgramUniform2fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2iEXT")]
            public static
            void ProgramUniform2(Int32 program, Int32 location, Int32 v0, Int32 v1)
            {
                Delegates.glProgramUniform2iEXT((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2iEXT")]
            public static
            void ProgramUniform2(UInt32 program, Int32 location, Int32 v0, Int32 v1)
            {
                Delegates.glProgramUniform2iEXT((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            public static
            void ProgramUniform2(Int32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform2ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            public static
            unsafe void ProgramUniform2(Int32 program, Int32 location, Int32 count, Int32* value)
            {
                Delegates.glProgramUniform2ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            public static
            void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform2ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            public static
            unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Int32* value)
            {
                Delegates.glProgramUniform2ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2uiEXT")]
            public static
            void ProgramUniform2(UInt32 program, Int32 location, UInt32 v0, UInt32 v1)
            {
                Delegates.glProgramUniform2uiEXT((UInt32)program, (Int32)location, (UInt32)v0, (UInt32)v1);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2uivEXT")]
            public static
            void ProgramUniform2(UInt32 program, Int32 location, Int32 count, UInt32[] value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glProgramUniform2uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2uivEXT")]
            public static
            void ProgramUniform2(UInt32 program, Int32 location, Int32 count, ref UInt32 value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform2uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2uivEXT")]
            public static
            unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, UInt32* value)
            {
                Delegates.glProgramUniform2uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3fEXT")]
            public static
            void ProgramUniform3(Int32 program, Int32 location, Single v0, Single v1, Single v2)
            {
                Delegates.glProgramUniform3fEXT((UInt32)program, (Int32)location, (Single)v0, (Single)v1, (Single)v2);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3fEXT")]
            public static
            void ProgramUniform3(UInt32 program, Int32 location, Single v0, Single v1, Single v2)
            {
                Delegates.glProgramUniform3fEXT((UInt32)program, (Int32)location, (Single)v0, (Single)v1, (Single)v2);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            public static
            void ProgramUniform3(Int32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform3fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            public static
            void ProgramUniform3(Int32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform3fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            public static
            unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, Single* value)
            {
                Delegates.glProgramUniform3fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            public static
            void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform3fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            public static
            void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform3fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            public static
            unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Single* value)
            {
                Delegates.glProgramUniform3fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3iEXT")]
            public static
            void ProgramUniform3(Int32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2)
            {
                Delegates.glProgramUniform3iEXT((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1, (Int32)v2);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3iEXT")]
            public static
            void ProgramUniform3(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2)
            {
                Delegates.glProgramUniform3iEXT((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1, (Int32)v2);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            public static
            void ProgramUniform3(Int32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform3ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            public static
            void ProgramUniform3(Int32 program, Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform3ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            public static
            unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, Int32* value)
            {
                Delegates.glProgramUniform3ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            public static
            void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform3ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            public static
            void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform3ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            public static
            unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Int32* value)
            {
                Delegates.glProgramUniform3ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3uiEXT")]
            public static
            void ProgramUniform3(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2)
            {
                Delegates.glProgramUniform3uiEXT((UInt32)program, (Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3uivEXT")]
            public static
            void ProgramUniform3(UInt32 program, Int32 location, Int32 count, UInt32[] value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glProgramUniform3uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3uivEXT")]
            public static
            void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref UInt32 value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform3uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3uivEXT")]
            public static
            unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, UInt32* value)
            {
                Delegates.glProgramUniform3uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4fEXT")]
            public static
            void ProgramUniform4(Int32 program, Int32 location, Single v0, Single v1, Single v2, Single v3)
            {
                Delegates.glProgramUniform4fEXT((UInt32)program, (Int32)location, (Single)v0, (Single)v1, (Single)v2, (Single)v3);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4fEXT")]
            public static
            void ProgramUniform4(UInt32 program, Int32 location, Single v0, Single v1, Single v2, Single v3)
            {
                Delegates.glProgramUniform4fEXT((UInt32)program, (Int32)location, (Single)v0, (Single)v1, (Single)v2, (Single)v3);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            public static
            void ProgramUniform4(Int32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform4fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            public static
            void ProgramUniform4(Int32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform4fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            public static
            unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, Single* value)
            {
                Delegates.glProgramUniform4fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            public static
            void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform4fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            public static
            void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform4fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            public static
            unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Single* value)
            {
                Delegates.glProgramUniform4fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4iEXT")]
            public static
            void ProgramUniform4(Int32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
            {
                Delegates.glProgramUniform4iEXT((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1, (Int32)v2, (Int32)v3);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4iEXT")]
            public static
            void ProgramUniform4(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
            {
                Delegates.glProgramUniform4iEXT((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1, (Int32)v2, (Int32)v3);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            public static
            void ProgramUniform4(Int32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform4ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            public static
            void ProgramUniform4(Int32 program, Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform4ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            public static
            unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, Int32* value)
            {
                Delegates.glProgramUniform4ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            public static
            void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform4ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            public static
            void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform4ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            public static
            unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Int32* value)
            {
                Delegates.glProgramUniform4ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4uiEXT")]
            public static
            void ProgramUniform4(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3)
            {
                Delegates.glProgramUniform4uiEXT((UInt32)program, (Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2, (UInt32)v3);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4uivEXT")]
            public static
            void ProgramUniform4(UInt32 program, Int32 location, Int32 count, UInt32[] value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glProgramUniform4uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4uivEXT")]
            public static
            void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref UInt32 value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform4uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4uivEXT")]
            public static
            unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, UInt32* value)
            {
                Delegates.glProgramUniform4uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            public static
            void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            public static
            void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            public static
            unsafe void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            public static
            void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            public static
            void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            public static
            unsafe void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            public static
            void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix2x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            public static
            void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix2x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            public static
            unsafe void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix2x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            public static
            void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix2x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            public static
            void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix2x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            public static
            unsafe void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix2x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            public static
            void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix2x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            public static
            void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix2x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            public static
            unsafe void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix2x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            public static
            void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix2x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            public static
            void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix2x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            public static
            unsafe void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix2x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            public static
            void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            public static
            void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            public static
            unsafe void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            public static
            void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            public static
            void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            public static
            unsafe void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            public static
            void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix3x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            public static
            void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix3x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            public static
            unsafe void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix3x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            public static
            void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix3x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            public static
            void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix3x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            public static
            unsafe void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix3x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            public static
            void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix3x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            public static
            void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix3x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            public static
            unsafe void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix3x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            public static
            void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix3x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            public static
            void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix3x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            public static
            unsafe void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix3x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            public static
            void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            public static
            void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            public static
            unsafe void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            public static
            void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            public static
            void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            public static
            unsafe void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            public static
            void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix4x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            public static
            void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix4x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            public static
            unsafe void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix4x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            public static
            void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix4x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            public static
            void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix4x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            public static
            unsafe void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix4x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            public static
            void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix4x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            public static
            void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix4x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            public static
            unsafe void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix4x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            public static
            void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix4x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            public static
            void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix4x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            public static
            unsafe void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix4x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [AutoGenerated(Category = "EXT_provoking_vertex", Version = "2.1", EntryPoint = "glProvokingVertexEXT")]
            public static
            void ProvokingVertex(OpenTK.Graphics.OpenGL.EXT_provoking_vertex mode)
            {
                Delegates.glProvokingVertexEXT((OpenTK.Graphics.OpenGL.EXT_provoking_vertex)mode);
            }

            [AutoGenerated(Category = "EXT_provoking_vertex", Version = "2.1", EntryPoint = "glProvokingVertexEXT")]
            public static
            void ProvokingVertex(int mode)
            {
                Delegates.glProvokingVertexEXT((OpenTK.Graphics.OpenGL.EXT_provoking_vertex)mode);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glPushClientAttribDefaultEXT")]
            public static
            void PushClientAttribDefault(OpenTK.Graphics.OpenGL.ClientAttribMask mask)
            {
                Delegates.glPushClientAttribDefaultEXT((OpenTK.Graphics.OpenGL.ClientAttribMask)mask);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glPushClientAttribDefaultEXT")]
            public static
            void PushClientAttribDefault(int mask)
            {
                Delegates.glPushClientAttribDefaultEXT((OpenTK.Graphics.OpenGL.ClientAttribMask)mask);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glRenderbufferStorageEXT")]
            public static
            void RenderbufferStorage(int target, int internalformat, Int32 width, Int32 height)
            {
                Delegates.glRenderbufferStorageEXT((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (OpenTK.Graphics.OpenGL.RenderbufferStorage)internalformat, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glRenderbufferStorageEXT")]
            public static
            void RenderbufferStorage(OpenTK.Graphics.OpenGL.RenderbufferTarget target, OpenTK.Graphics.OpenGL.RenderbufferStorage internalformat, Int32 width, Int32 height)
            {
                Delegates.glRenderbufferStorageEXT((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (OpenTK.Graphics.OpenGL.RenderbufferStorage)internalformat, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_framebuffer_multisample", Version = "1.5", EntryPoint = "glRenderbufferStorageMultisampleEXT")]
            public static
            void RenderbufferStorageMultisample(OpenTK.Graphics.OpenGL.EXT_framebuffer_multisample target, Int32 samples, OpenTK.Graphics.OpenGL.EXT_framebuffer_multisample internalformat, Int32 width, Int32 height)
            {
                Delegates.glRenderbufferStorageMultisampleEXT((OpenTK.Graphics.OpenGL.EXT_framebuffer_multisample)target, (Int32)samples, (OpenTK.Graphics.OpenGL.EXT_framebuffer_multisample)internalformat, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_framebuffer_multisample", Version = "1.5", EntryPoint = "glRenderbufferStorageMultisampleEXT")]
            public static
            void RenderbufferStorageMultisample(int target, Int32 samples, int internalformat, Int32 width, Int32 height)
            {
                Delegates.glRenderbufferStorageMultisampleEXT((OpenTK.Graphics.OpenGL.EXT_framebuffer_multisample)target, (Int32)samples, (OpenTK.Graphics.OpenGL.EXT_framebuffer_multisample)internalformat, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glResetHistogramEXT")]
            public static
            void ResetHistogram(OpenTK.Graphics.OpenGL.HistogramTargetEXT target)
            {
                Delegates.glResetHistogramEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target);
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glResetHistogramEXT")]
            public static
            void ResetHistogram(int target)
            {
                Delegates.glResetHistogramEXT((OpenTK.Graphics.OpenGL.HistogramTargetEXT)target);
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glResetMinmaxEXT")]
            public static
            void ResetMinmax(int target)
            {
                Delegates.glResetMinmaxEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target);
            }

            [AutoGenerated(Category = "EXT_histogram", Version = "1.0", EntryPoint = "glResetMinmaxEXT")]
            public static
            void ResetMinmax(OpenTK.Graphics.OpenGL.MinmaxTargetEXT target)
            {
                Delegates.glResetMinmaxEXT((OpenTK.Graphics.OpenGL.MinmaxTargetEXT)target);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3bEXT")]
            public static
            void SecondaryColor3(SByte red, SByte green, SByte blue)
            {
                Delegates.glSecondaryColor3bEXT((SByte)red, (SByte)green, (SByte)blue);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3bvEXT")]
            public static
            void SecondaryColor3(SByte[] v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3bvEXT((SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3bvEXT")]
            public static
            void SecondaryColor3(ref SByte v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3bvEXT((SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3bvEXT")]
            public static
            unsafe void SecondaryColor3(SByte* v)
            {
                Delegates.glSecondaryColor3bvEXT((SByte*)v);
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3dEXT")]
            public static
            void SecondaryColor3(Double red, Double green, Double blue)
            {
                Delegates.glSecondaryColor3dEXT((Double)red, (Double)green, (Double)blue);
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3dvEXT")]
            public static
            void SecondaryColor3(Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3dvEXT((Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3dvEXT")]
            public static
            void SecondaryColor3(ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3dvEXT((Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3dvEXT")]
            public static
            unsafe void SecondaryColor3(Double* v)
            {
                Delegates.glSecondaryColor3dvEXT((Double*)v);
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3fEXT")]
            public static
            void SecondaryColor3(Single red, Single green, Single blue)
            {
                Delegates.glSecondaryColor3fEXT((Single)red, (Single)green, (Single)blue);
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3fvEXT")]
            public static
            void SecondaryColor3(Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3fvEXT((Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3fvEXT")]
            public static
            void SecondaryColor3(ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3fvEXT((Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3fvEXT")]
            public static
            unsafe void SecondaryColor3(Single* v)
            {
                Delegates.glSecondaryColor3fvEXT((Single*)v);
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3iEXT")]
            public static
            void SecondaryColor3(Int32 red, Int32 green, Int32 blue)
            {
                Delegates.glSecondaryColor3iEXT((Int32)red, (Int32)green, (Int32)blue);
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3ivEXT")]
            public static
            void SecondaryColor3(Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3ivEXT((Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3ivEXT")]
            public static
            void SecondaryColor3(ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3ivEXT((Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3ivEXT")]
            public static
            unsafe void SecondaryColor3(Int32* v)
            {
                Delegates.glSecondaryColor3ivEXT((Int32*)v);
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3sEXT")]
            public static
            void SecondaryColor3(Int16 red, Int16 green, Int16 blue)
            {
                Delegates.glSecondaryColor3sEXT((Int16)red, (Int16)green, (Int16)blue);
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3svEXT")]
            public static
            void SecondaryColor3(Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3svEXT((Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3svEXT")]
            public static
            void SecondaryColor3(ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3svEXT((Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3svEXT")]
            public static
            unsafe void SecondaryColor3(Int16* v)
            {
                Delegates.glSecondaryColor3svEXT((Int16*)v);
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3ubEXT")]
            public static
            void SecondaryColor3(Byte red, Byte green, Byte blue)
            {
                Delegates.glSecondaryColor3ubEXT((Byte)red, (Byte)green, (Byte)blue);
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3ubvEXT")]
            public static
            void SecondaryColor3(Byte[] v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3ubvEXT((Byte*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3ubvEXT")]
            public static
            void SecondaryColor3(ref Byte v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3ubvEXT((Byte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3ubvEXT")]
            public static
            unsafe void SecondaryColor3(Byte* v)
            {
                Delegates.glSecondaryColor3ubvEXT((Byte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3uiEXT")]
            public static
            void SecondaryColor3(UInt32 red, UInt32 green, UInt32 blue)
            {
                Delegates.glSecondaryColor3uiEXT((UInt32)red, (UInt32)green, (UInt32)blue);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3uivEXT")]
            public static
            void SecondaryColor3(UInt32[] v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3uivEXT((UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3uivEXT")]
            public static
            void SecondaryColor3(ref UInt32 v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3uivEXT((UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3uivEXT")]
            public static
            unsafe void SecondaryColor3(UInt32* v)
            {
                Delegates.glSecondaryColor3uivEXT((UInt32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3usEXT")]
            public static
            void SecondaryColor3(UInt16 red, UInt16 green, UInt16 blue)
            {
                Delegates.glSecondaryColor3usEXT((UInt16)red, (UInt16)green, (UInt16)blue);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3usvEXT")]
            public static
            void SecondaryColor3(UInt16[] v)
            {
                unsafe
                {
                    fixed (UInt16* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3usvEXT((UInt16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3usvEXT")]
            public static
            void SecondaryColor3(ref UInt16 v)
            {
                unsafe
                {
                    fixed (UInt16* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3usvEXT((UInt16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColor3usvEXT")]
            public static
            unsafe void SecondaryColor3(UInt16* v)
            {
                Delegates.glSecondaryColor3usvEXT((UInt16*)v);
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColorPointerEXT")]
            public static
            void SecondaryColorPointer(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, IntPtr pointer)
            {
                Delegates.glSecondaryColorPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColorPointerEXT")]
            public static
            void SecondaryColorPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glSecondaryColorPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColorPointerEXT")]
            public static
            void SecondaryColorPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glSecondaryColorPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColorPointerEXT")]
            public static
            void SecondaryColorPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glSecondaryColorPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColorPointerEXT")]
            public static
            void SecondaryColorPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glSecondaryColorPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T3)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColorPointerEXT")]
            public static
            void SecondaryColorPointer(Int32 size, int type, Int32 stride, IntPtr pointer)
            {
                Delegates.glSecondaryColorPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColorPointerEXT")]
            public static
            void SecondaryColorPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glSecondaryColorPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColorPointerEXT")]
            public static
            void SecondaryColorPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glSecondaryColorPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColorPointerEXT")]
            public static
            void SecondaryColorPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glSecondaryColorPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_secondary_color", Version = "1.1", EntryPoint = "glSecondaryColorPointerEXT")]
            public static
            void SecondaryColorPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glSecondaryColorPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T3)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            public static
            void SeparableFilter2D(int target, int internalformat, Int32 width, Int32 height, int format, int type, IntPtr row, IntPtr column)
            {
                Delegates.glSeparableFilter2DEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            public static
            void SeparableFilter2D<T7>(int target, int internalformat, Int32 width, Int32 height, int format, int type, IntPtr row, [InAttribute, OutAttribute] T7[] column)
                where T7 : struct
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2DEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    column_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            public static
            void SeparableFilter2D<T7>(int target, int internalformat, Int32 width, Int32 height, int format, int type, IntPtr row, [InAttribute, OutAttribute] T7[,] column)
                where T7 : struct
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2DEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    column_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            public static
            void SeparableFilter2D<T7>(int target, int internalformat, Int32 width, Int32 height, int format, int type, IntPtr row, [InAttribute, OutAttribute] T7[,,] column)
                where T7 : struct
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2DEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    column_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            public static
            void SeparableFilter2D<T7>(int target, int internalformat, Int32 width, Int32 height, int format, int type, IntPtr row, [InAttribute, OutAttribute] ref T7 column)
                where T7 : struct
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2DEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
                    column = (T7)column_ptr.Target;
                }
                finally
                {
                    column_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            public static
            void SeparableFilter2D<T6,T7>(int target, int internalformat, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T6[] row, [InAttribute, OutAttribute] T7[,,] column)
                where T6 : struct
                where T7 : struct
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2DEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            public static
            void SeparableFilter2D<T6,T7>(int target, int internalformat, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T6[,] row, [InAttribute, OutAttribute] T7[,,] column)
                where T6 : struct
                where T7 : struct
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2DEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            public static
            void SeparableFilter2D<T6,T7>(int target, int internalformat, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T6[,,] row, [InAttribute, OutAttribute] T7[,,] column)
                where T6 : struct
                where T7 : struct
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2DEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            public static
            void SeparableFilter2D<T6,T7>(int target, int internalformat, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] ref T6 row, [InAttribute, OutAttribute] T7[,,] column)
                where T6 : struct
                where T7 : struct
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2DEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
                    row = (T6)row_ptr.Target;
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            public static
            void SeparableFilter2D(OpenTK.Graphics.OpenGL.SeparableTargetEXT target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr row, IntPtr column)
            {
                Delegates.glSeparableFilter2DEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column);
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            public static
            void SeparableFilter2D<T7>(OpenTK.Graphics.OpenGL.SeparableTargetEXT target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr row, [InAttribute, OutAttribute] T7[] column)
                where T7 : struct
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2DEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    column_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            public static
            void SeparableFilter2D<T7>(OpenTK.Graphics.OpenGL.SeparableTargetEXT target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr row, [InAttribute, OutAttribute] T7[,] column)
                where T7 : struct
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2DEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    column_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            public static
            void SeparableFilter2D<T7>(OpenTK.Graphics.OpenGL.SeparableTargetEXT target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr row, [InAttribute, OutAttribute] T7[,,] column)
                where T7 : struct
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2DEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    column_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            public static
            void SeparableFilter2D<T7>(OpenTK.Graphics.OpenGL.SeparableTargetEXT target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr row, [InAttribute, OutAttribute] ref T7 column)
                where T7 : struct
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2DEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
                    column = (T7)column_ptr.Target;
                }
                finally
                {
                    column_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            public static
            void SeparableFilter2D<T6,T7>(OpenTK.Graphics.OpenGL.SeparableTargetEXT target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[] row, [InAttribute, OutAttribute] T7[,,] column)
                where T6 : struct
                where T7 : struct
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2DEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            public static
            void SeparableFilter2D<T6,T7>(OpenTK.Graphics.OpenGL.SeparableTargetEXT target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,] row, [InAttribute, OutAttribute] T7[,,] column)
                where T6 : struct
                where T7 : struct
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2DEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            public static
            void SeparableFilter2D<T6,T7>(OpenTK.Graphics.OpenGL.SeparableTargetEXT target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,,] row, [InAttribute, OutAttribute] T7[,,] column)
                where T6 : struct
                where T7 : struct
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2DEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_convolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            public static
            void SeparableFilter2D<T6,T7>(OpenTK.Graphics.OpenGL.SeparableTargetEXT target, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T6 row, [InAttribute, OutAttribute] T7[,,] column)
                where T6 : struct
                where T7 : struct
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2DEXT((OpenTK.Graphics.OpenGL.SeparableTargetEXT)target, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
                    row = (T6)row_ptr.Target;
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static
            void SetInvariant(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, IntPtr addr)
            {
                Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static
            void SetInvariant<T2>(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, [InAttribute, OutAttribute] T2[] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static
            void SetInvariant<T2>(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, [InAttribute, OutAttribute] T2[,] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static
            void SetInvariant<T2>(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, [InAttribute, OutAttribute] T2[,,] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static
            void SetInvariant<T2>(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, [InAttribute, OutAttribute] ref T2 addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    addr = (T2)addr_ptr.Target;
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static
            void SetInvariant(Int32 id, int type, IntPtr addr)
            {
                Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static
            void SetInvariant<T2>(Int32 id, int type, [InAttribute, OutAttribute] T2[] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static
            void SetInvariant<T2>(Int32 id, int type, [InAttribute, OutAttribute] T2[,] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static
            void SetInvariant<T2>(Int32 id, int type, [InAttribute, OutAttribute] T2[,,] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static
            void SetInvariant<T2>(Int32 id, int type, [InAttribute, OutAttribute] ref T2 addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    addr = (T2)addr_ptr.Target;
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static
            void SetInvariant(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, IntPtr addr)
            {
                Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static
            void SetInvariant<T2>(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, [InAttribute, OutAttribute] T2[] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static
            void SetInvariant<T2>(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, [InAttribute, OutAttribute] T2[,] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static
            void SetInvariant<T2>(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, [InAttribute, OutAttribute] T2[,,] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static
            void SetInvariant<T2>(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, [InAttribute, OutAttribute] ref T2 addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    addr = (T2)addr_ptr.Target;
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static
            void SetInvariant(UInt32 id, int type, IntPtr addr)
            {
                Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static
            void SetInvariant<T2>(UInt32 id, int type, [InAttribute, OutAttribute] T2[] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static
            void SetInvariant<T2>(UInt32 id, int type, [InAttribute, OutAttribute] T2[,] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static
            void SetInvariant<T2>(UInt32 id, int type, [InAttribute, OutAttribute] T2[,,] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static
            void SetInvariant<T2>(UInt32 id, int type, [InAttribute, OutAttribute] ref T2 addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    addr = (T2)addr_ptr.Target;
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static
            void SetLocalConstant(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, IntPtr addr)
            {
                Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static
            void SetLocalConstant<T2>(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, [InAttribute, OutAttribute] T2[] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static
            void SetLocalConstant<T2>(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, [InAttribute, OutAttribute] T2[,] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static
            void SetLocalConstant<T2>(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, [InAttribute, OutAttribute] T2[,,] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static
            void SetLocalConstant<T2>(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, [InAttribute, OutAttribute] ref T2 addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    addr = (T2)addr_ptr.Target;
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static
            void SetLocalConstant(Int32 id, int type, IntPtr addr)
            {
                Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static
            void SetLocalConstant<T2>(Int32 id, int type, [InAttribute, OutAttribute] T2[] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static
            void SetLocalConstant<T2>(Int32 id, int type, [InAttribute, OutAttribute] T2[,] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static
            void SetLocalConstant<T2>(Int32 id, int type, [InAttribute, OutAttribute] T2[,,] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static
            void SetLocalConstant<T2>(Int32 id, int type, [InAttribute, OutAttribute] ref T2 addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    addr = (T2)addr_ptr.Target;
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static
            void SetLocalConstant(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, IntPtr addr)
            {
                Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static
            void SetLocalConstant<T2>(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, [InAttribute, OutAttribute] T2[] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static
            void SetLocalConstant<T2>(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, [InAttribute, OutAttribute] T2[,] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static
            void SetLocalConstant<T2>(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, [InAttribute, OutAttribute] T2[,,] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static
            void SetLocalConstant<T2>(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, [InAttribute, OutAttribute] ref T2 addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    addr = (T2)addr_ptr.Target;
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static
            void SetLocalConstant(UInt32 id, int type, IntPtr addr)
            {
                Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static
            void SetLocalConstant<T2>(UInt32 id, int type, [InAttribute, OutAttribute] T2[] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static
            void SetLocalConstant<T2>(UInt32 id, int type, [InAttribute, OutAttribute] T2[,] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static
            void SetLocalConstant<T2>(UInt32 id, int type, [InAttribute, OutAttribute] T2[,,] addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static
            void SetLocalConstant<T2>(UInt32 id, int type, [InAttribute, OutAttribute] ref T2 addr)
                where T2 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    addr = (T2)addr_ptr.Target;
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glShaderOp1EXT")]
            public static
            void ShaderOp1(OpenTK.Graphics.OpenGL.EXT_vertex_shader op, Int32 res, Int32 arg1)
            {
                Delegates.glShaderOp1EXT((OpenTK.Graphics.OpenGL.EXT_vertex_shader)op, (UInt32)res, (UInt32)arg1);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glShaderOp1EXT")]
            public static
            void ShaderOp1(OpenTK.Graphics.OpenGL.EXT_vertex_shader op, UInt32 res, UInt32 arg1)
            {
                Delegates.glShaderOp1EXT((OpenTK.Graphics.OpenGL.EXT_vertex_shader)op, (UInt32)res, (UInt32)arg1);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glShaderOp1EXT")]
            public static
            void ShaderOp1(int op, Int32 res, Int32 arg1)
            {
                Delegates.glShaderOp1EXT((OpenTK.Graphics.OpenGL.EXT_vertex_shader)op, (UInt32)res, (UInt32)arg1);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glShaderOp1EXT")]
            public static
            void ShaderOp1(int op, UInt32 res, UInt32 arg1)
            {
                Delegates.glShaderOp1EXT((OpenTK.Graphics.OpenGL.EXT_vertex_shader)op, (UInt32)res, (UInt32)arg1);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glShaderOp2EXT")]
            public static
            void ShaderOp2(OpenTK.Graphics.OpenGL.EXT_vertex_shader op, Int32 res, Int32 arg1, Int32 arg2)
            {
                Delegates.glShaderOp2EXT((OpenTK.Graphics.OpenGL.EXT_vertex_shader)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glShaderOp2EXT")]
            public static
            void ShaderOp2(OpenTK.Graphics.OpenGL.EXT_vertex_shader op, UInt32 res, UInt32 arg1, UInt32 arg2)
            {
                Delegates.glShaderOp2EXT((OpenTK.Graphics.OpenGL.EXT_vertex_shader)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glShaderOp2EXT")]
            public static
            void ShaderOp2(int op, Int32 res, Int32 arg1, Int32 arg2)
            {
                Delegates.glShaderOp2EXT((OpenTK.Graphics.OpenGL.EXT_vertex_shader)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glShaderOp2EXT")]
            public static
            void ShaderOp2(int op, UInt32 res, UInt32 arg1, UInt32 arg2)
            {
                Delegates.glShaderOp2EXT((OpenTK.Graphics.OpenGL.EXT_vertex_shader)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glShaderOp3EXT")]
            public static
            void ShaderOp3(OpenTK.Graphics.OpenGL.EXT_vertex_shader op, Int32 res, Int32 arg1, Int32 arg2, Int32 arg3)
            {
                Delegates.glShaderOp3EXT((OpenTK.Graphics.OpenGL.EXT_vertex_shader)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2, (UInt32)arg3);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glShaderOp3EXT")]
            public static
            void ShaderOp3(OpenTK.Graphics.OpenGL.EXT_vertex_shader op, UInt32 res, UInt32 arg1, UInt32 arg2, UInt32 arg3)
            {
                Delegates.glShaderOp3EXT((OpenTK.Graphics.OpenGL.EXT_vertex_shader)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2, (UInt32)arg3);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glShaderOp3EXT")]
            public static
            void ShaderOp3(int op, Int32 res, Int32 arg1, Int32 arg2, Int32 arg3)
            {
                Delegates.glShaderOp3EXT((OpenTK.Graphics.OpenGL.EXT_vertex_shader)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2, (UInt32)arg3);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glShaderOp3EXT")]
            public static
            void ShaderOp3(int op, UInt32 res, UInt32 arg1, UInt32 arg2, UInt32 arg3)
            {
                Delegates.glShaderOp3EXT((OpenTK.Graphics.OpenGL.EXT_vertex_shader)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2, (UInt32)arg3);
            }

            [AutoGenerated(Category = "EXT_stencil_clear_tag", Version = "1.5", EntryPoint = "glStencilClearTagEXT")]
            public static
            void StencilClearTag(Int32 stencilTagBits, Int32 stencilClearTag)
            {
                Delegates.glStencilClearTagEXT((Int32)stencilTagBits, (UInt32)stencilClearTag);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_stencil_clear_tag", Version = "1.5", EntryPoint = "glStencilClearTagEXT")]
            public static
            void StencilClearTag(Int32 stencilTagBits, UInt32 stencilClearTag)
            {
                Delegates.glStencilClearTagEXT((Int32)stencilTagBits, (UInt32)stencilClearTag);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSwizzleEXT")]
            public static
            void Swizzle(Int32 res, Int32 @in, OpenTK.Graphics.OpenGL.EXT_vertex_shader outX, OpenTK.Graphics.OpenGL.EXT_vertex_shader outY, OpenTK.Graphics.OpenGL.EXT_vertex_shader outZ, OpenTK.Graphics.OpenGL.EXT_vertex_shader outW)
            {
                Delegates.glSwizzleEXT((UInt32)res, (UInt32)@in, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outX, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outY, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outZ, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outW);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSwizzleEXT")]
            public static
            void Swizzle(Int32 res, Int32 @in, int outX, int outY, int outZ, int outW)
            {
                Delegates.glSwizzleEXT((UInt32)res, (UInt32)@in, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outX, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outY, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outZ, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outW);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSwizzleEXT")]
            public static
            void Swizzle(UInt32 res, UInt32 @in, OpenTK.Graphics.OpenGL.EXT_vertex_shader outX, OpenTK.Graphics.OpenGL.EXT_vertex_shader outY, OpenTK.Graphics.OpenGL.EXT_vertex_shader outZ, OpenTK.Graphics.OpenGL.EXT_vertex_shader outW)
            {
                Delegates.glSwizzleEXT((UInt32)res, (UInt32)@in, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outX, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outY, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outZ, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outW);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glSwizzleEXT")]
            public static
            void Swizzle(UInt32 res, UInt32 @in, int outX, int outY, int outZ, int outW)
            {
                Delegates.glSwizzleEXT((UInt32)res, (UInt32)@in, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outX, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outY, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outZ, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outW);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3bEXT")]
            public static
            void Tangent3(Byte tx, Byte ty, Byte tz)
            {
                Delegates.glTangent3bEXT((SByte)tx, (SByte)ty, (SByte)tz);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3bEXT")]
            public static
            void Tangent3(SByte tx, SByte ty, SByte tz)
            {
                Delegates.glTangent3bEXT((SByte)tx, (SByte)ty, (SByte)tz);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3bvEXT")]
            public static
            void Tangent3(Byte[] v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glTangent3bvEXT((SByte*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3bvEXT")]
            public static
            void Tangent3(ref Byte v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glTangent3bvEXT((SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3bvEXT")]
            public static
            unsafe void Tangent3(Byte* v)
            {
                Delegates.glTangent3bvEXT((SByte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3bvEXT")]
            public static
            void Tangent3(SByte[] v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = v)
                    {
                        Delegates.glTangent3bvEXT((SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3bvEXT")]
            public static
            void Tangent3(ref SByte v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = &v)
                    {
                        Delegates.glTangent3bvEXT((SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3bvEXT")]
            public static
            unsafe void Tangent3(SByte* v)
            {
                Delegates.glTangent3bvEXT((SByte*)v);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3dEXT")]
            public static
            void Tangent3(Double tx, Double ty, Double tz)
            {
                Delegates.glTangent3dEXT((Double)tx, (Double)ty, (Double)tz);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3dvEXT")]
            public static
            void Tangent3(Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glTangent3dvEXT((Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3dvEXT")]
            public static
            void Tangent3(ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glTangent3dvEXT((Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3dvEXT")]
            public static
            unsafe void Tangent3(Double* v)
            {
                Delegates.glTangent3dvEXT((Double*)v);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3fEXT")]
            public static
            void Tangent3(Single tx, Single ty, Single tz)
            {
                Delegates.glTangent3fEXT((Single)tx, (Single)ty, (Single)tz);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3fvEXT")]
            public static
            void Tangent3(Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glTangent3fvEXT((Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3fvEXT")]
            public static
            void Tangent3(ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glTangent3fvEXT((Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3fvEXT")]
            public static
            unsafe void Tangent3(Single* v)
            {
                Delegates.glTangent3fvEXT((Single*)v);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3iEXT")]
            public static
            void Tangent3(Int32 tx, Int32 ty, Int32 tz)
            {
                Delegates.glTangent3iEXT((Int32)tx, (Int32)ty, (Int32)tz);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3ivEXT")]
            public static
            void Tangent3(Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glTangent3ivEXT((Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3ivEXT")]
            public static
            void Tangent3(ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glTangent3ivEXT((Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3ivEXT")]
            public static
            unsafe void Tangent3(Int32* v)
            {
                Delegates.glTangent3ivEXT((Int32*)v);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3sEXT")]
            public static
            void Tangent3(Int16 tx, Int16 ty, Int16 tz)
            {
                Delegates.glTangent3sEXT((Int16)tx, (Int16)ty, (Int16)tz);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3svEXT")]
            public static
            void Tangent3(Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glTangent3svEXT((Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3svEXT")]
            public static
            void Tangent3(ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glTangent3svEXT((Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangent3svEXT")]
            public static
            unsafe void Tangent3(Int16* v)
            {
                Delegates.glTangent3svEXT((Int16*)v);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangentPointerEXT")]
            public static
            void TangentPointer(int type, Int32 stride, IntPtr pointer)
            {
                Delegates.glTangentPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangentPointerEXT")]
            public static
            void TangentPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] T2[] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glTangentPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangentPointerEXT")]
            public static
            void TangentPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] T2[,] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glTangentPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangentPointerEXT")]
            public static
            void TangentPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] T2[,,] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glTangentPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangentPointerEXT")]
            public static
            void TangentPointer<T2>(int type, Int32 stride, [InAttribute, OutAttribute] ref T2 pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glTangentPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T2)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangentPointerEXT")]
            public static
            void TangentPointer(OpenTK.Graphics.OpenGL.NormalPointerType type, Int32 stride, IntPtr pointer)
            {
                Delegates.glTangentPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangentPointerEXT")]
            public static
            void TangentPointer<T2>(OpenTK.Graphics.OpenGL.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glTangentPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangentPointerEXT")]
            public static
            void TangentPointer<T2>(OpenTK.Graphics.OpenGL.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[,] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glTangentPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangentPointerEXT")]
            public static
            void TangentPointer<T2>(OpenTK.Graphics.OpenGL.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[,,] pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glTangentPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "1.1", EntryPoint = "glTangentPointerEXT")]
            public static
            void TangentPointer<T2>(OpenTK.Graphics.OpenGL.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T2 pointer)
                where T2 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glTangentPointerEXT((OpenTK.Graphics.OpenGL.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T2)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_texture_buffer_object", Version = "2.0", EntryPoint = "glTexBufferEXT")]
            public static
            void TexBuffer(int target, int internalformat, Int32 buffer)
            {
                Delegates.glTexBufferEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.EXT_texture_buffer_object)internalformat, (UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_buffer_object", Version = "2.0", EntryPoint = "glTexBufferEXT")]
            public static
            void TexBuffer(int target, int internalformat, UInt32 buffer)
            {
                Delegates.glTexBufferEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.EXT_texture_buffer_object)internalformat, (UInt32)buffer);
            }

            [AutoGenerated(Category = "EXT_texture_buffer_object", Version = "2.0", EntryPoint = "glTexBufferEXT")]
            public static
            void TexBuffer(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.EXT_texture_buffer_object internalformat, Int32 buffer)
            {
                Delegates.glTexBufferEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.EXT_texture_buffer_object)internalformat, (UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_buffer_object", Version = "2.0", EntryPoint = "glTexBufferEXT")]
            public static
            void TexBuffer(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.EXT_texture_buffer_object internalformat, UInt32 buffer)
            {
                Delegates.glTexBufferEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.EXT_texture_buffer_object)internalformat, (UInt32)buffer);
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glTexCoordPointerEXT")]
            public static
            void TexCoordPointer(Int32 size, int type, Int32 stride, Int32 count, IntPtr pointer)
            {
                Delegates.glTexCoordPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glTexCoordPointerEXT")]
            public static
            void TexCoordPointer<T4>(Int32 size, int type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T4[] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexCoordPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glTexCoordPointerEXT")]
            public static
            void TexCoordPointer<T4>(Int32 size, int type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T4[,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexCoordPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glTexCoordPointerEXT")]
            public static
            void TexCoordPointer<T4>(Int32 size, int type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T4[,,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexCoordPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glTexCoordPointerEXT")]
            public static
            void TexCoordPointer<T4>(Int32 size, int type, Int32 stride, Int32 count, [InAttribute, OutAttribute] ref T4 pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexCoordPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T4)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glTexCoordPointerEXT")]
            public static
            void TexCoordPointer(Int32 size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, Int32 stride, Int32 count, IntPtr pointer)
            {
                Delegates.glTexCoordPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glTexCoordPointerEXT")]
            public static
            void TexCoordPointer<T4>(Int32 size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T4[] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexCoordPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glTexCoordPointerEXT")]
            public static
            void TexCoordPointer<T4>(Int32 size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T4[,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexCoordPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glTexCoordPointerEXT")]
            public static
            void TexCoordPointer<T4>(Int32 size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T4[,,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexCoordPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glTexCoordPointerEXT")]
            public static
            void TexCoordPointer<T4>(Int32 size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, Int32 stride, Int32 count, [InAttribute, OutAttribute] ref T4 pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexCoordPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T4)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_texture3D", Version = "1.0", EntryPoint = "glTexImage3DEXT")]
            public static
            void TexImage3D(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, IntPtr pixels)
            {
                Delegates.glTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_texture3D", Version = "1.0", EntryPoint = "glTexImage3DEXT")]
            public static
            void TexImage3D<T9>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, [InAttribute, OutAttribute] T9[] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_texture3D", Version = "1.0", EntryPoint = "glTexImage3DEXT")]
            public static
            void TexImage3D<T9>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, [InAttribute, OutAttribute] T9[,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_texture3D", Version = "1.0", EntryPoint = "glTexImage3DEXT")]
            public static
            void TexImage3D<T9>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, [InAttribute, OutAttribute] T9[,,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_texture3D", Version = "1.0", EntryPoint = "glTexImage3DEXT")]
            public static
            void TexImage3D<T9>(int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, [InAttribute, OutAttribute] ref T9 pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T9)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_texture3D", Version = "1.0", EntryPoint = "glTexImage3DEXT")]
            public static
            void TexImage3D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
            {
                Delegates.glTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_texture3D", Version = "1.0", EntryPoint = "glTexImage3DEXT")]
            public static
            void TexImage3D<T9>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_texture3D", Version = "1.0", EntryPoint = "glTexImage3DEXT")]
            public static
            void TexImage3D<T9>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_texture3D", Version = "1.0", EntryPoint = "glTexImage3DEXT")]
            public static
            void TexImage3D<T9>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[,,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_texture3D", Version = "1.0", EntryPoint = "glTexImage3DEXT")]
            public static
            void TexImage3D<T9>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T9 pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage3DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T9)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glTexParameterIivEXT")]
            public static
            void TexParameterI(int target, int pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glTexParameterIivEXT")]
            public static
            void TexParameterI(int target, int pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glTexParameterIivEXT")]
            public static
            unsafe void TexParameterI(int target, int pname, Int32* @params)
            {
                Delegates.glTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glTexParameterIivEXT")]
            public static
            void TexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glTexParameterIivEXT")]
            public static
            void TexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glTexParameterIivEXT")]
            public static
            unsafe void TexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32* @params)
            {
                Delegates.glTexParameterIivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glTexParameterIuivEXT")]
            public static
            void TexParameterI(int target, int pname, UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glTexParameterIuivEXT")]
            public static
            void TexParameterI(int target, int pname, ref UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glTexParameterIuivEXT")]
            public static
            unsafe void TexParameterI(int target, int pname, UInt32* @params)
            {
                Delegates.glTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glTexParameterIuivEXT")]
            public static
            void TexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glTexParameterIuivEXT")]
            public static
            void TexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, ref UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_texture_integer", Version = "2.0", EntryPoint = "glTexParameterIuivEXT")]
            public static
            unsafe void TexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, UInt32* @params)
            {
                Delegates.glTexParameterIuivEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params);
            }

            [AutoGenerated(Category = "EXT_subtexture", Version = "1.0", EntryPoint = "glTexSubImage1DEXT")]
            public static
            void TexSubImage1D(int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, IntPtr pixels)
            {
                Delegates.glTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_subtexture", Version = "1.0", EntryPoint = "glTexSubImage1DEXT")]
            public static
            void TexSubImage1D<T6>(int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, [InAttribute, OutAttribute] T6[] pixels)
                where T6 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_subtexture", Version = "1.0", EntryPoint = "glTexSubImage1DEXT")]
            public static
            void TexSubImage1D<T6>(int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, [InAttribute, OutAttribute] T6[,] pixels)
                where T6 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_subtexture", Version = "1.0", EntryPoint = "glTexSubImage1DEXT")]
            public static
            void TexSubImage1D<T6>(int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, [InAttribute, OutAttribute] T6[,,] pixels)
                where T6 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_subtexture", Version = "1.0", EntryPoint = "glTexSubImage1DEXT")]
            public static
            void TexSubImage1D<T6>(int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, [InAttribute, OutAttribute] ref T6 pixels)
                where T6 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T6)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_subtexture", Version = "1.0", EntryPoint = "glTexSubImage1DEXT")]
            public static
            void TexSubImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
            {
                Delegates.glTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_subtexture", Version = "1.0", EntryPoint = "glTexSubImage1DEXT")]
            public static
            void TexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[] pixels)
                where T6 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_subtexture", Version = "1.0", EntryPoint = "glTexSubImage1DEXT")]
            public static
            void TexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,] pixels)
                where T6 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_subtexture", Version = "1.0", EntryPoint = "glTexSubImage1DEXT")]
            public static
            void TexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,,] pixels)
                where T6 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_subtexture", Version = "1.0", EntryPoint = "glTexSubImage1DEXT")]
            public static
            void TexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T6 pixels)
                where T6 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage1DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T6)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_subtexture", Version = "1.0", EntryPoint = "glTexSubImage2DEXT")]
            public static
            void TexSubImage2D(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, IntPtr pixels)
            {
                Delegates.glTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_subtexture", Version = "1.0", EntryPoint = "glTexSubImage2DEXT")]
            public static
            void TexSubImage2D<T8>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T8[] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_subtexture", Version = "1.0", EntryPoint = "glTexSubImage2DEXT")]
            public static
            void TexSubImage2D<T8>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T8[,] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_subtexture", Version = "1.0", EntryPoint = "glTexSubImage2DEXT")]
            public static
            void TexSubImage2D<T8>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T8[,,] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_subtexture", Version = "1.0", EntryPoint = "glTexSubImage2DEXT")]
            public static
            void TexSubImage2D<T8>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] ref T8 pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T8)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_subtexture", Version = "1.0", EntryPoint = "glTexSubImage2DEXT")]
            public static
            void TexSubImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
            {
                Delegates.glTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_subtexture", Version = "1.0", EntryPoint = "glTexSubImage2DEXT")]
            public static
            void TexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_subtexture", Version = "1.0", EntryPoint = "glTexSubImage2DEXT")]
            public static
            void TexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_subtexture", Version = "1.0", EntryPoint = "glTexSubImage2DEXT")]
            public static
            void TexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_subtexture", Version = "1.0", EntryPoint = "glTexSubImage2DEXT")]
            public static
            void TexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage2DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T8)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_texture3D", Version = "1.0", EntryPoint = "glTexSubImage3DEXT")]
            public static
            void TexSubImage3D(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, IntPtr pixels)
            {
                Delegates.glTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_texture3D", Version = "1.0", EntryPoint = "glTexSubImage3DEXT")]
            public static
            void TexSubImage3D<T10>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, [InAttribute, OutAttribute] T10[] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_texture3D", Version = "1.0", EntryPoint = "glTexSubImage3DEXT")]
            public static
            void TexSubImage3D<T10>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, [InAttribute, OutAttribute] T10[,] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_texture3D", Version = "1.0", EntryPoint = "glTexSubImage3DEXT")]
            public static
            void TexSubImage3D<T10>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, [InAttribute, OutAttribute] T10[,,] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_texture3D", Version = "1.0", EntryPoint = "glTexSubImage3DEXT")]
            public static
            void TexSubImage3D<T10>(int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, [InAttribute, OutAttribute] ref T10 pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T10)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_texture3D", Version = "1.0", EntryPoint = "glTexSubImage3DEXT")]
            public static
            void TexSubImage3D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
            {
                Delegates.glTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_texture3D", Version = "1.0", EntryPoint = "glTexSubImage3DEXT")]
            public static
            void TexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T10[] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_texture3D", Version = "1.0", EntryPoint = "glTexSubImage3DEXT")]
            public static
            void TexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T10[,] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_texture3D", Version = "1.0", EntryPoint = "glTexSubImage3DEXT")]
            public static
            void TexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T10[,,] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_texture3D", Version = "1.0", EntryPoint = "glTexSubImage3DEXT")]
            public static
            void TexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T10 pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage3DEXT((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T10)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureBufferEXT")]
            public static
            void TextureBuffer(Int32 texture, int target, int internalformat, Int32 buffer)
            {
                Delegates.glTextureBufferEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (UInt32)buffer);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureBufferEXT")]
            public static
            void TextureBuffer(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 buffer)
            {
                Delegates.glTextureBufferEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureBufferEXT")]
            public static
            void TextureBuffer(UInt32 texture, int target, int internalformat, UInt32 buffer)
            {
                Delegates.glTextureBufferEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureBufferEXT")]
            public static
            void TextureBuffer(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, UInt32 buffer)
            {
                Delegates.glTextureBufferEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (UInt32)buffer);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static
            void TextureImage1D(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 border, int format, int type, IntPtr pixels)
            {
                Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static
            void TextureImage1D<T8>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 border, int format, int type, [InAttribute, OutAttribute] T8[] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static
            void TextureImage1D<T8>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 border, int format, int type, [InAttribute, OutAttribute] T8[,] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static
            void TextureImage1D<T8>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 border, int format, int type, [InAttribute, OutAttribute] T8[,,] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static
            void TextureImage1D<T8>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 border, int format, int type, [InAttribute, OutAttribute] ref T8 pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T8)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static
            void TextureImage1D(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
            {
                Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static
            void TextureImage1D<T8>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static
            void TextureImage1D<T8>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static
            void TextureImage1D<T8>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static
            void TextureImage1D<T8>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T8)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static
            void TextureImage1D(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 border, int format, int type, IntPtr pixels)
            {
                Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static
            void TextureImage1D<T8>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 border, int format, int type, [InAttribute, OutAttribute] T8[] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static
            void TextureImage1D<T8>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 border, int format, int type, [InAttribute, OutAttribute] T8[,] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static
            void TextureImage1D<T8>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 border, int format, int type, [InAttribute, OutAttribute] T8[,,] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static
            void TextureImage1D<T8>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 border, int format, int type, [InAttribute, OutAttribute] ref T8 pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T8)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static
            void TextureImage1D(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
            {
                Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static
            void TextureImage1D<T8>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static
            void TextureImage1D<T8>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static
            void TextureImage1D<T8>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static
            void TextureImage1D<T8>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
                where T8 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T8)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static
            void TextureImage2D(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, int format, int type, IntPtr pixels)
            {
                Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static
            void TextureImage2D<T9>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, int format, int type, [InAttribute, OutAttribute] T9[] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static
            void TextureImage2D<T9>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, int format, int type, [InAttribute, OutAttribute] T9[,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static
            void TextureImage2D<T9>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, int format, int type, [InAttribute, OutAttribute] T9[,,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static
            void TextureImage2D<T9>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, int format, int type, [InAttribute, OutAttribute] ref T9 pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T9)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static
            void TextureImage2D(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
            {
                Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static
            void TextureImage2D<T9>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static
            void TextureImage2D<T9>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static
            void TextureImage2D<T9>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[,,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static
            void TextureImage2D<T9>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T9 pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T9)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static
            void TextureImage2D(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, int format, int type, IntPtr pixels)
            {
                Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static
            void TextureImage2D<T9>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, int format, int type, [InAttribute, OutAttribute] T9[] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static
            void TextureImage2D<T9>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, int format, int type, [InAttribute, OutAttribute] T9[,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static
            void TextureImage2D<T9>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, int format, int type, [InAttribute, OutAttribute] T9[,,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static
            void TextureImage2D<T9>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, int format, int type, [InAttribute, OutAttribute] ref T9 pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T9)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static
            void TextureImage2D(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
            {
                Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static
            void TextureImage2D<T9>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static
            void TextureImage2D<T9>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static
            void TextureImage2D<T9>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[,,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static
            void TextureImage2D<T9>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T9 pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T9)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static
            void TextureImage3D(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, IntPtr pixels)
            {
                Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static
            void TextureImage3D<T10>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, [InAttribute, OutAttribute] T10[] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static
            void TextureImage3D<T10>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, [InAttribute, OutAttribute] T10[,] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static
            void TextureImage3D<T10>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, [InAttribute, OutAttribute] T10[,,] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static
            void TextureImage3D<T10>(Int32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, [InAttribute, OutAttribute] ref T10 pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T10)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static
            void TextureImage3D(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
            {
                Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static
            void TextureImage3D<T10>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T10[] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static
            void TextureImage3D<T10>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T10[,] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static
            void TextureImage3D<T10>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T10[,,] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static
            void TextureImage3D<T10>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T10 pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T10)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static
            void TextureImage3D(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, IntPtr pixels)
            {
                Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static
            void TextureImage3D<T10>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, [InAttribute, OutAttribute] T10[] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static
            void TextureImage3D<T10>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, [InAttribute, OutAttribute] T10[,] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static
            void TextureImage3D<T10>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, [InAttribute, OutAttribute] T10[,,] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static
            void TextureImage3D<T10>(UInt32 texture, int target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, int format, int type, [InAttribute, OutAttribute] ref T10 pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T10)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static
            void TextureImage3D(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
            {
                Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static
            void TextureImage3D<T10>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T10[] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static
            void TextureImage3D<T10>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T10[,] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static
            void TextureImage3D<T10>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T10[,,] pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static
            void TextureImage3D<T10>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.EXT_direct_state_access internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T10 pixels)
                where T10 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.EXT_direct_state_access)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T10)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_light_texture", Version = "1.1", EntryPoint = "glTextureLightEXT")]
            public static
            void TextureLight(OpenTK.Graphics.OpenGL.EXT_light_texture pname)
            {
                Delegates.glTextureLightEXT((OpenTK.Graphics.OpenGL.EXT_light_texture)pname);
            }

            [AutoGenerated(Category = "EXT_light_texture", Version = "1.1", EntryPoint = "glTextureLightEXT")]
            public static
            void TextureLight(int pname)
            {
                Delegates.glTextureLightEXT((OpenTK.Graphics.OpenGL.EXT_light_texture)pname);
            }

            [AutoGenerated(Category = "EXT_light_texture", Version = "1.1", EntryPoint = "glTextureMaterialEXT")]
            public static
            void TextureMaterial(int face, int mode)
            {
                Delegates.glTextureMaterialEXT((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)mode);
            }

            [AutoGenerated(Category = "EXT_light_texture", Version = "1.1", EntryPoint = "glTextureMaterialEXT")]
            public static
            void TextureMaterial(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter mode)
            {
                Delegates.glTextureMaterialEXT((OpenTK.Graphics.OpenGL.MaterialFace)face, (OpenTK.Graphics.OpenGL.MaterialParameter)mode);
            }

            [AutoGenerated(Category = "EXT_texture_perturb_normal", Version = "1.1", EntryPoint = "glTextureNormalEXT")]
            public static
            void TextureNormal(OpenTK.Graphics.OpenGL.EXT_texture_perturb_normal mode)
            {
                Delegates.glTextureNormalEXT((OpenTK.Graphics.OpenGL.EXT_texture_perturb_normal)mode);
            }

            [AutoGenerated(Category = "EXT_texture_perturb_normal", Version = "1.1", EntryPoint = "glTextureNormalEXT")]
            public static
            void TextureNormal(int mode)
            {
                Delegates.glTextureNormalEXT((OpenTK.Graphics.OpenGL.EXT_texture_perturb_normal)mode);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterfEXT")]
            public static
            void TextureParameter(Int32 texture, int target, int pname, Single param)
            {
                Delegates.glTextureParameterfEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single)param);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterfEXT")]
            public static
            void TextureParameter(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Single param)
            {
                Delegates.glTextureParameterfEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single)param);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterfEXT")]
            public static
            void TextureParameter(UInt32 texture, int target, int pname, Single param)
            {
                Delegates.glTextureParameterfEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single)param);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterfEXT")]
            public static
            void TextureParameter(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Single param)
            {
                Delegates.glTextureParameterfEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single)param);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterfvEXT")]
            public static
            void TextureParameter(Int32 texture, int target, int pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterfvEXT")]
            public static
            unsafe void TextureParameter(Int32 texture, int target, int pname, Single* @params)
            {
                Delegates.glTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterfvEXT")]
            public static
            void TextureParameter(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterfvEXT")]
            public static
            unsafe void TextureParameter(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Single* @params)
            {
                Delegates.glTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterfvEXT")]
            public static
            void TextureParameter(UInt32 texture, int target, int pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterfvEXT")]
            public static
            unsafe void TextureParameter(UInt32 texture, int target, int pname, Single* @params)
            {
                Delegates.glTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterfvEXT")]
            public static
            void TextureParameter(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterfvEXT")]
            public static
            unsafe void TextureParameter(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Single* @params)
            {
                Delegates.glTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameteriEXT")]
            public static
            void TextureParameter(Int32 texture, int target, int pname, Int32 param)
            {
                Delegates.glTextureParameteriEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32)param);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameteriEXT")]
            public static
            void TextureParameter(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32 param)
            {
                Delegates.glTextureParameteriEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32)param);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameteriEXT")]
            public static
            void TextureParameter(UInt32 texture, int target, int pname, Int32 param)
            {
                Delegates.glTextureParameteriEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32)param);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameteriEXT")]
            public static
            void TextureParameter(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32 param)
            {
                Delegates.glTextureParameteriEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32)param);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static
            void TextureParameterI(Int32 texture, int target, int pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static
            void TextureParameterI(Int32 texture, int target, int pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static
            unsafe void TextureParameterI(Int32 texture, int target, int pname, Int32* @params)
            {
                Delegates.glTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static
            void TextureParameterI(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static
            void TextureParameterI(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static
            unsafe void TextureParameterI(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32* @params)
            {
                Delegates.glTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static
            void TextureParameterI(UInt32 texture, int target, int pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static
            void TextureParameterI(UInt32 texture, int target, int pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static
            unsafe void TextureParameterI(UInt32 texture, int target, int pname, Int32* @params)
            {
                Delegates.glTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static
            void TextureParameterI(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static
            void TextureParameterI(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static
            unsafe void TextureParameterI(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32* @params)
            {
                Delegates.glTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIuivEXT")]
            public static
            void TextureParameterI(UInt32 texture, int target, int pname, UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterIuivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIuivEXT")]
            public static
            void TextureParameterI(UInt32 texture, int target, int pname, ref UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glTextureParameterIuivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIuivEXT")]
            public static
            unsafe void TextureParameterI(UInt32 texture, int target, int pname, UInt32* @params)
            {
                Delegates.glTextureParameterIuivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIuivEXT")]
            public static
            void TextureParameterI(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterIuivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIuivEXT")]
            public static
            void TextureParameterI(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, ref UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glTextureParameterIuivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIuivEXT")]
            public static
            unsafe void TextureParameterI(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, UInt32* @params)
            {
                Delegates.glTextureParameterIuivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterivEXT")]
            public static
            void TextureParameter(Int32 texture, int target, int pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterivEXT")]
            public static
            unsafe void TextureParameter(Int32 texture, int target, int pname, Int32* @params)
            {
                Delegates.glTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterivEXT")]
            public static
            void TextureParameter(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterivEXT")]
            public static
            unsafe void TextureParameter(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32* @params)
            {
                Delegates.glTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterivEXT")]
            public static
            void TextureParameter(UInt32 texture, int target, int pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterivEXT")]
            public static
            unsafe void TextureParameter(UInt32 texture, int target, int pname, Int32* @params)
            {
                Delegates.glTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterivEXT")]
            public static
            void TextureParameter(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterivEXT")]
            public static
            unsafe void TextureParameter(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32* @params)
            {
                Delegates.glTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureRenderbufferEXT")]
            public static
            void TextureRenderbuffer(Int32 texture, int target, Int32 renderbuffer)
            {
                Delegates.glTextureRenderbufferEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (UInt32)renderbuffer);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureRenderbufferEXT")]
            public static
            void TextureRenderbuffer(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 renderbuffer)
            {
                Delegates.glTextureRenderbufferEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (UInt32)renderbuffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureRenderbufferEXT")]
            public static
            void TextureRenderbuffer(UInt32 texture, int target, UInt32 renderbuffer)
            {
                Delegates.glTextureRenderbufferEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (UInt32)renderbuffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureRenderbufferEXT")]
            public static
            void TextureRenderbuffer(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, UInt32 renderbuffer)
            {
                Delegates.glTextureRenderbufferEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (UInt32)renderbuffer);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static
            void TextureSubImage1D(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, IntPtr pixels)
            {
                Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static
            void TextureSubImage1D<T7>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, [InAttribute, OutAttribute] T7[] pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static
            void TextureSubImage1D<T7>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, [InAttribute, OutAttribute] T7[,] pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static
            void TextureSubImage1D<T7>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, [InAttribute, OutAttribute] T7[,,] pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static
            void TextureSubImage1D<T7>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, [InAttribute, OutAttribute] ref T7 pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T7)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static
            void TextureSubImage1D(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
            {
                Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static
            void TextureSubImage1D<T7>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T7[] pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static
            void TextureSubImage1D<T7>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T7[,] pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static
            void TextureSubImage1D<T7>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T7[,,] pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static
            void TextureSubImage1D<T7>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T7 pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T7)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static
            void TextureSubImage1D(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, IntPtr pixels)
            {
                Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static
            void TextureSubImage1D<T7>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, [InAttribute, OutAttribute] T7[] pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static
            void TextureSubImage1D<T7>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, [InAttribute, OutAttribute] T7[,] pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static
            void TextureSubImage1D<T7>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, [InAttribute, OutAttribute] T7[,,] pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static
            void TextureSubImage1D<T7>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 width, int format, int type, [InAttribute, OutAttribute] ref T7 pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T7)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static
            void TextureSubImage1D(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
            {
                Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static
            void TextureSubImage1D<T7>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T7[] pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static
            void TextureSubImage1D<T7>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T7[,] pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static
            void TextureSubImage1D<T7>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T7[,,] pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static
            void TextureSubImage1D<T7>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T7 pixels)
                where T7 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T7)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static
            void TextureSubImage2D(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, IntPtr pixels)
            {
                Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static
            void TextureSubImage2D<T9>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T9[] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static
            void TextureSubImage2D<T9>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T9[,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static
            void TextureSubImage2D<T9>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T9[,,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static
            void TextureSubImage2D<T9>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] ref T9 pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T9)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static
            void TextureSubImage2D(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
            {
                Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static
            void TextureSubImage2D<T9>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static
            void TextureSubImage2D<T9>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static
            void TextureSubImage2D<T9>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[,,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static
            void TextureSubImage2D<T9>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T9 pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T9)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static
            void TextureSubImage2D(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, IntPtr pixels)
            {
                Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static
            void TextureSubImage2D<T9>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T9[] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static
            void TextureSubImage2D<T9>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T9[,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static
            void TextureSubImage2D<T9>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] T9[,,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static
            void TextureSubImage2D<T9>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, int format, int type, [InAttribute, OutAttribute] ref T9 pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T9)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static
            void TextureSubImage2D(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
            {
                Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static
            void TextureSubImage2D<T9>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static
            void TextureSubImage2D<T9>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static
            void TextureSubImage2D<T9>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T9[,,] pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static
            void TextureSubImage2D<T9>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T9 pixels)
                where T9 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T9)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static
            void TextureSubImage3D(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, IntPtr pixels)
            {
                Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static
            void TextureSubImage3D<T11>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, [InAttribute, OutAttribute] T11[] pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static
            void TextureSubImage3D<T11>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, [InAttribute, OutAttribute] T11[,] pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static
            void TextureSubImage3D<T11>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, [InAttribute, OutAttribute] T11[,,] pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static
            void TextureSubImage3D<T11>(Int32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, [InAttribute, OutAttribute] ref T11 pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T11)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static
            void TextureSubImage3D(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
            {
                Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static
            void TextureSubImage3D<T11>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T11[] pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static
            void TextureSubImage3D<T11>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T11[,] pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static
            void TextureSubImage3D<T11>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T11[,,] pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static
            void TextureSubImage3D<T11>(Int32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T11 pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T11)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static
            void TextureSubImage3D(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, IntPtr pixels)
            {
                Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static
            void TextureSubImage3D<T11>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, [InAttribute, OutAttribute] T11[] pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static
            void TextureSubImage3D<T11>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, [InAttribute, OutAttribute] T11[,] pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static
            void TextureSubImage3D<T11>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, [InAttribute, OutAttribute] T11[,,] pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static
            void TextureSubImage3D<T11>(UInt32 texture, int target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, int format, int type, [InAttribute, OutAttribute] ref T11 pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T11)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static
            void TextureSubImage3D(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
            {
                Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static
            void TextureSubImage3D<T11>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T11[] pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static
            void TextureSubImage3D<T11>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T11[,] pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static
            void TextureSubImage3D<T11>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T11[,,] pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static
            void TextureSubImage3D<T11>(UInt32 texture, OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T11 pixels)
                where T11 : struct
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T11)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glTransformFeedbackVaryingsEXT")]
            public static
            void TransformFeedbackVaryings(Int32 program, Int32 count, String[] varyings, OpenTK.Graphics.OpenGL.EXT_transform_feedback bufferMode)
            {
                Delegates.glTransformFeedbackVaryingsEXT((UInt32)program, (Int32)count, (String[])varyings, (OpenTK.Graphics.OpenGL.EXT_transform_feedback)bufferMode);
            }

            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glTransformFeedbackVaryingsEXT")]
            public static
            void TransformFeedbackVaryings(Int32 program, Int32 count, String[] varyings, int bufferMode)
            {
                Delegates.glTransformFeedbackVaryingsEXT((UInt32)program, (Int32)count, (String[])varyings, (OpenTK.Graphics.OpenGL.EXT_transform_feedback)bufferMode);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glTransformFeedbackVaryingsEXT")]
            public static
            void TransformFeedbackVaryings(UInt32 program, Int32 count, String[] varyings, OpenTK.Graphics.OpenGL.EXT_transform_feedback bufferMode)
            {
                Delegates.glTransformFeedbackVaryingsEXT((UInt32)program, (Int32)count, (String[])varyings, (OpenTK.Graphics.OpenGL.EXT_transform_feedback)bufferMode);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_transform_feedback", Version = "2.0", EntryPoint = "glTransformFeedbackVaryingsEXT")]
            public static
            void TransformFeedbackVaryings(UInt32 program, Int32 count, String[] varyings, int bufferMode)
            {
                Delegates.glTransformFeedbackVaryingsEXT((UInt32)program, (Int32)count, (String[])varyings, (OpenTK.Graphics.OpenGL.EXT_transform_feedback)bufferMode);
            }

            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform1uiEXT")]
            public static
            void Uniform1(Int32 location, Int32 v0)
            {
                Delegates.glUniform1uiEXT((Int32)location, (UInt32)v0);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform1uiEXT")]
            public static
            void Uniform1(Int32 location, UInt32 v0)
            {
                Delegates.glUniform1uiEXT((Int32)location, (UInt32)v0);
            }

            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform1uivEXT")]
            public static
            void Uniform1(Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform1uivEXT")]
            public static
            void Uniform1(Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform1uivEXT")]
            public static
            unsafe void Uniform1(Int32 location, Int32 count, Int32* value)
            {
                Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform1uivEXT")]
            public static
            void Uniform1(Int32 location, Int32 count, UInt32[] value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform1uivEXT")]
            public static
            void Uniform1(Int32 location, Int32 count, ref UInt32 value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform1uivEXT")]
            public static
            unsafe void Uniform1(Int32 location, Int32 count, UInt32* value)
            {
                Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value);
            }

            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform2uiEXT")]
            public static
            void Uniform2(Int32 location, Int32 v0, Int32 v1)
            {
                Delegates.glUniform2uiEXT((Int32)location, (UInt32)v0, (UInt32)v1);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform2uiEXT")]
            public static
            void Uniform2(Int32 location, UInt32 v0, UInt32 v1)
            {
                Delegates.glUniform2uiEXT((Int32)location, (UInt32)v0, (UInt32)v1);
            }

            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform2uivEXT")]
            public static
            void Uniform2(Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform2uivEXT")]
            public static
            unsafe void Uniform2(Int32 location, Int32 count, Int32* value)
            {
                Delegates.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform2uivEXT")]
            public static
            void Uniform2(Int32 location, Int32 count, UInt32[] value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform2uivEXT")]
            public static
            void Uniform2(Int32 location, Int32 count, ref UInt32 value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform2uivEXT")]
            public static
            unsafe void Uniform2(Int32 location, Int32 count, UInt32* value)
            {
                Delegates.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value);
            }

            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform3uiEXT")]
            public static
            void Uniform3(Int32 location, Int32 v0, Int32 v1, Int32 v2)
            {
                Delegates.glUniform3uiEXT((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform3uiEXT")]
            public static
            void Uniform3(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2)
            {
                Delegates.glUniform3uiEXT((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2);
            }

            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform3uivEXT")]
            public static
            void Uniform3(Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform3uivEXT")]
            public static
            void Uniform3(Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform3uivEXT")]
            public static
            unsafe void Uniform3(Int32 location, Int32 count, Int32* value)
            {
                Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform3uivEXT")]
            public static
            void Uniform3(Int32 location, Int32 count, UInt32[] value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform3uivEXT")]
            public static
            void Uniform3(Int32 location, Int32 count, ref UInt32 value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform3uivEXT")]
            public static
            unsafe void Uniform3(Int32 location, Int32 count, UInt32* value)
            {
                Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value);
            }

            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform4uiEXT")]
            public static
            void Uniform4(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
            {
                Delegates.glUniform4uiEXT((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2, (UInt32)v3);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform4uiEXT")]
            public static
            void Uniform4(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3)
            {
                Delegates.glUniform4uiEXT((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2, (UInt32)v3);
            }

            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform4uivEXT")]
            public static
            void Uniform4(Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform4uivEXT")]
            public static
            void Uniform4(Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform4uivEXT")]
            public static
            unsafe void Uniform4(Int32 location, Int32 count, Int32* value)
            {
                Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform4uivEXT")]
            public static
            void Uniform4(Int32 location, Int32 count, UInt32[] value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform4uivEXT")]
            public static
            void Uniform4(Int32 location, Int32 count, ref UInt32 value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "2.0", EntryPoint = "glUniform4uivEXT")]
            public static
            unsafe void Uniform4(Int32 location, Int32 count, UInt32* value)
            {
                Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value);
            }

            [AutoGenerated(Category = "EXT_bindable_uniform", Version = "2.0", EntryPoint = "glUniformBufferEXT")]
            public static
            void UniformBuffer(Int32 program, Int32 location, Int32 buffer)
            {
                Delegates.glUniformBufferEXT((UInt32)program, (Int32)location, (UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_bindable_uniform", Version = "2.0", EntryPoint = "glUniformBufferEXT")]
            public static
            void UniformBuffer(UInt32 program, Int32 location, UInt32 buffer)
            {
                Delegates.glUniformBufferEXT((UInt32)program, (Int32)location, (UInt32)buffer);
            }

            [AutoGenerated(Category = "EXT_compiled_vertex_array", Version = "1.1", EntryPoint = "glUnlockArraysEXT")]
            public static
            void UnlockArrays()
            {
                Delegates.glUnlockArraysEXT();
            }

            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glUnmapNamedBufferEXT")]
            public static
            bool UnmapNamedBuffer(Int32 buffer)
            {
                return Delegates.glUnmapNamedBufferEXT((UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glUnmapNamedBufferEXT")]
            public static
            bool UnmapNamedBuffer(UInt32 buffer)
            {
                return Delegates.glUnmapNamedBufferEXT((UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantbvEXT")]
            public static
            void Variant(UInt32 id, SByte[] addr)
            {
                unsafe
                {
                    fixed (SByte* addr_ptr = addr)
                    {
                        Delegates.glVariantbvEXT((UInt32)id, (SByte*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantbvEXT")]
            public static
            void Variant(UInt32 id, ref SByte addr)
            {
                unsafe
                {
                    fixed (SByte* addr_ptr = &addr)
                    {
                        Delegates.glVariantbvEXT((UInt32)id, (SByte*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantbvEXT")]
            public static
            unsafe void Variant(UInt32 id, SByte* addr)
            {
                Delegates.glVariantbvEXT((UInt32)id, (SByte*)addr);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantdvEXT")]
            public static
            void Variant(Int32 id, Double[] addr)
            {
                unsafe
                {
                    fixed (Double* addr_ptr = addr)
                    {
                        Delegates.glVariantdvEXT((UInt32)id, (Double*)addr_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantdvEXT")]
            public static
            void Variant(Int32 id, ref Double addr)
            {
                unsafe
                {
                    fixed (Double* addr_ptr = &addr)
                    {
                        Delegates.glVariantdvEXT((UInt32)id, (Double*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantdvEXT")]
            public static
            unsafe void Variant(Int32 id, Double* addr)
            {
                Delegates.glVariantdvEXT((UInt32)id, (Double*)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantdvEXT")]
            public static
            void Variant(UInt32 id, Double[] addr)
            {
                unsafe
                {
                    fixed (Double* addr_ptr = addr)
                    {
                        Delegates.glVariantdvEXT((UInt32)id, (Double*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantdvEXT")]
            public static
            void Variant(UInt32 id, ref Double addr)
            {
                unsafe
                {
                    fixed (Double* addr_ptr = &addr)
                    {
                        Delegates.glVariantdvEXT((UInt32)id, (Double*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantdvEXT")]
            public static
            unsafe void Variant(UInt32 id, Double* addr)
            {
                Delegates.glVariantdvEXT((UInt32)id, (Double*)addr);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantfvEXT")]
            public static
            void Variant(Int32 id, Single[] addr)
            {
                unsafe
                {
                    fixed (Single* addr_ptr = addr)
                    {
                        Delegates.glVariantfvEXT((UInt32)id, (Single*)addr_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantfvEXT")]
            public static
            void Variant(Int32 id, ref Single addr)
            {
                unsafe
                {
                    fixed (Single* addr_ptr = &addr)
                    {
                        Delegates.glVariantfvEXT((UInt32)id, (Single*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantfvEXT")]
            public static
            unsafe void Variant(Int32 id, Single* addr)
            {
                Delegates.glVariantfvEXT((UInt32)id, (Single*)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantfvEXT")]
            public static
            void Variant(UInt32 id, Single[] addr)
            {
                unsafe
                {
                    fixed (Single* addr_ptr = addr)
                    {
                        Delegates.glVariantfvEXT((UInt32)id, (Single*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantfvEXT")]
            public static
            void Variant(UInt32 id, ref Single addr)
            {
                unsafe
                {
                    fixed (Single* addr_ptr = &addr)
                    {
                        Delegates.glVariantfvEXT((UInt32)id, (Single*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantfvEXT")]
            public static
            unsafe void Variant(UInt32 id, Single* addr)
            {
                Delegates.glVariantfvEXT((UInt32)id, (Single*)addr);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantivEXT")]
            public static
            void Variant(Int32 id, Int32[] addr)
            {
                unsafe
                {
                    fixed (Int32* addr_ptr = addr)
                    {
                        Delegates.glVariantivEXT((UInt32)id, (Int32*)addr_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantivEXT")]
            public static
            void Variant(Int32 id, ref Int32 addr)
            {
                unsafe
                {
                    fixed (Int32* addr_ptr = &addr)
                    {
                        Delegates.glVariantivEXT((UInt32)id, (Int32*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantivEXT")]
            public static
            unsafe void Variant(Int32 id, Int32* addr)
            {
                Delegates.glVariantivEXT((UInt32)id, (Int32*)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantivEXT")]
            public static
            void Variant(UInt32 id, Int32[] addr)
            {
                unsafe
                {
                    fixed (Int32* addr_ptr = addr)
                    {
                        Delegates.glVariantivEXT((UInt32)id, (Int32*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantivEXT")]
            public static
            void Variant(UInt32 id, ref Int32 addr)
            {
                unsafe
                {
                    fixed (Int32* addr_ptr = &addr)
                    {
                        Delegates.glVariantivEXT((UInt32)id, (Int32*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantivEXT")]
            public static
            unsafe void Variant(UInt32 id, Int32* addr)
            {
                Delegates.glVariantivEXT((UInt32)id, (Int32*)addr);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, Int32 stride, IntPtr addr)
            {
                Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (UInt32)stride, (IntPtr)addr);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, Int32 stride, [InAttribute, OutAttribute] T3[] addr)
                where T3 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, Int32 stride, [InAttribute, OutAttribute] T3[,] addr)
                where T3 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, Int32 stride, [InAttribute, OutAttribute] T3[,,] addr)
                where T3 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(Int32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, Int32 stride, [InAttribute, OutAttribute] ref T3 addr)
                where T3 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    addr = (T3)addr_ptr.Target;
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer(Int32 id, int type, Int32 stride, IntPtr addr)
            {
                Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (UInt32)stride, (IntPtr)addr);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(Int32 id, int type, Int32 stride, [InAttribute, OutAttribute] T3[] addr)
                where T3 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(Int32 id, int type, Int32 stride, [InAttribute, OutAttribute] T3[,] addr)
                where T3 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(Int32 id, int type, Int32 stride, [InAttribute, OutAttribute] T3[,,] addr)
                where T3 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(Int32 id, int type, Int32 stride, [InAttribute, OutAttribute] ref T3 addr)
                where T3 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    addr = (T3)addr_ptr.Target;
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, UInt32 stride, IntPtr addr)
            {
                Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (UInt32)stride, (IntPtr)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, UInt32 stride, [InAttribute, OutAttribute] T3[] addr)
                where T3 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, UInt32 stride, [InAttribute, OutAttribute] T3[,] addr)
                where T3 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, UInt32 stride, [InAttribute, OutAttribute] T3[,,] addr)
                where T3 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(UInt32 id, OpenTK.Graphics.OpenGL.EXT_vertex_shader type, UInt32 stride, [InAttribute, OutAttribute] ref T3 addr)
                where T3 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    addr = (T3)addr_ptr.Target;
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer(UInt32 id, int type, UInt32 stride, IntPtr addr)
            {
                Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (UInt32)stride, (IntPtr)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(UInt32 id, int type, UInt32 stride, [InAttribute, OutAttribute] T3[] addr)
                where T3 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(UInt32 id, int type, UInt32 stride, [InAttribute, OutAttribute] T3[,] addr)
                where T3 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(UInt32 id, int type, UInt32 stride, [InAttribute, OutAttribute] T3[,,] addr)
                where T3 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(UInt32 id, int type, UInt32 stride, [InAttribute, OutAttribute] ref T3 addr)
                where T3 : struct
            {
                GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    addr = (T3)addr_ptr.Target;
                }
                finally
                {
                    addr_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantsvEXT")]
            public static
            void Variant(Int32 id, Int16[] addr)
            {
                unsafe
                {
                    fixed (Int16* addr_ptr = addr)
                    {
                        Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantsvEXT")]
            public static
            void Variant(Int32 id, ref Int16 addr)
            {
                unsafe
                {
                    fixed (Int16* addr_ptr = &addr)
                    {
                        Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantsvEXT")]
            public static
            unsafe void Variant(Int32 id, Int16* addr)
            {
                Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantsvEXT")]
            public static
            void Variant(UInt32 id, Int16[] addr)
            {
                unsafe
                {
                    fixed (Int16* addr_ptr = addr)
                    {
                        Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantsvEXT")]
            public static
            void Variant(UInt32 id, ref Int16 addr)
            {
                unsafe
                {
                    fixed (Int16* addr_ptr = &addr)
                    {
                        Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantsvEXT")]
            public static
            unsafe void Variant(UInt32 id, Int16* addr)
            {
                Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantubvEXT")]
            public static
            void Variant(Int32 id, Byte[] addr)
            {
                unsafe
                {
                    fixed (Byte* addr_ptr = addr)
                    {
                        Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantubvEXT")]
            public static
            void Variant(Int32 id, ref Byte addr)
            {
                unsafe
                {
                    fixed (Byte* addr_ptr = &addr)
                    {
                        Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantubvEXT")]
            public static
            unsafe void Variant(Int32 id, Byte* addr)
            {
                Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantubvEXT")]
            public static
            void Variant(UInt32 id, Byte[] addr)
            {
                unsafe
                {
                    fixed (Byte* addr_ptr = addr)
                    {
                        Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantubvEXT")]
            public static
            void Variant(UInt32 id, ref Byte addr)
            {
                unsafe
                {
                    fixed (Byte* addr_ptr = &addr)
                    {
                        Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantubvEXT")]
            public static
            unsafe void Variant(UInt32 id, Byte* addr)
            {
                Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantuivEXT")]
            public static
            void Variant(UInt32 id, UInt32[] addr)
            {
                unsafe
                {
                    fixed (UInt32* addr_ptr = addr)
                    {
                        Delegates.glVariantuivEXT((UInt32)id, (UInt32*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantuivEXT")]
            public static
            void Variant(UInt32 id, ref UInt32 addr)
            {
                unsafe
                {
                    fixed (UInt32* addr_ptr = &addr)
                    {
                        Delegates.glVariantuivEXT((UInt32)id, (UInt32*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantuivEXT")]
            public static
            unsafe void Variant(UInt32 id, UInt32* addr)
            {
                Delegates.glVariantuivEXT((UInt32)id, (UInt32*)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantusvEXT")]
            public static
            void Variant(UInt32 id, UInt16[] addr)
            {
                unsafe
                {
                    fixed (UInt16* addr_ptr = addr)
                    {
                        Delegates.glVariantusvEXT((UInt32)id, (UInt16*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantusvEXT")]
            public static
            void Variant(UInt32 id, ref UInt16 addr)
            {
                unsafe
                {
                    fixed (UInt16* addr_ptr = &addr)
                    {
                        Delegates.glVariantusvEXT((UInt32)id, (UInt16*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glVariantusvEXT")]
            public static
            unsafe void Variant(UInt32 id, UInt16* addr)
            {
                Delegates.glVariantusvEXT((UInt32)id, (UInt16*)addr);
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI1iEXT")]
            public static
            void VertexAttribI1(Int32 index, Int32 x)
            {
                Delegates.glVertexAttribI1iEXT((UInt32)index, (Int32)x);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI1iEXT")]
            public static
            void VertexAttribI1(UInt32 index, Int32 x)
            {
                Delegates.glVertexAttribI1iEXT((UInt32)index, (Int32)x);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI1ivEXT")]
            public static
            unsafe void VertexAttribI1(Int32 index, Int32* v)
            {
                Delegates.glVertexAttribI1ivEXT((UInt32)index, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI1ivEXT")]
            public static
            unsafe void VertexAttribI1(UInt32 index, Int32* v)
            {
                Delegates.glVertexAttribI1ivEXT((UInt32)index, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI1uiEXT")]
            public static
            void VertexAttribI1(UInt32 index, UInt32 x)
            {
                Delegates.glVertexAttribI1uiEXT((UInt32)index, (UInt32)x);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI1uivEXT")]
            public static
            unsafe void VertexAttribI1(UInt32 index, UInt32* v)
            {
                Delegates.glVertexAttribI1uivEXT((UInt32)index, (UInt32*)v);
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI2iEXT")]
            public static
            void VertexAttribI2(Int32 index, Int32 x, Int32 y)
            {
                Delegates.glVertexAttribI2iEXT((UInt32)index, (Int32)x, (Int32)y);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI2iEXT")]
            public static
            void VertexAttribI2(UInt32 index, Int32 x, Int32 y)
            {
                Delegates.glVertexAttribI2iEXT((UInt32)index, (Int32)x, (Int32)y);
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI2ivEXT")]
            public static
            void VertexAttribI2(Int32 index, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI2ivEXT")]
            public static
            void VertexAttribI2(Int32 index, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI2ivEXT")]
            public static
            unsafe void VertexAttribI2(Int32 index, Int32* v)
            {
                Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI2ivEXT")]
            public static
            void VertexAttribI2(UInt32 index, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI2ivEXT")]
            public static
            void VertexAttribI2(UInt32 index, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI2ivEXT")]
            public static
            unsafe void VertexAttribI2(UInt32 index, Int32* v)
            {
                Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI2uiEXT")]
            public static
            void VertexAttribI2(UInt32 index, UInt32 x, UInt32 y)
            {
                Delegates.glVertexAttribI2uiEXT((UInt32)index, (UInt32)x, (UInt32)y);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI2uivEXT")]
            public static
            void VertexAttribI2(UInt32 index, UInt32[] v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI2uivEXT((UInt32)index, (UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI2uivEXT")]
            public static
            void VertexAttribI2(UInt32 index, ref UInt32 v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI2uivEXT((UInt32)index, (UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI2uivEXT")]
            public static
            unsafe void VertexAttribI2(UInt32 index, UInt32* v)
            {
                Delegates.glVertexAttribI2uivEXT((UInt32)index, (UInt32*)v);
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI3iEXT")]
            public static
            void VertexAttribI3(Int32 index, Int32 x, Int32 y, Int32 z)
            {
                Delegates.glVertexAttribI3iEXT((UInt32)index, (Int32)x, (Int32)y, (Int32)z);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI3iEXT")]
            public static
            void VertexAttribI3(UInt32 index, Int32 x, Int32 y, Int32 z)
            {
                Delegates.glVertexAttribI3iEXT((UInt32)index, (Int32)x, (Int32)y, (Int32)z);
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI3ivEXT")]
            public static
            void VertexAttribI3(Int32 index, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI3ivEXT")]
            public static
            void VertexAttribI3(Int32 index, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI3ivEXT")]
            public static
            unsafe void VertexAttribI3(Int32 index, Int32* v)
            {
                Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI3ivEXT")]
            public static
            void VertexAttribI3(UInt32 index, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI3ivEXT")]
            public static
            void VertexAttribI3(UInt32 index, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI3ivEXT")]
            public static
            unsafe void VertexAttribI3(UInt32 index, Int32* v)
            {
                Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI3uiEXT")]
            public static
            void VertexAttribI3(UInt32 index, UInt32 x, UInt32 y, UInt32 z)
            {
                Delegates.glVertexAttribI3uiEXT((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI3uivEXT")]
            public static
            void VertexAttribI3(UInt32 index, UInt32[] v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI3uivEXT((UInt32)index, (UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI3uivEXT")]
            public static
            void VertexAttribI3(UInt32 index, ref UInt32 v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI3uivEXT((UInt32)index, (UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI3uivEXT")]
            public static
            unsafe void VertexAttribI3(UInt32 index, UInt32* v)
            {
                Delegates.glVertexAttribI3uivEXT((UInt32)index, (UInt32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4bvEXT")]
            public static
            void VertexAttribI4(UInt32 index, SByte[] v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4bvEXT((UInt32)index, (SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4bvEXT")]
            public static
            void VertexAttribI4(UInt32 index, ref SByte v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4bvEXT((UInt32)index, (SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4bvEXT")]
            public static
            unsafe void VertexAttribI4(UInt32 index, SByte* v)
            {
                Delegates.glVertexAttribI4bvEXT((UInt32)index, (SByte*)v);
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4iEXT")]
            public static
            void VertexAttribI4(Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                Delegates.glVertexAttribI4iEXT((UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4iEXT")]
            public static
            void VertexAttribI4(UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                Delegates.glVertexAttribI4iEXT((UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4ivEXT")]
            public static
            void VertexAttribI4(Int32 index, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4ivEXT")]
            public static
            void VertexAttribI4(Int32 index, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4ivEXT")]
            public static
            unsafe void VertexAttribI4(Int32 index, Int32* v)
            {
                Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4ivEXT")]
            public static
            void VertexAttribI4(UInt32 index, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4ivEXT")]
            public static
            void VertexAttribI4(UInt32 index, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4ivEXT")]
            public static
            unsafe void VertexAttribI4(UInt32 index, Int32* v)
            {
                Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v);
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4svEXT")]
            public static
            void VertexAttribI4(Int32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4svEXT")]
            public static
            void VertexAttribI4(Int32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4svEXT")]
            public static
            unsafe void VertexAttribI4(Int32 index, Int16* v)
            {
                Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4svEXT")]
            public static
            void VertexAttribI4(UInt32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4svEXT")]
            public static
            void VertexAttribI4(UInt32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4svEXT")]
            public static
            unsafe void VertexAttribI4(UInt32 index, Int16* v)
            {
                Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v);
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4ubvEXT")]
            public static
            void VertexAttribI4(Int32 index, Byte[] v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4ubvEXT")]
            public static
            void VertexAttribI4(Int32 index, ref Byte v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4ubvEXT")]
            public static
            unsafe void VertexAttribI4(Int32 index, Byte* v)
            {
                Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4ubvEXT")]
            public static
            void VertexAttribI4(UInt32 index, Byte[] v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4ubvEXT")]
            public static
            void VertexAttribI4(UInt32 index, ref Byte v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4ubvEXT")]
            public static
            unsafe void VertexAttribI4(UInt32 index, Byte* v)
            {
                Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4uiEXT")]
            public static
            void VertexAttribI4(UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w)
            {
                Delegates.glVertexAttribI4uiEXT((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4uivEXT")]
            public static
            void VertexAttribI4(UInt32 index, UInt32[] v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4uivEXT((UInt32)index, (UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4uivEXT")]
            public static
            void VertexAttribI4(UInt32 index, ref UInt32 v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4uivEXT((UInt32)index, (UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4uivEXT")]
            public static
            unsafe void VertexAttribI4(UInt32 index, UInt32* v)
            {
                Delegates.glVertexAttribI4uivEXT((UInt32)index, (UInt32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4usvEXT")]
            public static
            void VertexAttribI4(UInt32 index, UInt16[] v)
            {
                unsafe
                {
                    fixed (UInt16* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4usvEXT((UInt32)index, (UInt16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4usvEXT")]
            public static
            void VertexAttribI4(UInt32 index, ref UInt16 v)
            {
                unsafe
                {
                    fixed (UInt16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4usvEXT((UInt32)index, (UInt16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribI4usvEXT")]
            public static
            unsafe void VertexAttribI4(UInt32 index, UInt16* v)
            {
                Delegates.glVertexAttribI4usvEXT((UInt32)index, (UInt16*)v);
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static
            void VertexAttribIPointer(Int32 index, Int32 size, int type, Int32 stride, IntPtr pointer)
            {
                Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.NV_vertex_program4)type, (Int32)stride, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static
            void VertexAttribIPointer<T4>(Int32 index, Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.NV_vertex_program4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static
            void VertexAttribIPointer<T4>(Int32 index, Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.NV_vertex_program4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static
            void VertexAttribIPointer<T4>(Int32 index, Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.NV_vertex_program4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static
            void VertexAttribIPointer<T4>(Int32 index, Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.NV_vertex_program4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T4)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static
            void VertexAttribIPointer(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.NV_vertex_program4 type, Int32 stride, IntPtr pointer)
            {
                Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.NV_vertex_program4)type, (Int32)stride, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static
            void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.NV_vertex_program4 type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.NV_vertex_program4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static
            void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.NV_vertex_program4 type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.NV_vertex_program4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static
            void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.NV_vertex_program4 type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.NV_vertex_program4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static
            void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.NV_vertex_program4 type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.NV_vertex_program4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T4)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static
            void VertexAttribIPointer(UInt32 index, Int32 size, int type, Int32 stride, IntPtr pointer)
            {
                Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.NV_vertex_program4)type, (Int32)stride, (IntPtr)pointer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static
            void VertexAttribIPointer<T4>(UInt32 index, Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.NV_vertex_program4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static
            void VertexAttribIPointer<T4>(UInt32 index, Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.NV_vertex_program4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static
            void VertexAttribIPointer<T4>(UInt32 index, Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.NV_vertex_program4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static
            void VertexAttribIPointer<T4>(UInt32 index, Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.NV_vertex_program4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T4)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static
            void VertexAttribIPointer(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.NV_vertex_program4 type, Int32 stride, IntPtr pointer)
            {
                Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.NV_vertex_program4)type, (Int32)stride, (IntPtr)pointer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static
            void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.NV_vertex_program4 type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.NV_vertex_program4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static
            void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.NV_vertex_program4 type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.NV_vertex_program4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static
            void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.NV_vertex_program4 type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.NV_vertex_program4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_vertex_program4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static
            void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.NV_vertex_program4 type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.NV_vertex_program4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T4)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glVertexPointerEXT")]
            public static
            void VertexPointer(Int32 size, int type, Int32 stride, Int32 count, IntPtr pointer)
            {
                Delegates.glVertexPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.VertexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glVertexPointerEXT")]
            public static
            void VertexPointer<T4>(Int32 size, int type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T4[] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.VertexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glVertexPointerEXT")]
            public static
            void VertexPointer<T4>(Int32 size, int type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T4[,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.VertexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glVertexPointerEXT")]
            public static
            void VertexPointer<T4>(Int32 size, int type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T4[,,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.VertexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glVertexPointerEXT")]
            public static
            void VertexPointer<T4>(Int32 size, int type, Int32 stride, Int32 count, [InAttribute, OutAttribute] ref T4 pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.VertexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T4)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glVertexPointerEXT")]
            public static
            void VertexPointer(Int32 size, OpenTK.Graphics.OpenGL.VertexPointerType type, Int32 stride, Int32 count, IntPtr pointer)
            {
                Delegates.glVertexPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.VertexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glVertexPointerEXT")]
            public static
            void VertexPointer<T4>(Int32 size, OpenTK.Graphics.OpenGL.VertexPointerType type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T4[] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.VertexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glVertexPointerEXT")]
            public static
            void VertexPointer<T4>(Int32 size, OpenTK.Graphics.OpenGL.VertexPointerType type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T4[,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.VertexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glVertexPointerEXT")]
            public static
            void VertexPointer<T4>(Int32 size, OpenTK.Graphics.OpenGL.VertexPointerType type, Int32 stride, Int32 count, [InAttribute, OutAttribute] T4[,,] pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.VertexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_array", Version = "1.0", EntryPoint = "glVertexPointerEXT")]
            public static
            void VertexPointer<T4>(Int32 size, OpenTK.Graphics.OpenGL.VertexPointerType type, Int32 stride, Int32 count, [InAttribute, OutAttribute] ref T4 pointer)
                where T4 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.VertexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T4)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_weighting", Version = "1.1", EntryPoint = "glVertexWeightfEXT")]
            public static
            void VertexWeight(Single weight)
            {
                Delegates.glVertexWeightfEXT((Single)weight);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_weighting", Version = "1.1", EntryPoint = "glVertexWeightfvEXT")]
            public static
            unsafe void VertexWeight(Single* weight)
            {
                Delegates.glVertexWeightfvEXT((Single*)weight);
            }

            [AutoGenerated(Category = "EXT_vertex_weighting", Version = "1.1", EntryPoint = "glVertexWeightPointerEXT")]
            public static
            void VertexWeightPointer(Int32 size, OpenTK.Graphics.OpenGL.EXT_vertex_weighting type, Int32 stride, IntPtr pointer)
            {
                Delegates.glVertexWeightPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.EXT_vertex_weighting)type, (Int32)stride, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "EXT_vertex_weighting", Version = "1.1", EntryPoint = "glVertexWeightPointerEXT")]
            public static
            void VertexWeightPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.EXT_vertex_weighting type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexWeightPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.EXT_vertex_weighting)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_weighting", Version = "1.1", EntryPoint = "glVertexWeightPointerEXT")]
            public static
            void VertexWeightPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.EXT_vertex_weighting type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexWeightPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.EXT_vertex_weighting)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_weighting", Version = "1.1", EntryPoint = "glVertexWeightPointerEXT")]
            public static
            void VertexWeightPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.EXT_vertex_weighting type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexWeightPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.EXT_vertex_weighting)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_weighting", Version = "1.1", EntryPoint = "glVertexWeightPointerEXT")]
            public static
            void VertexWeightPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.EXT_vertex_weighting type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexWeightPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.EXT_vertex_weighting)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T3)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_weighting", Version = "1.1", EntryPoint = "glVertexWeightPointerEXT")]
            public static
            void VertexWeightPointer(Int32 size, int type, Int32 stride, IntPtr pointer)
            {
                Delegates.glVertexWeightPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.EXT_vertex_weighting)type, (Int32)stride, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "EXT_vertex_weighting", Version = "1.1", EntryPoint = "glVertexWeightPointerEXT")]
            public static
            void VertexWeightPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexWeightPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.EXT_vertex_weighting)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_weighting", Version = "1.1", EntryPoint = "glVertexWeightPointerEXT")]
            public static
            void VertexWeightPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexWeightPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.EXT_vertex_weighting)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_weighting", Version = "1.1", EntryPoint = "glVertexWeightPointerEXT")]
            public static
            void VertexWeightPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexWeightPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.EXT_vertex_weighting)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_weighting", Version = "1.1", EntryPoint = "glVertexWeightPointerEXT")]
            public static
            void VertexWeightPointer<T3>(Int32 size, int type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
                where T3 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexWeightPointerEXT((Int32)size, (OpenTK.Graphics.OpenGL.EXT_vertex_weighting)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T3)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glWriteMaskEXT")]
            public static
            void WriteMask(Int32 res, Int32 @in, OpenTK.Graphics.OpenGL.EXT_vertex_shader outX, OpenTK.Graphics.OpenGL.EXT_vertex_shader outY, OpenTK.Graphics.OpenGL.EXT_vertex_shader outZ, OpenTK.Graphics.OpenGL.EXT_vertex_shader outW)
            {
                Delegates.glWriteMaskEXT((UInt32)res, (UInt32)@in, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outX, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outY, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outZ, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outW);
            }

            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glWriteMaskEXT")]
            public static
            void WriteMask(Int32 res, Int32 @in, int outX, int outY, int outZ, int outW)
            {
                Delegates.glWriteMaskEXT((UInt32)res, (UInt32)@in, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outX, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outY, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outZ, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outW);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glWriteMaskEXT")]
            public static
            void WriteMask(UInt32 res, UInt32 @in, OpenTK.Graphics.OpenGL.EXT_vertex_shader outX, OpenTK.Graphics.OpenGL.EXT_vertex_shader outY, OpenTK.Graphics.OpenGL.EXT_vertex_shader outZ, OpenTK.Graphics.OpenGL.EXT_vertex_shader outW)
            {
                Delegates.glWriteMaskEXT((UInt32)res, (UInt32)@in, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outX, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outY, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outZ, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outW);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "1.2", EntryPoint = "glWriteMaskEXT")]
            public static
            void WriteMask(UInt32 res, UInt32 @in, int outX, int outY, int outZ, int outW)
            {
                Delegates.glWriteMaskEXT((UInt32)res, (UInt32)@in, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outX, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outY, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outZ, (OpenTK.Graphics.OpenGL.EXT_vertex_shader)outW);
            }

        }

        public static partial class Gremedy
        {
            [AutoGenerated(Category = "GREMEDY_string_marker", Version = "1.0", EntryPoint = "glStringMarkerGREMEDY")]
            public static
            void StringMarker(Int32 len, IntPtr @string)
            {
                Delegates.glStringMarkerGREMEDY((Int32)len, (IntPtr)@string);
            }

            [AutoGenerated(Category = "GREMEDY_string_marker", Version = "1.0", EntryPoint = "glStringMarkerGREMEDY")]
            public static
            void StringMarker<T1>(Int32 len, [InAttribute, OutAttribute] T1[] @string)
                where T1 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glStringMarkerGREMEDY((Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "GREMEDY_string_marker", Version = "1.0", EntryPoint = "glStringMarkerGREMEDY")]
            public static
            void StringMarker<T1>(Int32 len, [InAttribute, OutAttribute] T1[,] @string)
                where T1 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glStringMarkerGREMEDY((Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "GREMEDY_string_marker", Version = "1.0", EntryPoint = "glStringMarkerGREMEDY")]
            public static
            void StringMarker<T1>(Int32 len, [InAttribute, OutAttribute] T1[,,] @string)
                where T1 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glStringMarkerGREMEDY((Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

            [AutoGenerated(Category = "GREMEDY_string_marker", Version = "1.0", EntryPoint = "glStringMarkerGREMEDY")]
            public static
            void StringMarker<T1>(Int32 len, [InAttribute, OutAttribute] ref T1 @string)
                where T1 : struct
            {
                GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                try
                {
                    Delegates.glStringMarkerGREMEDY((Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    @string = (T1)@string_ptr.Target;
                }
                finally
                {
                    @string_ptr.Free();
                }
            }

        }

        public static partial class Ingr
        {
            [AutoGenerated(Category = "INGR_blend_func_separate", Version = "1.0", EntryPoint = "glBlendFuncSeparateINGR")]
            public static
            void BlendFuncSeparate(OpenTK.Graphics.OpenGL.All sfactorRGB, OpenTK.Graphics.OpenGL.All dfactorRGB, OpenTK.Graphics.OpenGL.All sfactorAlpha, OpenTK.Graphics.OpenGL.All dfactorAlpha)
            {
                Delegates.glBlendFuncSeparateINGR((OpenTK.Graphics.OpenGL.All)sfactorRGB, (OpenTK.Graphics.OpenGL.All)dfactorRGB, (OpenTK.Graphics.OpenGL.All)sfactorAlpha, (OpenTK.Graphics.OpenGL.All)dfactorAlpha);
            }

        }

        public static partial class NV
        {
            [AutoGenerated(Category = "NV_depth_buffer_float", Version = "2.0", EntryPoint = "glClearDepthdNV")]
            public static
            void ClearDepth(Double depth)
            {
                Delegates.glClearDepthdNV((Double)depth);
            }

            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glCombinerInputNV")]
            public static
            void CombinerInput(OpenTK.Graphics.OpenGL.All stage, OpenTK.Graphics.OpenGL.All portion, OpenTK.Graphics.OpenGL.All variable, OpenTK.Graphics.OpenGL.All input, OpenTK.Graphics.OpenGL.All mapping, OpenTK.Graphics.OpenGL.All componentUsage)
            {
                Delegates.glCombinerInputNV((OpenTK.Graphics.OpenGL.All)stage, (OpenTK.Graphics.OpenGL.All)portion, (OpenTK.Graphics.OpenGL.All)variable, (OpenTK.Graphics.OpenGL.All)input, (OpenTK.Graphics.OpenGL.All)mapping, (OpenTK.Graphics.OpenGL.All)componentUsage);
            }

            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glCombinerOutputNV")]
            public static
            void CombinerOutput(OpenTK.Graphics.OpenGL.All stage, OpenTK.Graphics.OpenGL.All portion, OpenTK.Graphics.OpenGL.All abOutput, OpenTK.Graphics.OpenGL.All cdOutput, OpenTK.Graphics.OpenGL.All sumOutput, OpenTK.Graphics.OpenGL.All scale, OpenTK.Graphics.OpenGL.All bias, bool abDotProduct, bool cdDotProduct, bool muxSum)
            {
                Delegates.glCombinerOutputNV((OpenTK.Graphics.OpenGL.All)stage, (OpenTK.Graphics.OpenGL.All)portion, (OpenTK.Graphics.OpenGL.All)abOutput, (OpenTK.Graphics.OpenGL.All)cdOutput, (OpenTK.Graphics.OpenGL.All)sumOutput, (OpenTK.Graphics.OpenGL.All)scale, (OpenTK.Graphics.OpenGL.All)bias, (bool)abDotProduct, (bool)cdDotProduct, (bool)muxSum);
            }

            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glCombinerParameterfNV")]
            public static
            void CombinerParameter(OpenTK.Graphics.OpenGL.All pname, Single param)
            {
                Delegates.glCombinerParameterfNV((OpenTK.Graphics.OpenGL.All)pname, (Single)param);
            }

            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glCombinerParameterfvNV")]
            public static
            void CombinerParameter(OpenTK.Graphics.OpenGL.All pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glCombinerParameterfvNV((OpenTK.Graphics.OpenGL.All)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glCombinerParameterfvNV")]
            public static
            unsafe void CombinerParameter(OpenTK.Graphics.OpenGL.All pname, Single* @params)
            {
                Delegates.glCombinerParameterfvNV((OpenTK.Graphics.OpenGL.All)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glCombinerParameteriNV")]
            public static
            void CombinerParameter(OpenTK.Graphics.OpenGL.All pname, Int32 param)
            {
                Delegates.glCombinerParameteriNV((OpenTK.Graphics.OpenGL.All)pname, (Int32)param);
            }

            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glCombinerParameterivNV")]
            public static
            void CombinerParameter(OpenTK.Graphics.OpenGL.All pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glCombinerParameterivNV((OpenTK.Graphics.OpenGL.All)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glCombinerParameterivNV")]
            public static
            unsafe void CombinerParameter(OpenTK.Graphics.OpenGL.All pname, Int32* @params)
            {
                Delegates.glCombinerParameterivNV((OpenTK.Graphics.OpenGL.All)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "NV_depth_buffer_float", Version = "2.0", EntryPoint = "glDepthBoundsdNV")]
            public static
            void DepthBounds(Double zmin, Double zmax)
            {
                Delegates.glDepthBoundsdNV((Double)zmin, (Double)zmax);
            }

            [AutoGenerated(Category = "NV_depth_buffer_float", Version = "2.0", EntryPoint = "glDepthRangedNV")]
            public static
            void DepthRange(Double zNear, Double zFar)
            {
                Delegates.glDepthRangedNV((Double)zNear, (Double)zFar);
            }

            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glFinalCombinerInputNV")]
            public static
            void FinalCombinerInput(OpenTK.Graphics.OpenGL.All variable, OpenTK.Graphics.OpenGL.All input, OpenTK.Graphics.OpenGL.All mapping, OpenTK.Graphics.OpenGL.All componentUsage)
            {
                Delegates.glFinalCombinerInputNV((OpenTK.Graphics.OpenGL.All)variable, (OpenTK.Graphics.OpenGL.All)input, (OpenTK.Graphics.OpenGL.All)mapping, (OpenTK.Graphics.OpenGL.All)componentUsage);
            }

            [AutoGenerated(Category = "NV_vertex_array_range", Version = "1.1", EntryPoint = "glFlushVertexArrayRangeNV")]
            public static
            void FlushVertexArrayRange()
            {
                Delegates.glFlushVertexArrayRangeNV();
            }

            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glGetCombinerInputParameterfvNV")]
            public static
            void GetCombinerInputParameter(OpenTK.Graphics.OpenGL.All stage, OpenTK.Graphics.OpenGL.All portion, OpenTK.Graphics.OpenGL.All variable, OpenTK.Graphics.OpenGL.All pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetCombinerInputParameterfvNV((OpenTK.Graphics.OpenGL.All)stage, (OpenTK.Graphics.OpenGL.All)portion, (OpenTK.Graphics.OpenGL.All)variable, (OpenTK.Graphics.OpenGL.All)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glGetCombinerInputParameterfvNV")]
            public static
            void GetCombinerInputParameter(OpenTK.Graphics.OpenGL.All stage, OpenTK.Graphics.OpenGL.All portion, OpenTK.Graphics.OpenGL.All variable, OpenTK.Graphics.OpenGL.All pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetCombinerInputParameterfvNV((OpenTK.Graphics.OpenGL.All)stage, (OpenTK.Graphics.OpenGL.All)portion, (OpenTK.Graphics.OpenGL.All)variable, (OpenTK.Graphics.OpenGL.All)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glGetCombinerInputParameterfvNV")]
            public static
            unsafe void GetCombinerInputParameter(OpenTK.Graphics.OpenGL.All stage, OpenTK.Graphics.OpenGL.All portion, OpenTK.Graphics.OpenGL.All variable, OpenTK.Graphics.OpenGL.All pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetCombinerInputParameterfvNV((OpenTK.Graphics.OpenGL.All)stage, (OpenTK.Graphics.OpenGL.All)portion, (OpenTK.Graphics.OpenGL.All)variable, (OpenTK.Graphics.OpenGL.All)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glGetCombinerInputParameterivNV")]
            public static
            void GetCombinerInputParameter(OpenTK.Graphics.OpenGL.All stage, OpenTK.Graphics.OpenGL.All portion, OpenTK.Graphics.OpenGL.All variable, OpenTK.Graphics.OpenGL.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetCombinerInputParameterivNV((OpenTK.Graphics.OpenGL.All)stage, (OpenTK.Graphics.OpenGL.All)portion, (OpenTK.Graphics.OpenGL.All)variable, (OpenTK.Graphics.OpenGL.All)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glGetCombinerInputParameterivNV")]
            public static
            void GetCombinerInputParameter(OpenTK.Graphics.OpenGL.All stage, OpenTK.Graphics.OpenGL.All portion, OpenTK.Graphics.OpenGL.All variable, OpenTK.Graphics.OpenGL.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetCombinerInputParameterivNV((OpenTK.Graphics.OpenGL.All)stage, (OpenTK.Graphics.OpenGL.All)portion, (OpenTK.Graphics.OpenGL.All)variable, (OpenTK.Graphics.OpenGL.All)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glGetCombinerInputParameterivNV")]
            public static
            unsafe void GetCombinerInputParameter(OpenTK.Graphics.OpenGL.All stage, OpenTK.Graphics.OpenGL.All portion, OpenTK.Graphics.OpenGL.All variable, OpenTK.Graphics.OpenGL.All pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetCombinerInputParameterivNV((OpenTK.Graphics.OpenGL.All)stage, (OpenTK.Graphics.OpenGL.All)portion, (OpenTK.Graphics.OpenGL.All)variable, (OpenTK.Graphics.OpenGL.All)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glGetCombinerOutputParameterfvNV")]
            public static
            void GetCombinerOutputParameter(OpenTK.Graphics.OpenGL.All stage, OpenTK.Graphics.OpenGL.All portion, OpenTK.Graphics.OpenGL.All pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetCombinerOutputParameterfvNV((OpenTK.Graphics.OpenGL.All)stage, (OpenTK.Graphics.OpenGL.All)portion, (OpenTK.Graphics.OpenGL.All)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glGetCombinerOutputParameterfvNV")]
            public static
            void GetCombinerOutputParameter(OpenTK.Graphics.OpenGL.All stage, OpenTK.Graphics.OpenGL.All portion, OpenTK.Graphics.OpenGL.All pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetCombinerOutputParameterfvNV((OpenTK.Graphics.OpenGL.All)stage, (OpenTK.Graphics.OpenGL.All)portion, (OpenTK.Graphics.OpenGL.All)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glGetCombinerOutputParameterfvNV")]
            public static
            unsafe void GetCombinerOutputParameter(OpenTK.Graphics.OpenGL.All stage, OpenTK.Graphics.OpenGL.All portion, OpenTK.Graphics.OpenGL.All pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetCombinerOutputParameterfvNV((OpenTK.Graphics.OpenGL.All)stage, (OpenTK.Graphics.OpenGL.All)portion, (OpenTK.Graphics.OpenGL.All)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glGetCombinerOutputParameterivNV")]
            public static
            void GetCombinerOutputParameter(OpenTK.Graphics.OpenGL.All stage, OpenTK.Graphics.OpenGL.All portion, OpenTK.Graphics.OpenGL.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetCombinerOutputParameterivNV((OpenTK.Graphics.OpenGL.All)stage, (OpenTK.Graphics.OpenGL.All)portion, (OpenTK.Graphics.OpenGL.All)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glGetCombinerOutputParameterivNV")]
            public static
            void GetCombinerOutputParameter(OpenTK.Graphics.OpenGL.All stage, OpenTK.Graphics.OpenGL.All portion, OpenTK.Graphics.OpenGL.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetCombinerOutputParameterivNV((OpenTK.Graphics.OpenGL.All)stage, (OpenTK.Graphics.OpenGL.All)portion, (OpenTK.Graphics.OpenGL.All)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glGetCombinerOutputParameterivNV")]
            public static
            unsafe void GetCombinerOutputParameter(OpenTK.Graphics.OpenGL.All stage, OpenTK.Graphics.OpenGL.All portion, OpenTK.Graphics.OpenGL.All pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetCombinerOutputParameterivNV((OpenTK.Graphics.OpenGL.All)stage, (OpenTK.Graphics.OpenGL.All)portion, (OpenTK.Graphics.OpenGL.All)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glGetFinalCombinerInputParameterfvNV")]
            public static
            void GetFinalCombinerInputParameter(OpenTK.Graphics.OpenGL.All variable, OpenTK.Graphics.OpenGL.All pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetFinalCombinerInputParameterfvNV((OpenTK.Graphics.OpenGL.All)variable, (OpenTK.Graphics.OpenGL.All)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glGetFinalCombinerInputParameterfvNV")]
            public static
            void GetFinalCombinerInputParameter(OpenTK.Graphics.OpenGL.All variable, OpenTK.Graphics.OpenGL.All pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetFinalCombinerInputParameterfvNV((OpenTK.Graphics.OpenGL.All)variable, (OpenTK.Graphics.OpenGL.All)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glGetFinalCombinerInputParameterfvNV")]
            public static
            unsafe void GetFinalCombinerInputParameter(OpenTK.Graphics.OpenGL.All variable, OpenTK.Graphics.OpenGL.All pname, [OutAttribute] Single* @params)
            {
                Delegates.glGetFinalCombinerInputParameterfvNV((OpenTK.Graphics.OpenGL.All)variable, (OpenTK.Graphics.OpenGL.All)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glGetFinalCombinerInputParameterivNV")]
            public static
            void GetFinalCombinerInputParameter(OpenTK.Graphics.OpenGL.All variable, OpenTK.Graphics.OpenGL.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFinalCombinerInputParameterivNV((OpenTK.Graphics.OpenGL.All)variable, (OpenTK.Graphics.OpenGL.All)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glGetFinalCombinerInputParameterivNV")]
            public static
            void GetFinalCombinerInputParameter(OpenTK.Graphics.OpenGL.All variable, OpenTK.Graphics.OpenGL.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFinalCombinerInputParameterivNV((OpenTK.Graphics.OpenGL.All)variable, (OpenTK.Graphics.OpenGL.All)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NV_register_combiners", Version = "1.1", EntryPoint = "glGetFinalCombinerInputParameterivNV")]
            public static
            unsafe void GetFinalCombinerInputParameter(OpenTK.Graphics.OpenGL.All variable, OpenTK.Graphics.OpenGL.All pname, [OutAttribute] Int32* @params)
            {
                Delegates.glGetFinalCombinerInputParameterivNV((OpenTK.Graphics.OpenGL.All)variable, (OpenTK.Graphics.OpenGL.All)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "NV_geometry_program4", Version = "2.0", EntryPoint = "glProgramVertexLimitNV")]
            public static
            void ProgramVertexLimit(int target, Int32 limit)
            {
                Delegates.glProgramVertexLimitNV((OpenTK.Graphics.OpenGL.NV_geometry_program4)target, (Int32)limit);
            }

            [AutoGenerated(Category = "NV_geometry_program4", Version = "2.0", EntryPoint = "glProgramVertexLimitNV")]
            public static
            void ProgramVertexLimit(OpenTK.Graphics.OpenGL.NV_geometry_program4 target, Int32 limit)
            {
                Delegates.glProgramVertexLimitNV((OpenTK.Graphics.OpenGL.NV_geometry_program4)target, (Int32)limit);
            }

            [AutoGenerated(Category = "NV_framebuffer_multisample_coverage", Version = "1.5", EntryPoint = "glRenderbufferStorageMultisampleCoverageNV")]
            public static
            void RenderbufferStorageMultisampleCoverage(int target, Int32 coverageSamples, Int32 colorSamples, int internalformat, Int32 width, Int32 height)
            {
                Delegates.glRenderbufferStorageMultisampleCoverageNV((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (Int32)coverageSamples, (Int32)colorSamples, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "NV_framebuffer_multisample_coverage", Version = "1.5", EntryPoint = "glRenderbufferStorageMultisampleCoverageNV")]
            public static
            void RenderbufferStorageMultisampleCoverage(OpenTK.Graphics.OpenGL.RenderbufferTarget target, Int32 coverageSamples, Int32 colorSamples, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height)
            {
                Delegates.glRenderbufferStorageMultisampleCoverageNV((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (Int32)coverageSamples, (Int32)colorSamples, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "NV_vertex_array_range", Version = "1.1", EntryPoint = "glVertexArrayRangeNV")]
            public static
            void VertexArrayRange(Int32 length, IntPtr pointer)
            {
                Delegates.glVertexArrayRangeNV((Int32)length, (IntPtr)pointer);
            }

            [AutoGenerated(Category = "NV_vertex_array_range", Version = "1.1", EntryPoint = "glVertexArrayRangeNV")]
            public static
            void VertexArrayRange<T1>(Int32 length, [InAttribute, OutAttribute] T1[] pointer)
                where T1 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexArrayRangeNV((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "NV_vertex_array_range", Version = "1.1", EntryPoint = "glVertexArrayRangeNV")]
            public static
            void VertexArrayRange<T1>(Int32 length, [InAttribute, OutAttribute] T1[,] pointer)
                where T1 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexArrayRangeNV((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "NV_vertex_array_range", Version = "1.1", EntryPoint = "glVertexArrayRangeNV")]
            public static
            void VertexArrayRange<T1>(Int32 length, [InAttribute, OutAttribute] T1[,,] pointer)
                where T1 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexArrayRangeNV((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

            [AutoGenerated(Category = "NV_vertex_array_range", Version = "1.1", EntryPoint = "glVertexArrayRangeNV")]
            public static
            void VertexArrayRange<T1>(Int32 length, [InAttribute, OutAttribute] ref T1 pointer)
                where T1 : struct
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexArrayRangeNV((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T1)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }

        }

        public static partial class Pgi
        {
            [AutoGenerated(Category = "PGI_misc_hints", Version = "1.1", EntryPoint = "glHintPGI")]
            public static
            void Hint(OpenTK.Graphics.OpenGL.All target, Int32 mode)
            {
                Delegates.glHintPGI((OpenTK.Graphics.OpenGL.All)target, (Int32)mode);
            }

        }

        public static partial class Sgis
        {
            [AutoGenerated(Category = "SGIS_detail_texture", Version = "1.0", EntryPoint = "glDetailTexFuncSGIS")]
            public static
            void DetailTexFunc(int target, Int32 n, Single[] points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glDetailTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)n, (Single*)points_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SGIS_detail_texture", Version = "1.0", EntryPoint = "glDetailTexFuncSGIS")]
            public static
            void DetailTexFunc(int target, Int32 n, ref Single points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glDetailTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)n, (Single*)points_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SGIS_detail_texture", Version = "1.0", EntryPoint = "glDetailTexFuncSGIS")]
            public static
            unsafe void DetailTexFunc(int target, Int32 n, Single* points)
            {
                Delegates.glDetailTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)n, (Single*)points);
            }

            [AutoGenerated(Category = "SGIS_detail_texture", Version = "1.0", EntryPoint = "glDetailTexFuncSGIS")]
            public static
            void DetailTexFunc(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 n, Single[] points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glDetailTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)n, (Single*)points_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SGIS_detail_texture", Version = "1.0", EntryPoint = "glDetailTexFuncSGIS")]
            public static
            void DetailTexFunc(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 n, ref Single points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glDetailTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)n, (Single*)points_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SGIS_detail_texture", Version = "1.0", EntryPoint = "glDetailTexFuncSGIS")]
            public static
            unsafe void DetailTexFunc(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 n, Single* points)
            {
                Delegates.glDetailTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)n, (Single*)points);
            }

            [AutoGenerated(Category = "SGIS_detail_texture", Version = "1.0", EntryPoint = "glGetDetailTexFuncSGIS")]
            public static
            void GetDetailTexFunc(int target, [OutAttribute] Single[] points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glGetDetailTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Single*)points_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SGIS_detail_texture", Version = "1.0", EntryPoint = "glGetDetailTexFuncSGIS")]
            public static
            void GetDetailTexFunc(int target, [OutAttribute] out Single points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glGetDetailTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Single*)points_ptr);
                        points = *points_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SGIS_detail_texture", Version = "1.0", EntryPoint = "glGetDetailTexFuncSGIS")]
            public static
            unsafe void GetDetailTexFunc(int target, [OutAttribute] Single* points)
            {
                Delegates.glGetDetailTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Single*)points);
            }

            [AutoGenerated(Category = "SGIS_detail_texture", Version = "1.0", EntryPoint = "glGetDetailTexFuncSGIS")]
            public static
            void GetDetailTexFunc(OpenTK.Graphics.OpenGL.TextureTarget target, [OutAttribute] Single[] points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glGetDetailTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Single*)points_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SGIS_detail_texture", Version = "1.0", EntryPoint = "glGetDetailTexFuncSGIS")]
            public static
            void GetDetailTexFunc(OpenTK.Graphics.OpenGL.TextureTarget target, [OutAttribute] out Single points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glGetDetailTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Single*)points_ptr);
                        points = *points_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SGIS_detail_texture", Version = "1.0", EntryPoint = "glGetDetailTexFuncSGIS")]
            public static
            unsafe void GetDetailTexFunc(OpenTK.Graphics.OpenGL.TextureTarget target, [OutAttribute] Single* points)
            {
                Delegates.glGetDetailTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Single*)points);
            }

            [AutoGenerated(Category = "SGIS_sharpen_texture", Version = "1.0", EntryPoint = "glGetSharpenTexFuncSGIS")]
            public static
            void GetSharpenTexFunc(int target, [OutAttribute] Single[] points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glGetSharpenTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Single*)points_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SGIS_sharpen_texture", Version = "1.0", EntryPoint = "glGetSharpenTexFuncSGIS")]
            public static
            void GetSharpenTexFunc(int target, [OutAttribute] out Single points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glGetSharpenTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Single*)points_ptr);
                        points = *points_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SGIS_sharpen_texture", Version = "1.0", EntryPoint = "glGetSharpenTexFuncSGIS")]
            public static
            unsafe void GetSharpenTexFunc(int target, [OutAttribute] Single* points)
            {
                Delegates.glGetSharpenTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Single*)points);
            }

            [AutoGenerated(Category = "SGIS_sharpen_texture", Version = "1.0", EntryPoint = "glGetSharpenTexFuncSGIS")]
            public static
            void GetSharpenTexFunc(OpenTK.Graphics.OpenGL.TextureTarget target, [OutAttribute] Single[] points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glGetSharpenTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Single*)points_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SGIS_sharpen_texture", Version = "1.0", EntryPoint = "glGetSharpenTexFuncSGIS")]
            public static
            void GetSharpenTexFunc(OpenTK.Graphics.OpenGL.TextureTarget target, [OutAttribute] out Single points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glGetSharpenTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Single*)points_ptr);
                        points = *points_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SGIS_sharpen_texture", Version = "1.0", EntryPoint = "glGetSharpenTexFuncSGIS")]
            public static
            unsafe void GetSharpenTexFunc(OpenTK.Graphics.OpenGL.TextureTarget target, [OutAttribute] Single* points)
            {
                Delegates.glGetSharpenTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Single*)points);
            }

            [AutoGenerated(Category = "SGIS_point_parameters", Version = "1.0", EntryPoint = "glPointParameterfSGIS")]
            public static
            void PointParameter(OpenTK.Graphics.OpenGL.All pname, Single param)
            {
                Delegates.glPointParameterfSGIS((OpenTK.Graphics.OpenGL.All)pname, (Single)param);
            }

            [AutoGenerated(Category = "SGIS_point_parameters", Version = "1.0", EntryPoint = "glPointParameterfvSGIS")]
            public static
            void PointParameter(OpenTK.Graphics.OpenGL.All pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glPointParameterfvSGIS((OpenTK.Graphics.OpenGL.All)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SGIS_point_parameters", Version = "1.0", EntryPoint = "glPointParameterfvSGIS")]
            public static
            unsafe void PointParameter(OpenTK.Graphics.OpenGL.All pname, Single* @params)
            {
                Delegates.glPointParameterfvSGIS((OpenTK.Graphics.OpenGL.All)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "SGIS_multisample", Version = "1.1", EntryPoint = "glSampleMaskSGIS")]
            public static
            void SampleMask(Single value, bool invert)
            {
                Delegates.glSampleMaskSGIS((Single)value, (bool)invert);
            }

            [AutoGenerated(Category = "SGIS_multisample", Version = "1.0", EntryPoint = "glSamplePatternSGIS")]
            public static
            void SamplePattern(int pattern)
            {
                Delegates.glSamplePatternSGIS((OpenTK.Graphics.OpenGL.SamplePatternSGIS)pattern);
            }

            [AutoGenerated(Category = "SGIS_multisample", Version = "1.0", EntryPoint = "glSamplePatternSGIS")]
            public static
            void SamplePattern(OpenTK.Graphics.OpenGL.SamplePatternSGIS pattern)
            {
                Delegates.glSamplePatternSGIS((OpenTK.Graphics.OpenGL.SamplePatternSGIS)pattern);
            }

            [AutoGenerated(Category = "SGIS_sharpen_texture", Version = "1.0", EntryPoint = "glSharpenTexFuncSGIS")]
            public static
            void SharpenTexFunc(int target, Int32 n, Single[] points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glSharpenTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)n, (Single*)points_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SGIS_sharpen_texture", Version = "1.0", EntryPoint = "glSharpenTexFuncSGIS")]
            public static
            void SharpenTexFunc(int target, Int32 n, ref Single points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glSharpenTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)n, (Single*)points_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SGIS_sharpen_texture", Version = "1.0", EntryPoint = "glSharpenTexFuncSGIS")]
            public static
            unsafe void SharpenTexFunc(int target, Int32 n, Single* points)
            {
                Delegates.glSharpenTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)n, (Single*)points);
            }

            [AutoGenerated(Category = "SGIS_sharpen_texture", Version = "1.0", EntryPoint = "glSharpenTexFuncSGIS")]
            public static
            void SharpenTexFunc(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 n, Single[] points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glSharpenTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)n, (Single*)points_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SGIS_sharpen_texture", Version = "1.0", EntryPoint = "glSharpenTexFuncSGIS")]
            public static
            void SharpenTexFunc(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 n, ref Single points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glSharpenTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)n, (Single*)points_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SGIS_sharpen_texture", Version = "1.0", EntryPoint = "glSharpenTexFuncSGIS")]
            public static
            unsafe void SharpenTexFunc(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 n, Single* points)
            {
                Delegates.glSharpenTexFuncSGIS((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)n, (Single*)points);
            }

        }

    }
}
